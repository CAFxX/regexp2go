// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags 212 -pkg "ipv6" -fn "Match" -pool true "(?:(?:[0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}|(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}|(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}|(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:(?:(?::[0-9a-fA-F]{1,4}){1,6})|:(?:(?::[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(?::[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(?:ffff(?::0{1,4}){0,1}:){0,1}(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(?:[0-9a-fA-F]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9]))"

package ipv6

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "github.com/CAFxX/bytespool"

const MatchRegexp = "(?:(?:[0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}|(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}|(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}|(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:(?:(?::[0-9a-fA-F]{1,4}){1,6})|:(?:(?::[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(?::[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(?:ffff(?::0{1,4}){0,1}:){0,1}(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(?:[0-9a-fA-F]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9]))"

var _ = syntax.IsWordChar
var _ = strings.Index

type stateMatch struct {
	c   [2]int
	i   int
	pc  int
	cnt int
}

// Match implements the regular expression
// (?:(?:[0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}|(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}|(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}|(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:(?:(?::[0-9a-fA-F]{1,4}){1,6})|:(?:(?::[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(?::[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(?:ffff(?::0{1,4}){0,1}:){0,1}(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(?:[0-9a-fA-F]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9]))
// with flags 212
func Match(r string) (matches [1]string, pos int, ok bool) {
	var bt [319]stateMatch // static storage for backtracking state
	matches, pos, ok = doMatch(r, bt[:0])
	return
}

func doMatch(r string, bt []stateMatch) ([1]string, int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*319 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]      // fast reset dynamic backtracking state
	var c [2]int     // captures
	var bc [2]int    // captures for the longest match so far
	matched := false // succesful match flag
	i := si          // current byte index
	c[0] = i         // start of match
	goto inst771     // initial instruction

	// inst0 unreacheable

	goto unreachable
	goto inst2
inst2: // rune "09AFaf" -> 6
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst6
			}
			goto inst2_fail
		} else if false {
			i += sz
			goto inst6
		}
	}
	goto inst2_fail
	goto unreachable
	goto inst2_fail
inst2_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 7:
			goto inst7_alt
		}
	}
	goto fail

	goto unreachable
	goto inst7
inst7: // alt -> 2, 8
	{
		idx := i*319 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 7, 0})
	goto inst2
inst7_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst8
	}

	goto unreachable
	goto inst6
inst6: // alt -> 3, 8
	{
		idx := i*319 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 6, 0})
	goto inst3
inst6_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst8
	}

	goto unreachable
	goto inst3
inst3: // rune "09AFaf" -> 5
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst5
			}
			goto inst3_fail
		} else if false {
			i += sz
			goto inst5
		}
	}
	goto inst3_fail
	goto unreachable
	goto inst3_fail
inst3_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		}
	}
	goto fail

	goto unreachable
	goto inst5
inst5: // alt -> 4, 8
	{
		idx := i*319 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 5, 0})
	goto inst4
inst5_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst8
	}

	goto unreachable
	goto inst8
inst8: // string ":" -> 9
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst9
		}
	}
	goto inst8_fail
	goto unreachable
	goto inst8_fail
inst8_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst4
inst4: // rune "09AFaf" -> 8
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst8
			}
			goto inst4_fail
		} else if false {
			i += sz
			goto inst8
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		}
	}
	goto fail

	goto unreachable
	goto inst9
inst9: // rune "09AFaf" -> 15
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst15
			}
			goto inst9_fail
		} else if false {
			i += sz
			goto inst15
		}
	}
	goto inst9_fail
	goto unreachable
	goto inst9_fail
inst9_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst15
inst15: // alt -> 10, 16
	{
		idx := i*319 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 15, 0})
	goto inst10
inst15_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst16
	}

	goto unreachable
	goto inst10
inst10: // rune "09AFaf" -> 14
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst14
			}
			goto inst10_fail
		} else if false {
			i += sz
			goto inst14
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 15:
			goto inst15_alt
		}
	}
	goto fail

	goto unreachable
	goto inst14
inst14: // alt -> 11, 16
	{
		idx := i*319 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 14, 0})
	goto inst11
inst14_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst16
	}

	goto unreachable
	goto inst11
inst11: // rune "09AFaf" -> 13
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst13
			}
			goto inst11_fail
		} else if false {
			i += sz
			goto inst13
		}
	}
	goto inst11_fail
	goto unreachable
	goto inst11_fail
inst11_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 14:
			goto inst14_alt
		}
	}
	goto fail

	goto unreachable
	goto inst13
inst13: // alt -> 12, 16
	{
		idx := i*319 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 13, 0})
	goto inst12
inst13_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst16
	}

	goto unreachable
	goto inst16
inst16: // string ":" -> 17
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst17
		}
	}
	goto inst16_fail
	goto unreachable
	goto inst16_fail
inst16_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst12
inst12: // rune "09AFaf" -> 16
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst16
			}
			goto inst12_fail
		} else if false {
			i += sz
			goto inst16
		}
	}
	goto inst12_fail
	goto unreachable
	goto inst12_fail
inst12_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 13:
			goto inst13_alt
		}
	}
	goto fail

	goto unreachable
	goto inst17
inst17: // rune "09AFaf" -> 23
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst23
			}
			goto inst17_fail
		} else if false {
			i += sz
			goto inst23
		}
	}
	goto inst17_fail
	goto unreachable
	goto inst17_fail
inst17_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst23
inst23: // alt -> 18, 24
	{
		idx := i*319 + 6
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 23, 0})
	goto inst18
inst23_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst24
	}

	goto unreachable
	goto inst18
inst18: // rune "09AFaf" -> 22
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst22
			}
			goto inst18_fail
		} else if false {
			i += sz
			goto inst22
		}
	}
	goto inst18_fail
	goto unreachable
	goto inst18_fail
inst18_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 23:
			goto inst23_alt
		}
	}
	goto fail

	goto unreachable
	goto inst22
inst22: // alt -> 19, 24
	{
		idx := i*319 + 7
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 22, 0})
	goto inst19
inst22_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst24
	}

	goto unreachable
	goto inst19
inst19: // rune "09AFaf" -> 21
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst21
			}
			goto inst19_fail
		} else if false {
			i += sz
			goto inst21
		}
	}
	goto inst19_fail
	goto unreachable
	goto inst19_fail
inst19_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 22:
			goto inst22_alt
		}
	}
	goto fail

	goto unreachable
	goto inst21
inst21: // alt -> 20, 24
	{
		idx := i*319 + 8
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 21, 0})
	goto inst20
inst21_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst24
	}

	goto unreachable
	goto inst24
inst24: // string ":" -> 25
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst25
		}
	}
	goto inst24_fail
	goto unreachable
	goto inst24_fail
inst24_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst20
inst20: // rune "09AFaf" -> 24
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst24
			}
			goto inst20_fail
		} else if false {
			i += sz
			goto inst24
		}
	}
	goto inst20_fail
	goto unreachable
	goto inst20_fail
inst20_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 21:
			goto inst21_alt
		}
	}
	goto fail

	goto unreachable
	goto inst25
inst25: // rune "09AFaf" -> 31
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst31
			}
			goto inst25_fail
		} else if false {
			i += sz
			goto inst31
		}
	}
	goto inst25_fail
	goto unreachable
	goto inst25_fail
inst25_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst31
inst31: // alt -> 26, 32
	{
		idx := i*319 + 9
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 31, 0})
	goto inst26
inst31_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst32
	}

	goto unreachable
	goto inst26
inst26: // rune "09AFaf" -> 30
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst30
			}
			goto inst26_fail
		} else if false {
			i += sz
			goto inst30
		}
	}
	goto inst26_fail
	goto unreachable
	goto inst26_fail
inst26_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 31:
			goto inst31_alt
		}
	}
	goto fail

	goto unreachable
	goto inst30
inst30: // alt -> 27, 32
	{
		idx := i*319 + 10
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 30, 0})
	goto inst27
inst30_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst32
	}

	goto unreachable
	goto inst27
inst27: // rune "09AFaf" -> 29
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst29
			}
			goto inst27_fail
		} else if false {
			i += sz
			goto inst29
		}
	}
	goto inst27_fail
	goto unreachable
	goto inst27_fail
inst27_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 30:
			goto inst30_alt
		}
	}
	goto fail

	goto unreachable
	goto inst29
inst29: // alt -> 28, 32
	{
		idx := i*319 + 11
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 29, 0})
	goto inst28
inst29_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst32
	}

	goto unreachable
	goto inst32
inst32: // string ":" -> 33
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst33
		}
	}
	goto inst32_fail
	goto unreachable
	goto inst32_fail
inst32_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst28
inst28: // rune "09AFaf" -> 32
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst32
			}
			goto inst28_fail
		} else if false {
			i += sz
			goto inst32
		}
	}
	goto inst28_fail
	goto unreachable
	goto inst28_fail
inst28_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 29:
			goto inst29_alt
		}
	}
	goto fail

	goto unreachable
	goto inst33
inst33: // rune "09AFaf" -> 39
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst39
			}
			goto inst33_fail
		} else if false {
			i += sz
			goto inst39
		}
	}
	goto inst33_fail
	goto unreachable
	goto inst33_fail
inst33_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst39
inst39: // alt -> 34, 40
	{
		idx := i*319 + 12
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 39, 0})
	goto inst34
inst39_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst40
	}

	goto unreachable
	goto inst34
inst34: // rune "09AFaf" -> 38
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst38
			}
			goto inst34_fail
		} else if false {
			i += sz
			goto inst38
		}
	}
	goto inst34_fail
	goto unreachable
	goto inst34_fail
inst34_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 39:
			goto inst39_alt
		}
	}
	goto fail

	goto unreachable
	goto inst38
inst38: // alt -> 35, 40
	{
		idx := i*319 + 13
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 38, 0})
	goto inst35
inst38_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst40
	}

	goto unreachable
	goto inst35
inst35: // rune "09AFaf" -> 37
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst37
			}
			goto inst35_fail
		} else if false {
			i += sz
			goto inst37
		}
	}
	goto inst35_fail
	goto unreachable
	goto inst35_fail
inst35_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 38:
			goto inst38_alt
		}
	}
	goto fail

	goto unreachable
	goto inst37
inst37: // alt -> 36, 40
	{
		idx := i*319 + 14
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 37, 0})
	goto inst36
inst37_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst40
	}

	goto unreachable
	goto inst40
inst40: // string ":" -> 41
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst41
		}
	}
	goto inst40_fail
	goto unreachable
	goto inst40_fail
inst40_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 39:
			goto inst39_alt
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst36
inst36: // rune "09AFaf" -> 40
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst40
			}
			goto inst36_fail
		} else if false {
			i += sz
			goto inst40
		}
	}
	goto inst36_fail
	goto unreachable
	goto inst36_fail
inst36_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 37:
			goto inst37_alt
		}
	}
	goto fail

	goto unreachable
	goto inst41
inst41: // rune "09AFaf" -> 47
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst47
			}
			goto inst41_fail
		} else if false {
			i += sz
			goto inst47
		}
	}
	goto inst41_fail
	goto unreachable
	goto inst41_fail
inst41_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 39:
			goto inst39_alt
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst47
inst47: // alt -> 42, 48
	{
		idx := i*319 + 15
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 47, 0})
	goto inst42
inst47_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst48
	}

	goto unreachable
	goto inst42
inst42: // rune "09AFaf" -> 46
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst46
			}
			goto inst42_fail
		} else if false {
			i += sz
			goto inst46
		}
	}
	goto inst42_fail
	goto unreachable
	goto inst42_fail
inst42_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 47:
			goto inst47_alt
		}
	}
	goto fail

	goto unreachable
	goto inst46
inst46: // alt -> 43, 48
	{
		idx := i*319 + 16
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 46, 0})
	goto inst43
inst46_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst48
	}

	goto unreachable
	goto inst43
inst43: // rune "09AFaf" -> 45
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst45
			}
			goto inst43_fail
		} else if false {
			i += sz
			goto inst45
		}
	}
	goto inst43_fail
	goto unreachable
	goto inst43_fail
inst43_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 46:
			goto inst46_alt
		}
	}
	goto fail

	goto unreachable
	goto inst45
inst45: // alt -> 44, 48
	{
		idx := i*319 + 17
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 45, 0})
	goto inst44
inst45_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst48
	}

	goto unreachable
	goto inst48
inst48: // string ":" -> 49
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst49
		}
	}
	goto inst48_fail
	goto unreachable
	goto inst48_fail
inst48_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 39:
			goto inst39_alt
		case 45:
			goto inst45_alt
		case 46:
			goto inst46_alt
		case 47:
			goto inst47_alt
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst44
inst44: // rune "09AFaf" -> 48
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst48
			}
			goto inst44_fail
		} else if false {
			i += sz
			goto inst48
		}
	}
	goto inst44_fail
	goto unreachable
	goto inst44_fail
inst44_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 45:
			goto inst45_alt
		}
	}
	goto fail

	goto unreachable
	goto inst49
inst49: // rune "09AFaf" -> 55
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst55
			}
			goto inst49_fail
		} else if false {
			i += sz
			goto inst55
		}
	}
	goto inst49_fail
	goto unreachable
	goto inst49_fail
inst49_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 39:
			goto inst39_alt
		case 45:
			goto inst45_alt
		case 46:
			goto inst46_alt
		case 47:
			goto inst47_alt
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst55
inst55: // alt -> 50, 56
	{
		idx := i*319 + 18
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 55, 0})
	goto inst50
inst55_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst56
	}

	goto unreachable
	goto inst50
inst50: // rune "09AFaf" -> 54
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst54
			}
			goto inst50_fail
		} else if false {
			i += sz
			goto inst54
		}
	}
	goto inst50_fail
	goto unreachable
	goto inst50_fail
inst50_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 55:
			goto inst55_alt
		}
	}
	goto fail

	goto unreachable
	goto inst54
inst54: // alt -> 51, 56
	{
		idx := i*319 + 19
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 54, 0})
	goto inst51
inst54_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst56
	}

	goto unreachable
	goto inst51
inst51: // rune "09AFaf" -> 53
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst53
			}
			goto inst51_fail
		} else if false {
			i += sz
			goto inst53
		}
	}
	goto inst51_fail
	goto unreachable
	goto inst51_fail
inst51_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 54:
			goto inst54_alt
		}
	}
	goto fail

	goto unreachable
	goto inst53
inst53: // alt -> 52, 56
	{
		idx := i*319 + 20
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 53, 0})
	goto inst52
inst53_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst56
	}

	goto unreachable
	goto inst56
inst56: // string ":" -> 57
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst57
		}
	}
	goto inst56_fail
	goto unreachable
	goto inst56_fail
inst56_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 39:
			goto inst39_alt
		case 45:
			goto inst45_alt
		case 46:
			goto inst46_alt
		case 47:
			goto inst47_alt
		case 53:
			goto inst53_alt
		case 54:
			goto inst54_alt
		case 55:
			goto inst55_alt
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst52
inst52: // rune "09AFaf" -> 56
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst56
			}
			goto inst52_fail
		} else if false {
			i += sz
			goto inst56
		}
	}
	goto inst52_fail
	goto unreachable
	goto inst52_fail
inst52_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 53:
			goto inst53_alt
		}
	}
	goto fail

	goto unreachable
	goto inst57
inst57: // rune "09AFaf" -> 63
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst63
			}
			goto inst57_fail
		} else if false {
			i += sz
			goto inst63
		}
	}
	goto inst57_fail
	goto unreachable
	goto inst57_fail
inst57_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 39:
			goto inst39_alt
		case 45:
			goto inst45_alt
		case 46:
			goto inst46_alt
		case 47:
			goto inst47_alt
		case 53:
			goto inst53_alt
		case 54:
			goto inst54_alt
		case 55:
			goto inst55_alt
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst63
inst63: // alt -> 58, 772
	{
		idx := i*319 + 21
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 63, 0})
	goto inst58
inst63_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst58
inst58: // rune "09AFaf" -> 62
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst62
			}
			goto inst58_fail
		} else if false {
			i += sz
			goto inst62
		}
	}
	goto inst58_fail
	goto unreachable
	goto inst58_fail
inst58_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 63:
			goto inst63_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1
inst1: // rune "09AFaf" -> 7
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst7
			}
			goto inst1_fail
		} else if false {
			i += sz
			goto inst7
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst62
inst62: // alt -> 59, 772
	{
		idx := i*319 + 22
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 62, 0})
	goto inst59
inst62_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst59
inst59: // rune "09AFaf" -> 61
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst61
			}
			goto inst59_fail
		} else if false {
			i += sz
			goto inst61
		}
	}
	goto inst59_fail
	goto unreachable
	goto inst59_fail
inst59_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 62:
			goto inst62_alt
		}
	}
	goto fail

	goto unreachable
	goto inst66
inst66: // rune "09AFaf" -> 68
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst68
			}
			goto inst66_fail
		} else if false {
			i += sz
			goto inst68
		}
	}
	goto inst66_fail
	goto unreachable
	goto inst66_fail
inst66_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 69:
			goto inst69_alt
		}
	}
	goto fail

	goto unreachable
	goto inst68
inst68: // alt -> 67, 71
	{
		idx := i*319 + 23
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 68, 0})
	goto inst67
inst68_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst71
	}

	goto unreachable
	goto inst67
inst67: // rune "09AFaf" -> 71
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst71
			}
			goto inst67_fail
		} else if false {
			i += sz
			goto inst71
		}
	}
	goto inst67_fail
	goto unreachable
	goto inst67_fail
inst67_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 68:
			goto inst68_alt
		}
	}
	goto fail

	goto unreachable
	goto inst71
inst71: // string ":" -> 125
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst125
		}
	}
	goto inst71_fail
	goto unreachable
	goto inst71_fail
inst71_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 68:
			goto inst68_alt
		case 69:
			goto inst69_alt
		case 70:
			goto inst70_alt
		case 189:
			goto inst189_alt
		}
	}
	goto fail

	goto unreachable
	goto inst69
inst69: // alt -> 66, 71
	{
		idx := i*319 + 24
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 69, 0})
	goto inst66
inst69_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst71
	}

	goto unreachable
	goto inst65
inst65: // rune "09AFaf" -> 69
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst69
			}
			goto inst65_fail
		} else if false {
			i += sz
			goto inst69
		}
	}
	goto inst65_fail
	goto unreachable
	goto inst65_fail
inst65_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		}
	}
	goto fail

	goto unreachable
	goto inst70
inst70: // alt -> 65, 71
	{
		idx := i*319 + 25
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 70, 0})
	goto inst65
inst70_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst71
	}

	goto unreachable
	goto inst64
inst64: // rune "09AFaf" -> 70
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst70
			}
			goto inst64_fail
		} else if false {
			i += sz
			goto inst70
		}
	}
	goto inst64_fail
	goto unreachable
	goto inst64_fail
inst64_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 189:
			goto inst189_alt
		}
	}
	goto fail

	goto unreachable
	goto inst127
inst127: // alt -> 1, 64
	{
		idx := i*319 + 26
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 127, 0})
	goto inst1
inst127_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst64
	}

	goto unreachable
	goto inst74
inst74: // rune "09AFaf" -> 76
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst76
			}
			goto inst74_fail
		} else if false {
			i += sz
			goto inst76
		}
	}
	goto inst74_fail
	goto unreachable
	goto inst74_fail
inst74_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 77:
			goto inst77_alt
		}
	}
	goto fail

	goto unreachable
	goto inst76
inst76: // alt -> 75, 79
	{
		idx := i*319 + 27
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 76, 0})
	goto inst75
inst76_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst79
	}

	goto unreachable
	goto inst75
inst75: // rune "09AFaf" -> 79
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst79
			}
			goto inst75_fail
		} else if false {
			i += sz
			goto inst79
		}
	}
	goto inst75_fail
	goto unreachable
	goto inst75_fail
inst75_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 76:
			goto inst76_alt
		}
	}
	goto fail

	goto unreachable
	goto inst77
inst77: // alt -> 74, 79
	{
		idx := i*319 + 28
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 77, 0})
	goto inst74
inst77_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst79
	}

	goto unreachable
	goto inst79
inst79: // string ":" -> 124
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst124
		}
	}
	goto inst79_fail
	goto unreachable
	goto inst79_fail
inst79_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 76:
			goto inst76_alt
		case 77:
			goto inst77_alt
		case 78:
			goto inst78_alt
		case 125:
			goto inst125_alt
		}
	}
	goto fail

	goto unreachable
	goto inst73
inst73: // rune "09AFaf" -> 77
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst77
			}
			goto inst73_fail
		} else if false {
			i += sz
			goto inst77
		}
	}
	goto inst73_fail
	goto unreachable
	goto inst73_fail
inst73_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 78:
			goto inst78_alt
		}
	}
	goto fail

	goto unreachable
	goto inst78
inst78: // alt -> 73, 79
	{
		idx := i*319 + 29
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 78, 0})
	goto inst73
inst78_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst79
	}

	goto unreachable
	goto inst80
inst80: // rune "09AFaf" -> 86
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst86
			}
			goto inst80_fail
		} else if false {
			i += sz
			goto inst86
		}
	}
	goto inst80_fail
	goto unreachable
	goto inst80_fail
inst80_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 124:
			goto inst124_alt
		}
	}
	goto fail

	goto unreachable
	goto inst86
inst86: // alt -> 81, 87
	{
		idx := i*319 + 30
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 86, 0})
	goto inst81
inst86_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst87
	}

	goto unreachable
	goto inst81
inst81: // rune "09AFaf" -> 85
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst85
			}
			goto inst81_fail
		} else if false {
			i += sz
			goto inst85
		}
	}
	goto inst81_fail
	goto unreachable
	goto inst81_fail
inst81_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 86:
			goto inst86_alt
		}
	}
	goto fail

	goto unreachable
	goto inst85
inst85: // alt -> 82, 87
	{
		idx := i*319 + 31
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 85, 0})
	goto inst82
inst85_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst87
	}

	goto unreachable
	goto inst82
inst82: // rune "09AFaf" -> 84
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst84
			}
			goto inst82_fail
		} else if false {
			i += sz
			goto inst84
		}
	}
	goto inst82_fail
	goto unreachable
	goto inst82_fail
inst82_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 85:
			goto inst85_alt
		}
	}
	goto fail

	goto unreachable
	goto inst84
inst84: // alt -> 83, 87
	{
		idx := i*319 + 32
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 84, 0})
	goto inst83
inst84_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst87
	}

	goto unreachable
	goto inst87
inst87: // string ":" -> 123
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst123
		}
	}
	goto inst87_fail
	goto unreachable
	goto inst87_fail
inst87_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 84:
			goto inst84_alt
		case 85:
			goto inst85_alt
		case 86:
			goto inst86_alt
		case 124:
			goto inst124_alt
		}
	}
	goto fail

	goto unreachable
	goto inst83
inst83: // rune "09AFaf" -> 87
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst87
			}
			goto inst83_fail
		} else if false {
			i += sz
			goto inst87
		}
	}
	goto inst83_fail
	goto unreachable
	goto inst83_fail
inst83_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 84:
			goto inst84_alt
		}
	}
	goto fail

	goto unreachable
	goto inst124
inst124: // alt -> 80, 126
	{
		idx := i*319 + 33
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 124, 0})
	goto inst80
inst124_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst126
	}

	goto unreachable
	goto inst91
inst91: // rune "09AFaf" -> 95
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst95
			}
			goto inst91_fail
		} else if false {
			i += sz
			goto inst95
		}
	}
	goto inst91_fail
	goto unreachable
	goto inst91_fail
inst91_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 92:
			goto inst92_alt
		}
	}
	goto fail

	goto unreachable
	goto inst92
inst92: // alt -> 91, 95
	{
		idx := i*319 + 34
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 92, 0})
	goto inst91
inst92_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst95
	}

	goto unreachable
	goto inst90
inst90: // rune "09AFaf" -> 92
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst92
			}
			goto inst90_fail
		} else if false {
			i += sz
			goto inst92
		}
	}
	goto inst90_fail
	goto unreachable
	goto inst90_fail
inst90_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 93:
			goto inst93_alt
		}
	}
	goto fail

	goto unreachable
	goto inst93
inst93: // alt -> 90, 95
	{
		idx := i*319 + 35
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 93, 0})
	goto inst90
inst93_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst95
	}

	goto unreachable
	goto inst95
inst95: // string ":" -> 122
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst122
		}
	}
	goto inst95_fail
	goto unreachable
	goto inst95_fail
inst95_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 92:
			goto inst92_alt
		case 93:
			goto inst93_alt
		case 94:
			goto inst94_alt
		case 123:
			goto inst123_alt
		}
	}
	goto fail

	goto unreachable
	goto inst89
inst89: // rune "09AFaf" -> 93
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst93
			}
			goto inst89_fail
		} else if false {
			i += sz
			goto inst93
		}
	}
	goto inst89_fail
	goto unreachable
	goto inst89_fail
inst89_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 94:
			goto inst94_alt
		}
	}
	goto fail

	goto unreachable
	goto inst94
inst94: // alt -> 89, 95
	{
		idx := i*319 + 36
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 94, 0})
	goto inst89
inst94_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst95
	}

	goto unreachable
	goto inst98
inst98: // rune "09AFaf" -> 100
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst100
			}
			goto inst98_fail
		} else if false {
			i += sz
			goto inst100
		}
	}
	goto inst98_fail
	goto unreachable
	goto inst98_fail
inst98_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 101:
			goto inst101_alt
		}
	}
	goto fail

	goto unreachable
	goto inst100
inst100: // alt -> 99, 103
	{
		idx := i*319 + 37
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 100, 0})
	goto inst99
inst100_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst103
	}

	goto unreachable
	goto inst99
inst99: // rune "09AFaf" -> 103
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst103
			}
			goto inst99_fail
		} else if false {
			i += sz
			goto inst103
		}
	}
	goto inst99_fail
	goto unreachable
	goto inst99_fail
inst99_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 100:
			goto inst100_alt
		}
	}
	goto fail

	goto unreachable
	goto inst103
inst103: // string ":" -> 121
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst121
		}
	}
	goto inst103_fail
	goto unreachable
	goto inst103_fail
inst103_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 100:
			goto inst100_alt
		case 101:
			goto inst101_alt
		case 102:
			goto inst102_alt
		case 122:
			goto inst122_alt
		}
	}
	goto fail

	goto unreachable
	goto inst101
inst101: // alt -> 98, 103
	{
		idx := i*319 + 38
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 101, 0})
	goto inst98
inst101_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst103
	}

	goto unreachable
	goto inst97
inst97: // rune "09AFaf" -> 101
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst101
			}
			goto inst97_fail
		} else if false {
			i += sz
			goto inst101
		}
	}
	goto inst97_fail
	goto unreachable
	goto inst97_fail
inst97_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 102:
			goto inst102_alt
		}
	}
	goto fail

	goto unreachable
	goto inst102
inst102: // alt -> 97, 103
	{
		idx := i*319 + 39
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 102, 0})
	goto inst97
inst102_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst103
	}

	goto unreachable
	goto inst121
inst121: // alt -> 104, 126
	{
		idx := i*319 + 40
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 121, 0})
	goto inst104
inst121_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst126
	}

	goto unreachable
	goto inst104
inst104: // rune "09AFaf" -> 110
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst110
			}
			goto inst104_fail
		} else if false {
			i += sz
			goto inst110
		}
	}
	goto inst104_fail
	goto unreachable
	goto inst104_fail
inst104_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		}
	}
	goto fail

	goto unreachable
	goto inst110
inst110: // alt -> 105, 111
	{
		idx := i*319 + 41
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 110, 0})
	goto inst105
inst110_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst111
	}

	goto unreachable
	goto inst105
inst105: // rune "09AFaf" -> 109
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst109
			}
			goto inst105_fail
		} else if false {
			i += sz
			goto inst109
		}
	}
	goto inst105_fail
	goto unreachable
	goto inst105_fail
inst105_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 110:
			goto inst110_alt
		}
	}
	goto fail

	goto unreachable
	goto inst72
inst72: // rune "09AFaf" -> 78
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst78
			}
			goto inst72_fail
		} else if false {
			i += sz
			goto inst78
		}
	}
	goto inst72_fail
	goto unreachable
	goto inst72_fail
inst72_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 125:
			goto inst125_alt
		}
	}
	goto fail

	goto unreachable
	goto inst125
inst125: // alt -> 72, 126
	{
		idx := i*319 + 42
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 125, 0})
	goto inst72
inst125_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst126
	}

	goto unreachable
	goto inst109
inst109: // alt -> 106, 111
	{
		idx := i*319 + 43
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 109, 0})
	goto inst106
inst109_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst111
	}

	goto unreachable
	goto inst111
inst111: // string ":" -> 120
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst120
		}
	}
	goto inst111_fail
	goto unreachable
	goto inst111_fail
inst111_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 108:
			goto inst108_alt
		case 109:
			goto inst109_alt
		case 110:
			goto inst110_alt
		case 121:
			goto inst121_alt
		}
	}
	goto fail

	goto unreachable
	goto inst107
inst107: // rune "09AFaf" -> 111
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst111
			}
			goto inst107_fail
		} else if false {
			i += sz
			goto inst111
		}
	}
	goto inst107_fail
	goto unreachable
	goto inst107_fail
inst107_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 108:
			goto inst108_alt
		}
	}
	goto fail

	goto unreachable
	goto inst108
inst108: // alt -> 107, 111
	{
		idx := i*319 + 44
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 108, 0})
	goto inst107
inst108_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst111
	}

	goto unreachable
	goto inst106
inst106: // rune "09AFaf" -> 108
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst108
			}
			goto inst106_fail
		} else if false {
			i += sz
			goto inst108
		}
	}
	goto inst106_fail
	goto unreachable
	goto inst106_fail
inst106_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 109:
			goto inst109_alt
		}
	}
	goto fail

	goto unreachable
	goto inst88
inst88: // rune "09AFaf" -> 94
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst94
			}
			goto inst88_fail
		} else if false {
			i += sz
			goto inst94
		}
	}
	goto inst88_fail
	goto unreachable
	goto inst88_fail
inst88_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 123:
			goto inst123_alt
		}
	}
	goto fail

	goto unreachable
	goto inst123
inst123: // alt -> 88, 126
	{
		idx := i*319 + 45
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 123, 0})
	goto inst88
inst123_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst126
	}

	goto unreachable
	goto inst126
inst126: // string ":" -> 772
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst772
		}
	}
	goto inst126_fail
	goto unreachable
	goto inst126_fail
inst126_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 68:
			goto inst68_alt
		case 69:
			goto inst69_alt
		case 70:
			goto inst70_alt
		case 76:
			goto inst76_alt
		case 77:
			goto inst77_alt
		case 78:
			goto inst78_alt
		case 84:
			goto inst84_alt
		case 85:
			goto inst85_alt
		case 86:
			goto inst86_alt
		case 92:
			goto inst92_alt
		case 93:
			goto inst93_alt
		case 94:
			goto inst94_alt
		case 100:
			goto inst100_alt
		case 101:
			goto inst101_alt
		case 102:
			goto inst102_alt
		case 108:
			goto inst108_alt
		case 109:
			goto inst109_alt
		case 110:
			goto inst110_alt
		case 121:
			goto inst121_alt
		case 122:
			goto inst122_alt
		case 123:
			goto inst123_alt
		case 124:
			goto inst124_alt
		case 125:
			goto inst125_alt
		case 189:
			goto inst189_alt
		}
	}
	goto fail

	goto unreachable
	goto inst120
inst120: // alt -> 112, 126
	{
		idx := i*319 + 46
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 120, 0})
	goto inst112
inst120_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst126
	}

	goto unreachable
	goto inst122
inst122: // alt -> 96, 126
	{
		idx := i*319 + 47
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 122, 0})
	goto inst96
inst122_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst126
	}

	goto unreachable
	goto inst96
inst96: // rune "09AFaf" -> 102
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst102
			}
			goto inst96_fail
		} else if false {
			i += sz
			goto inst102
		}
	}
	goto inst96_fail
	goto unreachable
	goto inst96_fail
inst96_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 122:
			goto inst122_alt
		}
	}
	goto fail

	goto unreachable
	goto inst112
inst112: // rune "09AFaf" -> 118
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst118
			}
			goto inst112_fail
		} else if false {
			i += sz
			goto inst118
		}
	}
	goto inst112_fail
	goto unreachable
	goto inst112_fail
inst112_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 120:
			goto inst120_alt
		}
	}
	goto fail

	goto unreachable
	goto inst118
inst118: // alt -> 113, 119
	{
		idx := i*319 + 48
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 118, 0})
	goto inst113
inst118_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst119
	}

	goto unreachable
	goto inst113
inst113: // rune "09AFaf" -> 117
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst117
			}
			goto inst113_fail
		} else if false {
			i += sz
			goto inst117
		}
	}
	goto inst113_fail
	goto unreachable
	goto inst113_fail
inst113_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 118:
			goto inst118_alt
		}
	}
	goto fail

	goto unreachable
	goto inst117
inst117: // alt -> 114, 119
	{
		idx := i*319 + 49
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 117, 0})
	goto inst114
inst117_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst119
	}

	goto unreachable
	goto inst114
inst114: // rune "09AFaf" -> 116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst116
			}
			goto inst114_fail
		} else if false {
			i += sz
			goto inst116
		}
	}
	goto inst114_fail
	goto unreachable
	goto inst114_fail
inst114_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 117:
			goto inst117_alt
		}
	}
	goto fail

	goto unreachable
	goto inst119
inst119: // string "::" -> 772
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "::" {
			i += 2
			goto inst772
		}
	}
	goto inst119_fail
	goto unreachable
	goto inst119_fail
inst119_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 116:
			goto inst116_alt
		case 117:
			goto inst117_alt
		case 118:
			goto inst118_alt
		case 120:
			goto inst120_alt
		}
	}
	goto fail

	goto unreachable
	goto inst116
inst116: // alt -> 115, 119
	{
		idx := i*319 + 50
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 116, 0})
	goto inst115
inst116_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst119
	}

	goto unreachable
	goto inst115
inst115: // rune "09AFaf" -> 119
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst119
			}
			goto inst115_fail
		} else if false {
			i += sz
			goto inst119
		}
	}
	goto inst115_fail
	goto unreachable
	goto inst115_fail
inst115_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 116:
			goto inst116_alt
		}
	}
	goto fail

	goto unreachable
	goto inst130
inst130: // rune "09AFaf" -> 132
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst132
			}
			goto inst130_fail
		} else if false {
			i += sz
			goto inst132
		}
	}
	goto inst130_fail
	goto unreachable
	goto inst130_fail
inst130_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 133:
			goto inst133_alt
		}
	}
	goto fail

	goto unreachable
	goto inst132
inst132: // alt -> 131, 135
	{
		idx := i*319 + 51
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 132, 0})
	goto inst131
inst132_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst135
	}

	goto unreachable
	goto inst131
inst131: // rune "09AFaf" -> 135
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst135
			}
			goto inst131_fail
		} else if false {
			i += sz
			goto inst135
		}
	}
	goto inst131_fail
	goto unreachable
	goto inst131_fail
inst131_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 132:
			goto inst132_alt
		}
	}
	goto fail

	goto unreachable
	goto inst135
inst135: // string ":" -> 180
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst180
		}
	}
	goto inst135_fail
	goto unreachable
	goto inst135_fail
inst135_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 132:
			goto inst132_alt
		case 133:
			goto inst133_alt
		case 134:
			goto inst134_alt
		case 251:
			goto inst251_alt
		}
	}
	goto fail

	goto unreachable
	goto inst133
inst133: // alt -> 130, 135
	{
		idx := i*319 + 52
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 133, 0})
	goto inst130
inst133_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst135
	}

	goto unreachable
	goto inst129
inst129: // rune "09AFaf" -> 133
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst133
			}
			goto inst129_fail
		} else if false {
			i += sz
			goto inst133
		}
	}
	goto inst129_fail
	goto unreachable
	goto inst129_fail
inst129_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 134:
			goto inst134_alt
		}
	}
	goto fail

	goto unreachable
	goto inst134
inst134: // alt -> 129, 135
	{
		idx := i*319 + 53
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 134, 0})
	goto inst129
inst134_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst135
	}

	goto unreachable
	goto inst128
inst128: // rune "09AFaf" -> 134
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst134
			}
			goto inst128_fail
		} else if false {
			i += sz
			goto inst134
		}
	}
	goto inst128_fail
	goto unreachable
	goto inst128_fail
inst128_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 251:
			goto inst251_alt
		}
	}
	goto fail

	goto unreachable
	goto inst189
inst189: // alt -> 127, 128
	{
		idx := i*319 + 54
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 189, 0})
	goto inst127
inst189_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst128
	}

	goto unreachable
	goto inst138
inst138: // rune "09AFaf" -> 140
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst140
			}
			goto inst138_fail
		} else if false {
			i += sz
			goto inst140
		}
	}
	goto inst138_fail
	goto unreachable
	goto inst138_fail
inst138_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 141:
			goto inst141_alt
		}
	}
	goto fail

	goto unreachable
	goto inst141
inst141: // alt -> 138, 143
	{
		idx := i*319 + 55
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 141, 0})
	goto inst138
inst141_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst143
	}

	goto unreachable
	goto inst140
inst140: // alt -> 139, 143
	{
		idx := i*319 + 56
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 140, 0})
	goto inst139
inst140_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst143
	}

	goto unreachable
	goto inst139
inst139: // rune "09AFaf" -> 143
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst143
			}
			goto inst139_fail
		} else if false {
			i += sz
			goto inst143
		}
	}
	goto inst139_fail
	goto unreachable
	goto inst139_fail
inst139_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 140:
			goto inst140_alt
		}
	}
	goto fail

	goto unreachable
	goto inst143
inst143: // string ":" -> 179
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst179
		}
	}
	goto inst143_fail
	goto unreachable
	goto inst143_fail
inst143_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 140:
			goto inst140_alt
		case 141:
			goto inst141_alt
		case 142:
			goto inst142_alt
		case 180:
			goto inst180_alt
		}
	}
	goto fail

	goto unreachable
	goto inst137
inst137: // rune "09AFaf" -> 141
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst141
			}
			goto inst137_fail
		} else if false {
			i += sz
			goto inst141
		}
	}
	goto inst137_fail
	goto unreachable
	goto inst137_fail
inst137_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 142:
			goto inst142_alt
		}
	}
	goto fail

	goto unreachable
	goto inst142
inst142: // alt -> 137, 143
	{
		idx := i*319 + 57
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 142, 0})
	goto inst137
inst142_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst143
	}

	goto unreachable
	goto inst144
inst144: // rune "09AFaf" -> 150
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst150
			}
			goto inst144_fail
		} else if false {
			i += sz
			goto inst150
		}
	}
	goto inst144_fail
	goto unreachable
	goto inst144_fail
inst144_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 179:
			goto inst179_alt
		}
	}
	goto fail

	goto unreachable
	goto inst150
inst150: // alt -> 145, 151
	{
		idx := i*319 + 58
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 150, 0})
	goto inst145
inst150_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst151
	}

	goto unreachable
	goto inst145
inst145: // rune "09AFaf" -> 149
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst149
			}
			goto inst145_fail
		} else if false {
			i += sz
			goto inst149
		}
	}
	goto inst145_fail
	goto unreachable
	goto inst145_fail
inst145_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 150:
			goto inst150_alt
		}
	}
	goto fail

	goto unreachable
	goto inst149
inst149: // alt -> 146, 151
	{
		idx := i*319 + 59
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 149, 0})
	goto inst146
inst149_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst151
	}

	goto unreachable
	goto inst146
inst146: // rune "09AFaf" -> 148
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst148
			}
			goto inst146_fail
		} else if false {
			i += sz
			goto inst148
		}
	}
	goto inst146_fail
	goto unreachable
	goto inst146_fail
inst146_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 149:
			goto inst149_alt
		}
	}
	goto fail

	goto unreachable
	goto inst148
inst148: // alt -> 147, 151
	{
		idx := i*319 + 60
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 148, 0})
	goto inst147
inst148_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst151
	}

	goto unreachable
	goto inst151
inst151: // string ":" -> 178
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst178
		}
	}
	goto inst151_fail
	goto unreachable
	goto inst151_fail
inst151_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 148:
			goto inst148_alt
		case 149:
			goto inst149_alt
		case 150:
			goto inst150_alt
		case 179:
			goto inst179_alt
		}
	}
	goto fail

	goto unreachable
	goto inst147
inst147: // rune "09AFaf" -> 151
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst151
			}
			goto inst147_fail
		} else if false {
			i += sz
			goto inst151
		}
	}
	goto inst147_fail
	goto unreachable
	goto inst147_fail
inst147_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 148:
			goto inst148_alt
		}
	}
	goto fail

	goto unreachable
	goto inst179
inst179: // alt -> 144, 181
	{
		idx := i*319 + 61
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 179, 0})
	goto inst144
inst179_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst181
	}

	goto unreachable
	goto inst155
inst155: // rune "09AFaf" -> 159
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst159
			}
			goto inst155_fail
		} else if false {
			i += sz
			goto inst159
		}
	}
	goto inst155_fail
	goto unreachable
	goto inst155_fail
inst155_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 156:
			goto inst156_alt
		}
	}
	goto fail

	goto unreachable
	goto inst156
inst156: // alt -> 155, 159
	{
		idx := i*319 + 62
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 156, 0})
	goto inst155
inst156_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst159
	}

	goto unreachable
	goto inst154
inst154: // rune "09AFaf" -> 156
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst156
			}
			goto inst154_fail
		} else if false {
			i += sz
			goto inst156
		}
	}
	goto inst154_fail
	goto unreachable
	goto inst154_fail
inst154_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 157:
			goto inst157_alt
		}
	}
	goto fail

	goto unreachable
	goto inst157
inst157: // alt -> 154, 159
	{
		idx := i*319 + 63
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 157, 0})
	goto inst154
inst157_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst159
	}

	goto unreachable
	goto inst159
inst159: // string ":" -> 177
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst177
		}
	}
	goto inst159_fail
	goto unreachable
	goto inst159_fail
inst159_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 156:
			goto inst156_alt
		case 157:
			goto inst157_alt
		case 158:
			goto inst158_alt
		case 178:
			goto inst178_alt
		}
	}
	goto fail

	goto unreachable
	goto inst153
inst153: // rune "09AFaf" -> 157
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst157
			}
			goto inst153_fail
		} else if false {
			i += sz
			goto inst157
		}
	}
	goto inst153_fail
	goto unreachable
	goto inst153_fail
inst153_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 158:
			goto inst158_alt
		}
	}
	goto fail

	goto unreachable
	goto inst158
inst158: // alt -> 153, 159
	{
		idx := i*319 + 64
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 158, 0})
	goto inst153
inst158_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst159
	}

	goto unreachable
	goto inst136
inst136: // rune "09AFaf" -> 142
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst142
			}
			goto inst136_fail
		} else if false {
			i += sz
			goto inst142
		}
	}
	goto inst136_fail
	goto unreachable
	goto inst136_fail
inst136_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 180:
			goto inst180_alt
		}
	}
	goto fail

	goto unreachable
	goto inst180
inst180: // alt -> 136, 181
	{
		idx := i*319 + 65
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 180, 0})
	goto inst136
inst180_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst181
	}

	goto unreachable
	goto inst161
inst161: // rune "09AFaf" -> 165
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst165
			}
			goto inst161_fail
		} else if false {
			i += sz
			goto inst165
		}
	}
	goto inst161_fail
	goto unreachable
	goto inst161_fail
inst161_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 166:
			goto inst166_alt
		}
	}
	goto fail

	goto unreachable
	goto inst165
inst165: // alt -> 162, 167
	{
		idx := i*319 + 66
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 165, 0})
	goto inst162
inst165_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst167
	}

	goto unreachable
	goto inst162
inst162: // rune "09AFaf" -> 164
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst164
			}
			goto inst162_fail
		} else if false {
			i += sz
			goto inst164
		}
	}
	goto inst162_fail
	goto unreachable
	goto inst162_fail
inst162_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 165:
			goto inst165_alt
		}
	}
	goto fail

	goto unreachable
	goto inst164
inst164: // alt -> 163, 167
	{
		idx := i*319 + 67
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 164, 0})
	goto inst163
inst164_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst167
	}

	goto unreachable
	goto inst163
inst163: // rune "09AFaf" -> 167
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst167
			}
			goto inst163_fail
		} else if false {
			i += sz
			goto inst167
		}
	}
	goto inst163_fail
	goto unreachable
	goto inst163_fail
inst163_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 164:
			goto inst164_alt
		}
	}
	goto fail

	goto unreachable
	goto inst167
inst167: // string ":" -> 176
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst176
		}
	}
	goto inst167_fail
	goto unreachable
	goto inst167_fail
inst167_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 164:
			goto inst164_alt
		case 165:
			goto inst165_alt
		case 166:
			goto inst166_alt
		case 177:
			goto inst177_alt
		}
	}
	goto fail

	goto unreachable
	goto inst166
inst166: // alt -> 161, 167
	{
		idx := i*319 + 68
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 166, 0})
	goto inst161
inst166_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst167
	}

	goto unreachable
	goto inst160
inst160: // rune "09AFaf" -> 166
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst166
			}
			goto inst160_fail
		} else if false {
			i += sz
			goto inst166
		}
	}
	goto inst160_fail
	goto unreachable
	goto inst160_fail
inst160_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 177:
			goto inst177_alt
		}
	}
	goto fail

	goto unreachable
	goto inst177
inst177: // alt -> 160, 181
	{
		idx := i*319 + 69
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 177, 0})
	goto inst160
inst177_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst181
	}

	goto unreachable
	goto inst181
inst181: // string ":" -> 182
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst182
		}
	}
	goto inst181_fail
	goto unreachable
	goto inst181_fail
inst181_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 132:
			goto inst132_alt
		case 133:
			goto inst133_alt
		case 134:
			goto inst134_alt
		case 140:
			goto inst140_alt
		case 141:
			goto inst141_alt
		case 142:
			goto inst142_alt
		case 148:
			goto inst148_alt
		case 149:
			goto inst149_alt
		case 150:
			goto inst150_alt
		case 156:
			goto inst156_alt
		case 157:
			goto inst157_alt
		case 158:
			goto inst158_alt
		case 164:
			goto inst164_alt
		case 165:
			goto inst165_alt
		case 166:
			goto inst166_alt
		case 177:
			goto inst177_alt
		case 178:
			goto inst178_alt
		case 179:
			goto inst179_alt
		case 180:
			goto inst180_alt
		case 251:
			goto inst251_alt
		}
	}
	goto fail

	goto unreachable
	goto inst178
inst178: // alt -> 152, 181
	{
		idx := i*319 + 70
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 178, 0})
	goto inst152
inst178_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst181
	}

	goto unreachable
	goto inst152
inst152: // rune "09AFaf" -> 158
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst158
			}
			goto inst152_fail
		} else if false {
			i += sz
			goto inst158
		}
	}
	goto inst152_fail
	goto unreachable
	goto inst152_fail
inst152_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		}
	}
	goto fail

	goto unreachable
	goto inst176
inst176: // alt -> 168, 181
	{
		idx := i*319 + 71
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 176, 0})
	goto inst168
inst176_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst181
	}

	goto unreachable
	goto inst168
inst168: // rune "09AFaf" -> 174
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst174
			}
			goto inst168_fail
		} else if false {
			i += sz
			goto inst174
		}
	}
	goto inst168_fail
	goto unreachable
	goto inst168_fail
inst168_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 176:
			goto inst176_alt
		}
	}
	goto fail

	goto unreachable
	goto inst174
inst174: // alt -> 169, 175
	{
		idx := i*319 + 72
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 174, 0})
	goto inst169
inst174_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst175
	}

	goto unreachable
	goto inst182
inst182: // rune "09AFaf" -> 188
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst188
			}
			goto inst182_fail
		} else if false {
			i += sz
			goto inst188
		}
	}
	goto inst182_fail
	goto unreachable
	goto inst182_fail
inst182_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 132:
			goto inst132_alt
		case 133:
			goto inst133_alt
		case 134:
			goto inst134_alt
		case 140:
			goto inst140_alt
		case 141:
			goto inst141_alt
		case 142:
			goto inst142_alt
		case 148:
			goto inst148_alt
		case 149:
			goto inst149_alt
		case 150:
			goto inst150_alt
		case 156:
			goto inst156_alt
		case 157:
			goto inst157_alt
		case 158:
			goto inst158_alt
		case 164:
			goto inst164_alt
		case 165:
			goto inst165_alt
		case 166:
			goto inst166_alt
		case 172:
			goto inst172_alt
		case 173:
			goto inst173_alt
		case 174:
			goto inst174_alt
		case 176:
			goto inst176_alt
		case 177:
			goto inst177_alt
		case 178:
			goto inst178_alt
		case 179:
			goto inst179_alt
		case 180:
			goto inst180_alt
		case 251:
			goto inst251_alt
		}
	}
	goto fail

	goto unreachable
	goto inst175
inst175: // string "::" -> 182
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "::" {
			i += 2
			goto inst182
		}
	}
	goto inst175_fail
	goto unreachable
	goto inst175_fail
inst175_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 172:
			goto inst172_alt
		case 173:
			goto inst173_alt
		case 174:
			goto inst174_alt
		case 176:
			goto inst176_alt
		}
	}
	goto fail

	goto unreachable
	goto inst171
inst171: // rune "09AFaf" -> 175
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst175
			}
			goto inst171_fail
		} else if false {
			i += sz
			goto inst175
		}
	}
	goto inst171_fail
	goto unreachable
	goto inst171_fail
inst171_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 172:
			goto inst172_alt
		}
	}
	goto fail

	goto unreachable
	goto inst172
inst172: // alt -> 171, 175
	{
		idx := i*319 + 73
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 172, 0})
	goto inst171
inst172_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst175
	}

	goto unreachable
	goto inst170
inst170: // rune "09AFaf" -> 172
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst172
			}
			goto inst170_fail
		} else if false {
			i += sz
			goto inst172
		}
	}
	goto inst170_fail
	goto unreachable
	goto inst170_fail
inst170_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 173:
			goto inst173_alt
		}
	}
	goto fail

	goto unreachable
	goto inst173
inst173: // alt -> 170, 175
	{
		idx := i*319 + 74
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 173, 0})
	goto inst170
inst173_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst175
	}

	goto unreachable
	goto inst169
inst169: // rune "09AFaf" -> 173
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst173
			}
			goto inst169_fail
		} else if false {
			i += sz
			goto inst173
		}
	}
	goto inst169_fail
	goto unreachable
	goto inst169_fail
inst169_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 174:
			goto inst174_alt
		}
	}
	goto fail

	goto unreachable
	goto inst251
inst251: // alt -> 189, 190
	{
		idx := i*319 + 75
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 251, 0})
	goto inst189
inst251_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst190
	}

	goto unreachable
	goto inst190
inst190: // rune "09AFaf" -> 196
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst196
			}
			goto inst190_fail
		} else if false {
			i += sz
			goto inst196
		}
	}
	goto inst190_fail
	goto unreachable
	goto inst190_fail
inst190_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 313:
			goto inst313_alt
		}
	}
	goto fail

	goto unreachable
	goto inst188
inst188: // alt -> 183, 772
	{
		idx := i*319 + 76
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 188, 0})
	goto inst183
inst188_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst183
inst183: // rune "09AFaf" -> 187
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst187
			}
			goto inst183_fail
		} else if false {
			i += sz
			goto inst187
		}
	}
	goto inst183_fail
	goto unreachable
	goto inst183_fail
inst183_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 188:
			goto inst188_alt
		}
	}
	goto fail

	goto unreachable
	goto inst196
inst196: // alt -> 191, 197
	{
		idx := i*319 + 77
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 196, 0})
	goto inst191
inst196_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst197
	}

	goto unreachable
	goto inst191
inst191: // rune "09AFaf" -> 195
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst195
			}
			goto inst191_fail
		} else if false {
			i += sz
			goto inst195
		}
	}
	goto inst191_fail
	goto unreachable
	goto inst191_fail
inst191_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 196:
			goto inst196_alt
		}
	}
	goto fail

	goto unreachable
	goto inst195
inst195: // alt -> 192, 197
	{
		idx := i*319 + 78
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 195, 0})
	goto inst192
inst195_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst197
	}

	goto unreachable
	goto inst192
inst192: // rune "09AFaf" -> 194
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst194
			}
			goto inst192_fail
		} else if false {
			i += sz
			goto inst194
		}
	}
	goto inst192_fail
	goto unreachable
	goto inst192_fail
inst192_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 195:
			goto inst195_alt
		}
	}
	goto fail

	goto unreachable
	goto inst197
inst197: // string ":" -> 233
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst233
		}
	}
	goto inst197_fail
	goto unreachable
	goto inst197_fail
inst197_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 194:
			goto inst194_alt
		case 195:
			goto inst195_alt
		case 196:
			goto inst196_alt
		case 313:
			goto inst313_alt
		}
	}
	goto fail

	goto unreachable
	goto inst194
inst194: // alt -> 193, 197
	{
		idx := i*319 + 79
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 194, 0})
	goto inst193
inst194_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst197
	}

	goto unreachable
	goto inst193
inst193: // rune "09AFaf" -> 197
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst197
			}
			goto inst193_fail
		} else if false {
			i += sz
			goto inst197
		}
	}
	goto inst193_fail
	goto unreachable
	goto inst193_fail
inst193_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 194:
			goto inst194_alt
		}
	}
	goto fail

	goto unreachable
	goto inst233
inst233: // alt -> 198, 234
	{
		idx := i*319 + 80
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 233, 0})
	goto inst198
inst233_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst234
	}

	goto unreachable
	goto inst198
inst198: // rune "09AFaf" -> 204
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst204
			}
			goto inst198_fail
		} else if false {
			i += sz
			goto inst204
		}
	}
	goto inst198_fail
	goto unreachable
	goto inst198_fail
inst198_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 233:
			goto inst233_alt
		}
	}
	goto fail

	goto unreachable
	goto inst204
inst204: // alt -> 199, 205
	{
		idx := i*319 + 81
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 204, 0})
	goto inst199
inst204_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst205
	}

	goto unreachable
	goto inst199
inst199: // rune "09AFaf" -> 203
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst203
			}
			goto inst199_fail
		} else if false {
			i += sz
			goto inst203
		}
	}
	goto inst199_fail
	goto unreachable
	goto inst199_fail
inst199_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 204:
			goto inst204_alt
		}
	}
	goto fail

	goto unreachable
	goto inst203
inst203: // alt -> 200, 205
	{
		idx := i*319 + 82
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 203, 0})
	goto inst200
inst203_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst205
	}

	goto unreachable
	goto inst200
inst200: // rune "09AFaf" -> 202
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst202
			}
			goto inst200_fail
		} else if false {
			i += sz
			goto inst202
		}
	}
	goto inst200_fail
	goto unreachable
	goto inst200_fail
inst200_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 203:
			goto inst203_alt
		}
	}
	goto fail

	goto unreachable
	goto inst205
inst205: // string ":" -> 232
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst232
		}
	}
	goto inst205_fail
	goto unreachable
	goto inst205_fail
inst205_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 202:
			goto inst202_alt
		case 203:
			goto inst203_alt
		case 204:
			goto inst204_alt
		case 233:
			goto inst233_alt
		}
	}
	goto fail

	goto unreachable
	goto inst202
inst202: // alt -> 201, 205
	{
		idx := i*319 + 83
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 202, 0})
	goto inst201
inst202_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst205
	}

	goto unreachable
	goto inst201
inst201: // rune "09AFaf" -> 205
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst205
			}
			goto inst201_fail
		} else if false {
			i += sz
			goto inst205
		}
	}
	goto inst201_fail
	goto unreachable
	goto inst201_fail
inst201_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 202:
			goto inst202_alt
		}
	}
	goto fail

	goto unreachable
	goto inst209
inst209: // rune "09AFaf" -> 213
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst213
			}
			goto inst209_fail
		} else if false {
			i += sz
			goto inst213
		}
	}
	goto inst209_fail
	goto unreachable
	goto inst209_fail
inst209_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 210:
			goto inst210_alt
		}
	}
	goto fail

	goto unreachable
	goto inst210
inst210: // alt -> 209, 213
	{
		idx := i*319 + 84
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 210, 0})
	goto inst209
inst210_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst213
	}

	goto unreachable
	goto inst208
inst208: // rune "09AFaf" -> 210
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst210
			}
			goto inst208_fail
		} else if false {
			i += sz
			goto inst210
		}
	}
	goto inst208_fail
	goto unreachable
	goto inst208_fail
inst208_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 211:
			goto inst211_alt
		}
	}
	goto fail

	goto unreachable
	goto inst213
inst213: // string ":" -> 231
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst231
		}
	}
	goto inst213_fail
	goto unreachable
	goto inst213_fail
inst213_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 210:
			goto inst210_alt
		case 211:
			goto inst211_alt
		case 212:
			goto inst212_alt
		case 232:
			goto inst232_alt
		}
	}
	goto fail

	goto unreachable
	goto inst211
inst211: // alt -> 208, 213
	{
		idx := i*319 + 85
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 211, 0})
	goto inst208
inst211_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst213
	}

	goto unreachable
	goto inst207
inst207: // rune "09AFaf" -> 211
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst211
			}
			goto inst207_fail
		} else if false {
			i += sz
			goto inst211
		}
	}
	goto inst207_fail
	goto unreachable
	goto inst207_fail
inst207_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 212:
			goto inst212_alt
		}
	}
	goto fail

	goto unreachable
	goto inst212
inst212: // alt -> 207, 213
	{
		idx := i*319 + 86
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 212, 0})
	goto inst207
inst212_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst213
	}

	goto unreachable
	goto inst206
inst206: // rune "09AFaf" -> 212
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst212
			}
			goto inst206_fail
		} else if false {
			i += sz
			goto inst212
		}
	}
	goto inst206_fail
	goto unreachable
	goto inst206_fail
inst206_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 232:
			goto inst232_alt
		}
	}
	goto fail

	goto unreachable
	goto inst232
inst232: // alt -> 206, 234
	{
		idx := i*319 + 87
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 232, 0})
	goto inst206
inst232_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst234
	}

	goto unreachable
	goto inst217
inst217: // rune "09AFaf" -> 221
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst221
			}
			goto inst217_fail
		} else if false {
			i += sz
			goto inst221
		}
	}
	goto inst217_fail
	goto unreachable
	goto inst217_fail
inst217_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 218:
			goto inst218_alt
		}
	}
	goto fail

	goto unreachable
	goto inst218
inst218: // alt -> 217, 221
	{
		idx := i*319 + 88
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 218, 0})
	goto inst217
inst218_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst221
	}

	goto unreachable
	goto inst216
inst216: // rune "09AFaf" -> 218
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst218
			}
			goto inst216_fail
		} else if false {
			i += sz
			goto inst218
		}
	}
	goto inst216_fail
	goto unreachable
	goto inst216_fail
inst216_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 219:
			goto inst219_alt
		}
	}
	goto fail

	goto unreachable
	goto inst219
inst219: // alt -> 216, 221
	{
		idx := i*319 + 89
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 219, 0})
	goto inst216
inst219_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst221
	}

	goto unreachable
	goto inst221
inst221: // string ":" -> 230
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst230
		}
	}
	goto inst221_fail
	goto unreachable
	goto inst221_fail
inst221_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 218:
			goto inst218_alt
		case 219:
			goto inst219_alt
		case 220:
			goto inst220_alt
		case 231:
			goto inst231_alt
		}
	}
	goto fail

	goto unreachable
	goto inst231
inst231: // alt -> 214, 234
	{
		idx := i*319 + 90
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 231, 0})
	goto inst214
inst231_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst234
	}

	goto unreachable
	goto inst234
inst234: // string ":" -> 235
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst235
		}
	}
	goto inst234_fail
	goto unreachable
	goto inst234_fail
inst234_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 194:
			goto inst194_alt
		case 195:
			goto inst195_alt
		case 196:
			goto inst196_alt
		case 202:
			goto inst202_alt
		case 203:
			goto inst203_alt
		case 204:
			goto inst204_alt
		case 210:
			goto inst210_alt
		case 211:
			goto inst211_alt
		case 212:
			goto inst212_alt
		case 218:
			goto inst218_alt
		case 219:
			goto inst219_alt
		case 220:
			goto inst220_alt
		case 231:
			goto inst231_alt
		case 232:
			goto inst232_alt
		case 233:
			goto inst233_alt
		case 313:
			goto inst313_alt
		}
	}
	goto fail

	goto unreachable
	goto inst214
inst214: // rune "09AFaf" -> 220
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst220
			}
			goto inst214_fail
		} else if false {
			i += sz
			goto inst220
		}
	}
	goto inst214_fail
	goto unreachable
	goto inst214_fail
inst214_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 231:
			goto inst231_alt
		}
	}
	goto fail

	goto unreachable
	goto inst220
inst220: // alt -> 215, 221
	{
		idx := i*319 + 91
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 220, 0})
	goto inst215
inst220_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst221
	}

	goto unreachable
	goto inst215
inst215: // rune "09AFaf" -> 219
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst219
			}
			goto inst215_fail
		} else if false {
			i += sz
			goto inst219
		}
	}
	goto inst215_fail
	goto unreachable
	goto inst215_fail
inst215_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 220:
			goto inst220_alt
		}
	}
	goto fail

	goto unreachable
	goto inst230
inst230: // alt -> 222, 234
	{
		idx := i*319 + 92
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 230, 0})
	goto inst222
inst230_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst234
	}

	goto unreachable
	goto inst222
inst222: // rune "09AFaf" -> 228
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst228
			}
			goto inst222_fail
		} else if false {
			i += sz
			goto inst228
		}
	}
	goto inst222_fail
	goto unreachable
	goto inst222_fail
inst222_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 230:
			goto inst230_alt
		}
	}
	goto fail

	goto unreachable
	goto inst228
inst228: // alt -> 223, 229
	{
		idx := i*319 + 93
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 228, 0})
	goto inst223
inst228_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst229
	}

	goto unreachable
	goto inst223
inst223: // rune "09AFaf" -> 227
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst227
			}
			goto inst223_fail
		} else if false {
			i += sz
			goto inst227
		}
	}
	goto inst223_fail
	goto unreachable
	goto inst223_fail
inst223_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 228:
			goto inst228_alt
		}
	}
	goto fail

	goto unreachable
	goto inst227
inst227: // alt -> 224, 229
	{
		idx := i*319 + 94
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 227, 0})
	goto inst224
inst227_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst229
	}

	goto unreachable
	goto inst235
inst235: // rune "09AFaf" -> 241
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst241
			}
			goto inst235_fail
		} else if false {
			i += sz
			goto inst241
		}
	}
	goto inst235_fail
	goto unreachable
	goto inst235_fail
inst235_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 194:
			goto inst194_alt
		case 195:
			goto inst195_alt
		case 196:
			goto inst196_alt
		case 202:
			goto inst202_alt
		case 203:
			goto inst203_alt
		case 204:
			goto inst204_alt
		case 210:
			goto inst210_alt
		case 211:
			goto inst211_alt
		case 212:
			goto inst212_alt
		case 218:
			goto inst218_alt
		case 219:
			goto inst219_alt
		case 220:
			goto inst220_alt
		case 226:
			goto inst226_alt
		case 227:
			goto inst227_alt
		case 228:
			goto inst228_alt
		case 230:
			goto inst230_alt
		case 231:
			goto inst231_alt
		case 232:
			goto inst232_alt
		case 233:
			goto inst233_alt
		case 313:
			goto inst313_alt
		}
	}
	goto fail

	goto unreachable
	goto inst229
inst229: // string "::" -> 235
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "::" {
			i += 2
			goto inst235
		}
	}
	goto inst229_fail
	goto unreachable
	goto inst229_fail
inst229_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 226:
			goto inst226_alt
		case 227:
			goto inst227_alt
		case 228:
			goto inst228_alt
		case 230:
			goto inst230_alt
		}
	}
	goto fail

	goto unreachable
	goto inst224
inst224: // rune "09AFaf" -> 226
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst226
			}
			goto inst224_fail
		} else if false {
			i += sz
			goto inst226
		}
	}
	goto inst224_fail
	goto unreachable
	goto inst224_fail
inst224_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 227:
			goto inst227_alt
		}
	}
	goto fail

	goto unreachable
	goto inst226
inst226: // alt -> 225, 229
	{
		idx := i*319 + 95
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 226, 0})
	goto inst225
inst226_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst229
	}

	goto unreachable
	goto inst225
inst225: // rune "09AFaf" -> 229
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst229
			}
			goto inst225_fail
		} else if false {
			i += sz
			goto inst229
		}
	}
	goto inst225_fail
	goto unreachable
	goto inst225_fail
inst225_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 226:
			goto inst226_alt
		}
	}
	goto fail

	goto unreachable
	goto inst241
inst241: // alt -> 236, 250
	{
		idx := i*319 + 96
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 241, 0})
	goto inst236
inst241_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst250
	}

	goto unreachable
	goto inst236
inst236: // rune "09AFaf" -> 240
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst240
			}
			goto inst236_fail
		} else if false {
			i += sz
			goto inst240
		}
	}
	goto inst236_fail
	goto unreachable
	goto inst236_fail
inst236_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 241:
			goto inst241_alt
		}
	}
	goto fail

	goto unreachable
	goto inst240
inst240: // alt -> 237, 250
	{
		idx := i*319 + 97
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 240, 0})
	goto inst237
inst240_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst250
	}

	goto unreachable
	goto inst237
inst237: // rune "09AFaf" -> 239
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst239
			}
			goto inst237_fail
		} else if false {
			i += sz
			goto inst239
		}
	}
	goto inst237_fail
	goto unreachable
	goto inst237_fail
inst237_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 240:
			goto inst240_alt
		}
	}
	goto fail

	goto unreachable
	goto inst239
inst239: // alt -> 238, 250
	{
		idx := i*319 + 98
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 239, 0})
	goto inst238
inst239_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst250
	}

	goto unreachable
	goto inst250
inst250: // alt -> 242, 772
	{
		idx := i*319 + 99
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 250, 0})
	goto inst242
inst250_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst238
inst238: // rune "09AFaf" -> 250
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst250
			}
			goto inst238_fail
		} else if false {
			i += sz
			goto inst250
		}
	}
	goto inst238_fail
	goto unreachable
	goto inst238_fail
inst238_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 239:
			goto inst239_alt
		}
	}
	goto fail

	goto unreachable
	goto inst242
inst242: // string ":" -> 243
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst243
		}
	}
	goto inst242_fail
	goto unreachable
	goto inst242_fail
inst242_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 250:
			goto inst250_alt
		}
	}
	goto fail

	// inst446 unreacheable

	goto unreachable
	goto inst313
inst313: // alt -> 251, 252
	{
		idx := i*319 + 100
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 313, 0})
	goto inst251
inst313_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst252
	}

	goto unreachable
	goto inst252
inst252: // rune "09AFaf" -> 258
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst258
			}
			goto inst252_fail
		} else if false {
			i += sz
			goto inst258
		}
	}
	goto inst252_fail
	goto unreachable
	goto inst252_fail
inst252_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 375:
			goto inst375_alt
		}
	}
	goto fail

	goto unreachable
	goto inst243
inst243: // rune "09AFaf" -> 249
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst249
			}
			goto inst243_fail
		} else if false {
			i += sz
			goto inst249
		}
	}
	goto inst243_fail
	goto unreachable
	goto inst243_fail
inst243_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 250:
			goto inst250_alt
		}
	}
	goto fail

	goto unreachable
	goto inst187
inst187: // alt -> 184, 772
	{
		idx := i*319 + 101
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 187, 0})
	goto inst184
inst187_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst184
inst184: // rune "09AFaf" -> 186
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst186
			}
			goto inst184_fail
		} else if false {
			i += sz
			goto inst186
		}
	}
	goto inst184_fail
	goto unreachable
	goto inst184_fail
inst184_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 187:
			goto inst187_alt
		}
	}
	goto fail

	goto unreachable
	goto inst258
inst258: // alt -> 253, 259
	{
		idx := i*319 + 102
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 258, 0})
	goto inst253
inst258_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst259
	}

	goto unreachable
	goto inst253
inst253: // rune "09AFaf" -> 257
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst257
			}
			goto inst253_fail
		} else if false {
			i += sz
			goto inst257
		}
	}
	goto inst253_fail
	goto unreachable
	goto inst253_fail
inst253_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 258:
			goto inst258_alt
		}
	}
	goto fail

	goto unreachable
	goto inst257
inst257: // alt -> 254, 259
	{
		idx := i*319 + 103
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 257, 0})
	goto inst254
inst257_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst259
	}

	goto unreachable
	goto inst254
inst254: // rune "09AFaf" -> 256
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst256
			}
			goto inst254_fail
		} else if false {
			i += sz
			goto inst256
		}
	}
	goto inst254_fail
	goto unreachable
	goto inst254_fail
inst254_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 257:
			goto inst257_alt
		}
	}
	goto fail

	goto unreachable
	goto inst249
inst249: // alt -> 244, 772
	{
		idx := i*319 + 104
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 249, 0})
	goto inst244
inst249_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst244
inst244: // rune "09AFaf" -> 248
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst248
			}
			goto inst244_fail
		} else if false {
			i += sz
			goto inst248
		}
	}
	goto inst244_fail
	goto unreachable
	goto inst244_fail
inst244_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 249:
			goto inst249_alt
		}
	}
	goto fail

	goto unreachable
	goto inst259
inst259: // string ":" -> 286
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst286
		}
	}
	goto inst259_fail
	goto unreachable
	goto inst259_fail
inst259_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 256:
			goto inst256_alt
		case 257:
			goto inst257_alt
		case 258:
			goto inst258_alt
		case 375:
			goto inst375_alt
		}
	}
	goto fail

	goto unreachable
	goto inst256
inst256: // alt -> 255, 259
	{
		idx := i*319 + 105
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 256, 0})
	goto inst255
inst256_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst259
	}

	goto unreachable
	goto inst255
inst255: // rune "09AFaf" -> 259
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst259
			}
			goto inst255_fail
		} else if false {
			i += sz
			goto inst259
		}
	}
	goto inst255_fail
	goto unreachable
	goto inst255_fail
inst255_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 256:
			goto inst256_alt
		}
	}
	goto fail

	goto unreachable
	goto inst248
inst248: // alt -> 245, 772
	{
		idx := i*319 + 106
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 248, 0})
	goto inst245
inst248_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst263
inst263: // rune "09AFaf" -> 267
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst267
			}
			goto inst263_fail
		} else if false {
			i += sz
			goto inst267
		}
	}
	goto inst263_fail
	goto unreachable
	goto inst263_fail
inst263_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 264:
			goto inst264_alt
		}
	}
	goto fail

	goto unreachable
	goto inst264
inst264: // alt -> 263, 267
	{
		idx := i*319 + 107
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 264, 0})
	goto inst263
inst264_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst267
	}

	goto unreachable
	goto inst262
inst262: // rune "09AFaf" -> 264
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst264
			}
			goto inst262_fail
		} else if false {
			i += sz
			goto inst264
		}
	}
	goto inst262_fail
	goto unreachable
	goto inst262_fail
inst262_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 265:
			goto inst265_alt
		}
	}
	goto fail

	goto unreachable
	goto inst267
inst267: // string ":" -> 285
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst285
		}
	}
	goto inst267_fail
	goto unreachable
	goto inst267_fail
inst267_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 264:
			goto inst264_alt
		case 265:
			goto inst265_alt
		case 266:
			goto inst266_alt
		case 286:
			goto inst286_alt
		}
	}
	goto fail

	goto unreachable
	goto inst265
inst265: // alt -> 262, 267
	{
		idx := i*319 + 108
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 265, 0})
	goto inst262
inst265_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst267
	}

	goto unreachable
	goto inst245
inst245: // rune "09AFaf" -> 247
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst247
			}
			goto inst245_fail
		} else if false {
			i += sz
			goto inst247
		}
	}
	goto inst245_fail
	goto unreachable
	goto inst245_fail
inst245_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 248:
			goto inst248_alt
		}
	}
	goto fail

	goto unreachable
	goto inst261
inst261: // rune "09AFaf" -> 265
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst265
			}
			goto inst261_fail
		} else if false {
			i += sz
			goto inst265
		}
	}
	goto inst261_fail
	goto unreachable
	goto inst261_fail
inst261_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 266:
			goto inst266_alt
		}
	}
	goto fail

	goto unreachable
	goto inst266
inst266: // alt -> 261, 267
	{
		idx := i*319 + 109
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 266, 0})
	goto inst261
inst266_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst267
	}

	goto unreachable
	goto inst270
inst270: // rune "09AFaf" -> 272
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst272
			}
			goto inst270_fail
		} else if false {
			i += sz
			goto inst272
		}
	}
	goto inst270_fail
	goto unreachable
	goto inst270_fail
inst270_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 273:
			goto inst273_alt
		}
	}
	goto fail

	goto unreachable
	goto inst272
inst272: // alt -> 271, 275
	{
		idx := i*319 + 110
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 272, 0})
	goto inst271
inst272_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst275
	}

	goto unreachable
	goto inst271
inst271: // rune "09AFaf" -> 275
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst275
			}
			goto inst271_fail
		} else if false {
			i += sz
			goto inst275
		}
	}
	goto inst271_fail
	goto unreachable
	goto inst271_fail
inst271_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 272:
			goto inst272_alt
		}
	}
	goto fail

	goto unreachable
	goto inst273
inst273: // alt -> 270, 275
	{
		idx := i*319 + 111
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 273, 0})
	goto inst270
inst273_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst275
	}

	goto unreachable
	goto inst275
inst275: // string ":" -> 284
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst284
		}
	}
	goto inst275_fail
	goto unreachable
	goto inst275_fail
inst275_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 272:
			goto inst272_alt
		case 273:
			goto inst273_alt
		case 274:
			goto inst274_alt
		case 285:
			goto inst285_alt
		}
	}
	goto fail

	goto unreachable
	goto inst269
inst269: // rune "09AFaf" -> 273
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst273
			}
			goto inst269_fail
		} else if false {
			i += sz
			goto inst273
		}
	}
	goto inst269_fail
	goto unreachable
	goto inst269_fail
inst269_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 274:
			goto inst274_alt
		}
	}
	goto fail

	goto unreachable
	goto inst274
inst274: // alt -> 269, 275
	{
		idx := i*319 + 112
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 274, 0})
	goto inst269
inst274_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst275
	}

	goto unreachable
	goto inst268
inst268: // rune "09AFaf" -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst274
			}
			goto inst268_fail
		} else if false {
			i += sz
			goto inst274
		}
	}
	goto inst268_fail
	goto unreachable
	goto inst268_fail
inst268_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 285:
			goto inst285_alt
		}
	}
	goto fail

	goto unreachable
	goto inst285
inst285: // alt -> 268, 287
	{
		idx := i*319 + 113
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 285, 0})
	goto inst268
inst285_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst287
	}

	goto unreachable
	goto inst260
inst260: // rune "09AFaf" -> 266
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst266
			}
			goto inst260_fail
		} else if false {
			i += sz
			goto inst266
		}
	}
	goto inst260_fail
	goto unreachable
	goto inst260_fail
inst260_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 286:
			goto inst286_alt
		}
	}
	goto fail

	goto unreachable
	goto inst286
inst286: // alt -> 260, 287
	{
		idx := i*319 + 114
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 286, 0})
	goto inst260
inst286_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst287
	}

	goto unreachable
	goto inst287
inst287: // string ":" -> 288
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst288
		}
	}
	goto inst287_fail
	goto unreachable
	goto inst287_fail
inst287_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 256:
			goto inst256_alt
		case 257:
			goto inst257_alt
		case 258:
			goto inst258_alt
		case 264:
			goto inst264_alt
		case 265:
			goto inst265_alt
		case 266:
			goto inst266_alt
		case 272:
			goto inst272_alt
		case 273:
			goto inst273_alt
		case 274:
			goto inst274_alt
		case 285:
			goto inst285_alt
		case 286:
			goto inst286_alt
		case 375:
			goto inst375_alt
		}
	}
	goto fail

	goto unreachable
	goto inst284
inst284: // alt -> 276, 287
	{
		idx := i*319 + 115
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 284, 0})
	goto inst276
inst284_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst287
	}

	goto unreachable
	goto inst276
inst276: // rune "09AFaf" -> 282
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst282
			}
			goto inst276_fail
		} else if false {
			i += sz
			goto inst282
		}
	}
	goto inst276_fail
	goto unreachable
	goto inst276_fail
inst276_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 284:
			goto inst284_alt
		}
	}
	goto fail

	goto unreachable
	goto inst282
inst282: // alt -> 277, 283
	{
		idx := i*319 + 116
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 282, 0})
	goto inst277
inst282_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst283
	}

	goto unreachable
	goto inst288
inst288: // rune "09AFaf" -> 294
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst294
			}
			goto inst288_fail
		} else if false {
			i += sz
			goto inst294
		}
	}
	goto inst288_fail
	goto unreachable
	goto inst288_fail
inst288_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 256:
			goto inst256_alt
		case 257:
			goto inst257_alt
		case 258:
			goto inst258_alt
		case 264:
			goto inst264_alt
		case 265:
			goto inst265_alt
		case 266:
			goto inst266_alt
		case 272:
			goto inst272_alt
		case 273:
			goto inst273_alt
		case 274:
			goto inst274_alt
		case 280:
			goto inst280_alt
		case 281:
			goto inst281_alt
		case 282:
			goto inst282_alt
		case 284:
			goto inst284_alt
		case 285:
			goto inst285_alt
		case 286:
			goto inst286_alt
		case 375:
			goto inst375_alt
		}
	}
	goto fail

	goto unreachable
	goto inst283
inst283: // string "::" -> 288
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "::" {
			i += 2
			goto inst288
		}
	}
	goto inst283_fail
	goto unreachable
	goto inst283_fail
inst283_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 280:
			goto inst280_alt
		case 281:
			goto inst281_alt
		case 282:
			goto inst282_alt
		case 284:
			goto inst284_alt
		}
	}
	goto fail

	goto unreachable
	goto inst279
inst279: // rune "09AFaf" -> 283
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst283
			}
			goto inst279_fail
		} else if false {
			i += sz
			goto inst283
		}
	}
	goto inst279_fail
	goto unreachable
	goto inst279_fail
inst279_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 280:
			goto inst280_alt
		}
	}
	goto fail

	goto unreachable
	goto inst280
inst280: // alt -> 279, 283
	{
		idx := i*319 + 117
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 280, 0})
	goto inst279
inst280_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst283
	}

	goto unreachable
	goto inst277
inst277: // rune "09AFaf" -> 281
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst281
			}
			goto inst277_fail
		} else if false {
			i += sz
			goto inst281
		}
	}
	goto inst277_fail
	goto unreachable
	goto inst277_fail
inst277_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 282:
			goto inst282_alt
		}
	}
	goto fail

	goto unreachable
	goto inst281
inst281: // alt -> 278, 283
	{
		idx := i*319 + 118
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 281, 0})
	goto inst278
inst281_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst283
	}

	goto unreachable
	goto inst278
inst278: // rune "09AFaf" -> 280
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst280
			}
			goto inst278_fail
		} else if false {
			i += sz
			goto inst280
		}
	}
	goto inst278_fail
	goto unreachable
	goto inst278_fail
inst278_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 281:
			goto inst281_alt
		}
	}
	goto fail

	goto unreachable
	goto inst291
inst291: // rune "09AFaf" -> 312
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst312
			}
			goto inst291_fail
		} else if false {
			i += sz
			goto inst312
		}
	}
	goto inst291_fail
	goto unreachable
	goto inst291_fail
inst291_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 292:
			goto inst292_alt
		}
	}
	goto fail

	goto unreachable
	goto inst292
inst292: // alt -> 291, 312
	{
		idx := i*319 + 119
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 292, 0})
	goto inst291
inst292_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst312
	}

	goto unreachable
	goto inst290
inst290: // rune "09AFaf" -> 292
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst292
			}
			goto inst290_fail
		} else if false {
			i += sz
			goto inst292
		}
	}
	goto inst290_fail
	goto unreachable
	goto inst290_fail
inst290_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 293:
			goto inst293_alt
		}
	}
	goto fail

	goto unreachable
	goto inst294
inst294: // alt -> 289, 312
	{
		idx := i*319 + 120
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 294, 0})
	goto inst289
inst294_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst312
	}

	goto unreachable
	goto inst312
inst312: // alt -> 295, 772
	{
		idx := i*319 + 121
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 312, 0})
	goto inst295
inst312_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst293
inst293: // alt -> 290, 312
	{
		idx := i*319 + 122
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 293, 0})
	goto inst290
inst293_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst312
	}

	goto unreachable
	goto inst289
inst289: // rune "09AFaf" -> 293
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst293
			}
			goto inst289_fail
		} else if false {
			i += sz
			goto inst293
		}
	}
	goto inst289_fail
	goto unreachable
	goto inst289_fail
inst289_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 294:
			goto inst294_alt
		}
	}
	goto fail

	goto unreachable
	goto inst295
inst295: // string ":" -> 296
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst296
		}
	}
	goto inst295_fail
	goto unreachable
	goto inst295_fail
inst295_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 312:
			goto inst312_alt
		}
	}
	goto fail

	goto unreachable
	goto inst296
inst296: // rune "09AFaf" -> 302
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst302
			}
			goto inst296_fail
		} else if false {
			i += sz
			goto inst302
		}
	}
	goto inst296_fail
	goto unreachable
	goto inst296_fail
inst296_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 312:
			goto inst312_alt
		}
	}
	goto fail

	goto unreachable
	goto inst247
inst247: // alt -> 246, 772
	{
		idx := i*319 + 123
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 247, 0})
	goto inst246
inst247_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst246
inst246: // rune "09AFaf" -> 772
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst772
			}
			goto inst246_fail
		} else if false {
			i += sz
			goto inst772
		}
	}
	goto inst246_fail
	goto unreachable
	goto inst246_fail
inst246_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 247:
			goto inst247_alt
		}
	}
	goto fail

	goto unreachable
	goto inst302
inst302: // alt -> 297, 311
	{
		idx := i*319 + 124
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 302, 0})
	goto inst297
inst302_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst311
	}

	goto unreachable
	goto inst297
inst297: // rune "09AFaf" -> 301
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst301
			}
			goto inst297_fail
		} else if false {
			i += sz
			goto inst301
		}
	}
	goto inst297_fail
	goto unreachable
	goto inst297_fail
inst297_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 302:
			goto inst302_alt
		}
	}
	goto fail

	goto unreachable
	goto inst301
inst301: // alt -> 298, 311
	{
		idx := i*319 + 125
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 301, 0})
	goto inst298
inst301_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst311
	}

	goto unreachable
	goto inst298
inst298: // rune "09AFaf" -> 300
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst300
			}
			goto inst298_fail
		} else if false {
			i += sz
			goto inst300
		}
	}
	goto inst298_fail
	goto unreachable
	goto inst298_fail
inst298_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 301:
			goto inst301_alt
		}
	}
	goto fail

	goto unreachable
	goto inst300
inst300: // alt -> 299, 311
	{
		idx := i*319 + 126
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 300, 0})
	goto inst299
inst300_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst311
	}

	goto unreachable
	goto inst311
inst311: // alt -> 303, 772
	{
		idx := i*319 + 127
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 311, 0})
	goto inst303
inst311_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst299
inst299: // rune "09AFaf" -> 311
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst311
			}
			goto inst299_fail
		} else if false {
			i += sz
			goto inst311
		}
	}
	goto inst299_fail
	goto unreachable
	goto inst299_fail
inst299_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 300:
			goto inst300_alt
		}
	}
	goto fail

	goto unreachable
	goto inst303
inst303: // string ":" -> 304
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst304
		}
	}
	goto inst303_fail
	goto unreachable
	goto inst303_fail
inst303_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 311:
			goto inst311_alt
		}
	}
	goto fail

	goto unreachable
	goto inst304
inst304: // rune "09AFaf" -> 310
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst310
			}
			goto inst304_fail
		} else if false {
			i += sz
			goto inst310
		}
	}
	goto inst304_fail
	goto unreachable
	goto inst304_fail
inst304_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 311:
			goto inst311_alt
		}
	}
	goto fail

	goto unreachable
	goto inst310
inst310: // alt -> 305, 772
	{
		idx := i*319 + 128
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 310, 0})
	goto inst305
inst310_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst305
inst305: // rune "09AFaf" -> 309
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst309
			}
			goto inst305_fail
		} else if false {
			i += sz
			goto inst309
		}
	}
	goto inst305_fail
	goto unreachable
	goto inst305_fail
inst305_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 310:
			goto inst310_alt
		}
	}
	goto fail

	goto unreachable
	goto inst309
inst309: // alt -> 306, 772
	{
		idx := i*319 + 129
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 309, 0})
	goto inst306
inst309_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst306
inst306: // rune "09AFaf" -> 308
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst308
			}
			goto inst306_fail
		} else if false {
			i += sz
			goto inst308
		}
	}
	goto inst306_fail
	goto unreachable
	goto inst306_fail
inst306_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 309:
			goto inst309_alt
		}
	}
	goto fail

	goto unreachable
	goto inst375
inst375: // alt -> 313, 314
	{
		idx := i*319 + 130
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 375, 0})
	goto inst313
inst375_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst314
	}

	goto unreachable
	goto inst314
inst314: // rune "09AFaf" -> 320
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst320
			}
			goto inst314_fail
		} else if false {
			i += sz
			goto inst320
		}
	}
	goto inst314_fail
	goto unreachable
	goto inst314_fail
inst314_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 437:
			goto inst437_alt
		}
	}
	goto fail

	goto unreachable
	goto inst320
inst320: // alt -> 315, 321
	{
		idx := i*319 + 131
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 320, 0})
	goto inst315
inst320_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst321
	}

	goto unreachable
	goto inst315
inst315: // rune "09AFaf" -> 319
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst319
			}
			goto inst315_fail
		} else if false {
			i += sz
			goto inst319
		}
	}
	goto inst315_fail
	goto unreachable
	goto inst315_fail
inst315_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 320:
			goto inst320_alt
		}
	}
	goto fail

	goto unreachable
	goto inst319
inst319: // alt -> 316, 321
	{
		idx := i*319 + 132
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 319, 0})
	goto inst316
inst319_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst321
	}

	goto unreachable
	goto inst316
inst316: // rune "09AFaf" -> 318
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst318
			}
			goto inst316_fail
		} else if false {
			i += sz
			goto inst318
		}
	}
	goto inst316_fail
	goto unreachable
	goto inst316_fail
inst316_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 319:
			goto inst319_alt
		}
	}
	goto fail

	goto unreachable
	goto inst318
inst318: // alt -> 317, 321
	{
		idx := i*319 + 133
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 318, 0})
	goto inst317
inst318_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst321
	}

	goto unreachable
	goto inst321
inst321: // string ":" -> 339
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst339
		}
	}
	goto inst321_fail
	goto unreachable
	goto inst321_fail
inst321_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 318:
			goto inst318_alt
		case 319:
			goto inst319_alt
		case 320:
			goto inst320_alt
		case 437:
			goto inst437_alt
		}
	}
	goto fail

	goto unreachable
	goto inst317
inst317: // rune "09AFaf" -> 321
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst321
			}
			goto inst317_fail
		} else if false {
			i += sz
			goto inst321
		}
	}
	goto inst317_fail
	goto unreachable
	goto inst317_fail
inst317_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 318:
			goto inst318_alt
		}
	}
	goto fail

	goto unreachable
	goto inst339
inst339: // alt -> 322, 340
	{
		idx := i*319 + 134
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 339, 0})
	goto inst322
inst339_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst340
	}

	goto unreachable
	goto inst322
inst322: // rune "09AFaf" -> 328
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst328
			}
			goto inst322_fail
		} else if false {
			i += sz
			goto inst328
		}
	}
	goto inst322_fail
	goto unreachable
	goto inst322_fail
inst322_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 339:
			goto inst339_alt
		}
	}
	goto fail

	goto unreachable
	goto inst328
inst328: // alt -> 323, 329
	{
		idx := i*319 + 135
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 328, 0})
	goto inst323
inst328_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst329
	}

	goto unreachable
	goto inst323
inst323: // rune "09AFaf" -> 327
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst327
			}
			goto inst323_fail
		} else if false {
			i += sz
			goto inst327
		}
	}
	goto inst323_fail
	goto unreachable
	goto inst323_fail
inst323_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 328:
			goto inst328_alt
		}
	}
	goto fail

	goto unreachable
	goto inst327
inst327: // alt -> 324, 329
	{
		idx := i*319 + 136
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 327, 0})
	goto inst324
inst327_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst329
	}

	goto unreachable
	goto inst324
inst324: // rune "09AFaf" -> 326
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst326
			}
			goto inst324_fail
		} else if false {
			i += sz
			goto inst326
		}
	}
	goto inst324_fail
	goto unreachable
	goto inst324_fail
inst324_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 327:
			goto inst327_alt
		}
	}
	goto fail

	goto unreachable
	goto inst329
inst329: // string ":" -> 338
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst338
		}
	}
	goto inst329_fail
	goto unreachable
	goto inst329_fail
inst329_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 326:
			goto inst326_alt
		case 327:
			goto inst327_alt
		case 328:
			goto inst328_alt
		case 339:
			goto inst339_alt
		}
	}
	goto fail

	goto unreachable
	goto inst326
inst326: // alt -> 325, 329
	{
		idx := i*319 + 137
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 326, 0})
	goto inst325
inst326_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst329
	}

	goto unreachable
	goto inst325
inst325: // rune "09AFaf" -> 329
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst329
			}
			goto inst325_fail
		} else if false {
			i += sz
			goto inst329
		}
	}
	goto inst325_fail
	goto unreachable
	goto inst325_fail
inst325_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 326:
			goto inst326_alt
		}
	}
	goto fail

	goto unreachable
	goto inst331
inst331: // rune "09AFaf" -> 335
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst335
			}
			goto inst331_fail
		} else if false {
			i += sz
			goto inst335
		}
	}
	goto inst331_fail
	goto unreachable
	goto inst331_fail
inst331_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 336:
			goto inst336_alt
		}
	}
	goto fail

	goto unreachable
	goto inst335
inst335: // alt -> 332, 337
	{
		idx := i*319 + 138
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 335, 0})
	goto inst332
inst335_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst337
	}

	goto unreachable
	goto inst332
inst332: // rune "09AFaf" -> 334
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst334
			}
			goto inst332_fail
		} else if false {
			i += sz
			goto inst334
		}
	}
	goto inst332_fail
	goto unreachable
	goto inst332_fail
inst332_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 335:
			goto inst335_alt
		}
	}
	goto fail

	goto unreachable
	goto inst334
inst334: // alt -> 333, 337
	{
		idx := i*319 + 139
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 334, 0})
	goto inst333
inst334_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst337
	}

	goto unreachable
	goto inst333
inst333: // rune "09AFaf" -> 337
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst337
			}
			goto inst333_fail
		} else if false {
			i += sz
			goto inst337
		}
	}
	goto inst333_fail
	goto unreachable
	goto inst333_fail
inst333_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 334:
			goto inst334_alt
		}
	}
	goto fail

	goto unreachable
	goto inst337
inst337: // string "::" -> 341
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "::" {
			i += 2
			goto inst341
		}
	}
	goto inst337_fail
	goto unreachable
	goto inst337_fail
inst337_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 334:
			goto inst334_alt
		case 335:
			goto inst335_alt
		case 336:
			goto inst336_alt
		case 338:
			goto inst338_alt
		}
	}
	goto fail

	goto unreachable
	goto inst336
inst336: // alt -> 331, 337
	{
		idx := i*319 + 140
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 336, 0})
	goto inst331
inst336_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst337
	}

	goto unreachable
	goto inst340
inst340: // string ":" -> 341
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst341
		}
	}
	goto inst340_fail
	goto unreachable
	goto inst340_fail
inst340_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 318:
			goto inst318_alt
		case 319:
			goto inst319_alt
		case 320:
			goto inst320_alt
		case 326:
			goto inst326_alt
		case 327:
			goto inst327_alt
		case 328:
			goto inst328_alt
		case 339:
			goto inst339_alt
		case 437:
			goto inst437_alt
		}
	}
	goto fail

	goto unreachable
	goto inst341
inst341: // rune "09AFaf" -> 347
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst347
			}
			goto inst341_fail
		} else if false {
			i += sz
			goto inst347
		}
	}
	goto inst341_fail
	goto unreachable
	goto inst341_fail
inst341_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 318:
			goto inst318_alt
		case 319:
			goto inst319_alt
		case 320:
			goto inst320_alt
		case 326:
			goto inst326_alt
		case 327:
			goto inst327_alt
		case 328:
			goto inst328_alt
		case 334:
			goto inst334_alt
		case 335:
			goto inst335_alt
		case 336:
			goto inst336_alt
		case 338:
			goto inst338_alt
		case 339:
			goto inst339_alt
		case 437:
			goto inst437_alt
		}
	}
	goto fail

	goto unreachable
	goto inst338
inst338: // alt -> 330, 340
	{
		idx := i*319 + 141
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 338, 0})
	goto inst330
inst338_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst340
	}

	goto unreachable
	goto inst330
inst330: // rune "09AFaf" -> 336
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst336
			}
			goto inst330_fail
		} else if false {
			i += sz
			goto inst336
		}
	}
	goto inst330_fail
	goto unreachable
	goto inst330_fail
inst330_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 338:
			goto inst338_alt
		}
	}
	goto fail

	goto unreachable
	goto inst347
inst347: // alt -> 342, 374
	{
		idx := i*319 + 142
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 347, 0})
	goto inst342
inst347_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst374
	}

	goto unreachable
	goto inst342
inst342: // rune "09AFaf" -> 346
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst346
			}
			goto inst342_fail
		} else if false {
			i += sz
			goto inst346
		}
	}
	goto inst342_fail
	goto unreachable
	goto inst342_fail
inst342_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 347:
			goto inst347_alt
		}
	}
	goto fail

	goto unreachable
	goto inst346
inst346: // alt -> 343, 374
	{
		idx := i*319 + 143
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 346, 0})
	goto inst343
inst346_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst374
	}

	goto unreachable
	goto inst343
inst343: // rune "09AFaf" -> 345
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst345
			}
			goto inst343_fail
		} else if false {
			i += sz
			goto inst345
		}
	}
	goto inst343_fail
	goto unreachable
	goto inst343_fail
inst343_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 346:
			goto inst346_alt
		}
	}
	goto fail

	goto unreachable
	goto inst345
inst345: // alt -> 344, 374
	{
		idx := i*319 + 144
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 345, 0})
	goto inst344
inst345_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst374
	}

	goto unreachable
	goto inst374
inst374: // alt -> 348, 772
	{
		idx := i*319 + 145
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 374, 0})
	goto inst348
inst374_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst344
inst344: // rune "09AFaf" -> 374
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst374
			}
			goto inst344_fail
		} else if false {
			i += sz
			goto inst374
		}
	}
	goto inst344_fail
	goto unreachable
	goto inst344_fail
inst344_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 345:
			goto inst345_alt
		}
	}
	goto fail

	goto unreachable
	goto inst348
inst348: // string ":" -> 349
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst349
		}
	}
	goto inst348_fail
	goto unreachable
	goto inst348_fail
inst348_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 374:
			goto inst374_alt
		}
	}
	goto fail

	goto unreachable
	goto inst349
inst349: // rune "09AFaf" -> 355
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst355
			}
			goto inst349_fail
		} else if false {
			i += sz
			goto inst355
		}
	}
	goto inst349_fail
	goto unreachable
	goto inst349_fail
inst349_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 374:
			goto inst374_alt
		}
	}
	goto fail

	goto unreachable
	goto inst351
inst351: // rune "09AFaf" -> 353
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst353
			}
			goto inst351_fail
		} else if false {
			i += sz
			goto inst353
		}
	}
	goto inst351_fail
	goto unreachable
	goto inst351_fail
inst351_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 354:
			goto inst354_alt
		}
	}
	goto fail

	goto unreachable
	goto inst353
inst353: // alt -> 352, 373
	{
		idx := i*319 + 146
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 353, 0})
	goto inst352
inst353_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst373
	}

	goto unreachable
	goto inst352
inst352: // rune "09AFaf" -> 373
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst373
			}
			goto inst352_fail
		} else if false {
			i += sz
			goto inst373
		}
	}
	goto inst352_fail
	goto unreachable
	goto inst352_fail
inst352_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 353:
			goto inst353_alt
		}
	}
	goto fail

	goto unreachable
	goto inst355
inst355: // alt -> 350, 373
	{
		idx := i*319 + 147
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 355, 0})
	goto inst350
inst355_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst373
	}

	goto unreachable
	goto inst350
inst350: // rune "09AFaf" -> 354
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst354
			}
			goto inst350_fail
		} else if false {
			i += sz
			goto inst354
		}
	}
	goto inst350_fail
	goto unreachable
	goto inst350_fail
inst350_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 355:
			goto inst355_alt
		}
	}
	goto fail

	goto unreachable
	goto inst354
inst354: // alt -> 351, 373
	{
		idx := i*319 + 148
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 354, 0})
	goto inst351
inst354_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst373
	}

	goto unreachable
	goto inst373
inst373: // alt -> 356, 772
	{
		idx := i*319 + 149
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 373, 0})
	goto inst356
inst373_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst356
inst356: // string ":" -> 357
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst357
		}
	}
	goto inst356_fail
	goto unreachable
	goto inst356_fail
inst356_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 373:
			goto inst373_alt
		}
	}
	goto fail

	goto unreachable
	goto inst357
inst357: // rune "09AFaf" -> 363
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst363
			}
			goto inst357_fail
		} else if false {
			i += sz
			goto inst363
		}
	}
	goto inst357_fail
	goto unreachable
	goto inst357_fail
inst357_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 373:
			goto inst373_alt
		}
	}
	goto fail

	goto unreachable
	goto inst363
inst363: // alt -> 358, 372
	{
		idx := i*319 + 150
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 363, 0})
	goto inst358
inst363_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst372
	}

	goto unreachable
	goto inst358
inst358: // rune "09AFaf" -> 362
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst362
			}
			goto inst358_fail
		} else if false {
			i += sz
			goto inst362
		}
	}
	goto inst358_fail
	goto unreachable
	goto inst358_fail
inst358_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 363:
			goto inst363_alt
		}
	}
	goto fail

	goto unreachable
	goto inst362
inst362: // alt -> 359, 372
	{
		idx := i*319 + 151
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 362, 0})
	goto inst359
inst362_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst372
	}

	goto unreachable
	goto inst359
inst359: // rune "09AFaf" -> 361
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst361
			}
			goto inst359_fail
		} else if false {
			i += sz
			goto inst361
		}
	}
	goto inst359_fail
	goto unreachable
	goto inst359_fail
inst359_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 362:
			goto inst362_alt
		}
	}
	goto fail

	goto unreachable
	goto inst361
inst361: // alt -> 360, 372
	{
		idx := i*319 + 152
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 361, 0})
	goto inst360
inst361_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst372
	}

	goto unreachable
	goto inst372
inst372: // alt -> 364, 772
	{
		idx := i*319 + 153
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 372, 0})
	goto inst364
inst372_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst360
inst360: // rune "09AFaf" -> 372
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst372
			}
			goto inst360_fail
		} else if false {
			i += sz
			goto inst372
		}
	}
	goto inst360_fail
	goto unreachable
	goto inst360_fail
inst360_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 361:
			goto inst361_alt
		}
	}
	goto fail

	goto unreachable
	goto inst364
inst364: // string ":" -> 365
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst365
		}
	}
	goto inst364_fail
	goto unreachable
	goto inst364_fail
inst364_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 372:
			goto inst372_alt
		}
	}
	goto fail

	goto unreachable
	goto inst397
inst397: // rune "09AFaf" -> 436
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst436
			}
			goto inst397_fail
		} else if false {
			i += sz
			goto inst436
		}
	}
	goto inst397_fail
	goto unreachable
	goto inst397_fail
inst397_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 398:
			goto inst398_alt
		}
	}
	goto fail

	goto unreachable
	goto inst398
inst398: // alt -> 397, 436
	{
		idx := i*319 + 154
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 398, 0})
	goto inst397
inst398_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst436
	}

	goto unreachable
	goto inst436
inst436: // alt -> 401, 772
	{
		idx := i*319 + 155
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 436, 0})
	goto inst401
inst436_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst365
inst365: // rune "09AFaf" -> 371
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst371
			}
			goto inst365_fail
		} else if false {
			i += sz
			goto inst371
		}
	}
	goto inst365_fail
	goto unreachable
	goto inst365_fail
inst365_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 372:
			goto inst372_alt
		}
	}
	goto fail

	goto unreachable
	goto inst401
inst401: // string ":" -> 402
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst402
		}
	}
	goto inst401_fail
	goto unreachable
	goto inst401_fail
inst401_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 436:
			goto inst436_alt
		}
	}
	goto fail

	goto unreachable
	goto inst400
inst400: // alt -> 395, 436
	{
		idx := i*319 + 156
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 400, 0})
	goto inst395
inst400_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst436
	}

	goto unreachable
	goto inst378
inst378: // rune "09AFaf" -> 380
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst380
			}
			goto inst378_fail
		} else if false {
			i += sz
			goto inst380
		}
	}
	goto inst378_fail
	goto unreachable
	goto inst378_fail
inst378_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 381:
			goto inst381_alt
		}
	}
	goto fail

	goto unreachable
	goto inst381
inst381: // alt -> 378, 383
	{
		idx := i*319 + 157
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 381, 0})
	goto inst378
inst381_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst383
	}

	goto unreachable
	goto inst377
inst377: // rune "09AFaf" -> 381
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst381
			}
			goto inst377_fail
		} else if false {
			i += sz
			goto inst381
		}
	}
	goto inst377_fail
	goto unreachable
	goto inst377_fail
inst377_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 382:
			goto inst382_alt
		}
	}
	goto fail

	goto unreachable
	goto inst382
inst382: // alt -> 377, 383
	{
		idx := i*319 + 158
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 382, 0})
	goto inst377
inst382_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst383
	}

	goto unreachable
	goto inst376
inst376: // rune "09AFaf" -> 382
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst382
			}
			goto inst376_fail
		} else if false {
			i += sz
			goto inst382
		}
	}
	goto inst376_fail
	goto unreachable
	goto inst376_fail
inst376_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 499:
			goto inst499_alt
		}
	}
	goto fail

	goto unreachable
	goto inst437
inst437: // alt -> 375, 376
	{
		idx := i*319 + 159
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 437, 0})
	goto inst375
inst437_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst376
	}

	goto unreachable
	goto inst383
inst383: // string ":" -> 392
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst392
		}
	}
	goto inst383_fail
	goto unreachable
	goto inst383_fail
inst383_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 380:
			goto inst380_alt
		case 381:
			goto inst381_alt
		case 382:
			goto inst382_alt
		case 499:
			goto inst499_alt
		}
	}
	goto fail

	goto unreachable
	goto inst380
inst380: // alt -> 379, 383
	{
		idx := i*319 + 160
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 380, 0})
	goto inst379
inst380_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst383
	}

	goto unreachable
	goto inst379
inst379: // rune "09AFaf" -> 383
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst383
			}
			goto inst379_fail
		} else if false {
			i += sz
			goto inst383
		}
	}
	goto inst379_fail
	goto unreachable
	goto inst379_fail
inst379_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 380:
			goto inst380_alt
		}
	}
	goto fail

	goto unreachable
	goto inst386
inst386: // rune "09AFaf" -> 388
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst388
			}
			goto inst386_fail
		} else if false {
			i += sz
			goto inst388
		}
	}
	goto inst386_fail
	goto unreachable
	goto inst386_fail
inst386_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 389:
			goto inst389_alt
		}
	}
	goto fail

	goto unreachable
	goto inst388
inst388: // alt -> 387, 391
	{
		idx := i*319 + 161
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 388, 0})
	goto inst387
inst388_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst391
	}

	goto unreachable
	goto inst387
inst387: // rune "09AFaf" -> 391
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst391
			}
			goto inst387_fail
		} else if false {
			i += sz
			goto inst391
		}
	}
	goto inst387_fail
	goto unreachable
	goto inst387_fail
inst387_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 388:
			goto inst388_alt
		}
	}
	goto fail

	goto unreachable
	goto inst389
inst389: // alt -> 386, 391
	{
		idx := i*319 + 162
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 389, 0})
	goto inst386
inst389_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst391
	}

	goto unreachable
	goto inst385
inst385: // rune "09AFaf" -> 389
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst389
			}
			goto inst385_fail
		} else if false {
			i += sz
			goto inst389
		}
	}
	goto inst385_fail
	goto unreachable
	goto inst385_fail
inst385_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 390:
			goto inst390_alt
		}
	}
	goto fail

	goto unreachable
	goto inst384
inst384: // rune "09AFaf" -> 390
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst390
			}
			goto inst384_fail
		} else if false {
			i += sz
			goto inst390
		}
	}
	goto inst384_fail
	goto unreachable
	goto inst384_fail
inst384_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 392:
			goto inst392_alt
		}
	}
	goto fail

	goto unreachable
	goto inst390
inst390: // alt -> 385, 391
	{
		idx := i*319 + 163
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 390, 0})
	goto inst385
inst390_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst391
	}

	goto unreachable
	goto inst391
inst391: // string "::" -> 394
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "::" {
			i += 2
			goto inst394
		}
	}
	goto inst391_fail
	goto unreachable
	goto inst391_fail
inst391_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 388:
			goto inst388_alt
		case 389:
			goto inst389_alt
		case 390:
			goto inst390_alt
		case 392:
			goto inst392_alt
		}
	}
	goto fail

	goto unreachable
	goto inst392
inst392: // alt -> 384, 393
	{
		idx := i*319 + 164
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 392, 0})
	goto inst384
inst392_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst393
	}

	goto unreachable
	goto inst393
inst393: // string ":" -> 394
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst394
		}
	}
	goto inst393_fail
	goto unreachable
	goto inst393_fail
inst393_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 380:
			goto inst380_alt
		case 381:
			goto inst381_alt
		case 382:
			goto inst382_alt
		case 499:
			goto inst499_alt
		}
	}
	goto fail

	goto unreachable
	goto inst394
inst394: // rune "09AFaf" -> 400
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst400
			}
			goto inst394_fail
		} else if false {
			i += sz
			goto inst400
		}
	}
	goto inst394_fail
	goto unreachable
	goto inst394_fail
inst394_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 380:
			goto inst380_alt
		case 381:
			goto inst381_alt
		case 382:
			goto inst382_alt
		case 388:
			goto inst388_alt
		case 389:
			goto inst389_alt
		case 390:
			goto inst390_alt
		case 392:
			goto inst392_alt
		case 499:
			goto inst499_alt
		}
	}
	goto fail

	goto unreachable
	goto inst395
inst395: // rune "09AFaf" -> 399
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst399
			}
			goto inst395_fail
		} else if false {
			i += sz
			goto inst399
		}
	}
	goto inst395_fail
	goto unreachable
	goto inst395_fail
inst395_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 400:
			goto inst400_alt
		}
	}
	goto fail

	goto unreachable
	goto inst402
inst402: // rune "09AFaf" -> 408
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst408
			}
			goto inst402_fail
		} else if false {
			i += sz
			goto inst408
		}
	}
	goto inst402_fail
	goto unreachable
	goto inst402_fail
inst402_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 436:
			goto inst436_alt
		}
	}
	goto fail

	goto unreachable
	goto inst396
inst396: // rune "09AFaf" -> 398
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst398
			}
			goto inst396_fail
		} else if false {
			i += sz
			goto inst398
		}
	}
	goto inst396_fail
	goto unreachable
	goto inst396_fail
inst396_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 399:
			goto inst399_alt
		}
	}
	goto fail

	goto unreachable
	goto inst399
inst399: // alt -> 396, 436
	{
		idx := i*319 + 165
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 399, 0})
	goto inst396
inst399_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst436
	}

	goto unreachable
	goto inst371
inst371: // alt -> 366, 772
	{
		idx := i*319 + 166
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 371, 0})
	goto inst366
inst371_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst366
inst366: // rune "09AFaf" -> 370
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst370
			}
			goto inst366_fail
		} else if false {
			i += sz
			goto inst370
		}
	}
	goto inst366_fail
	goto unreachable
	goto inst366_fail
inst366_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 371:
			goto inst371_alt
		}
	}
	goto fail

	goto unreachable
	goto inst370
inst370: // alt -> 367, 772
	{
		idx := i*319 + 167
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 370, 0})
	goto inst367
inst370_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst499
inst499: // alt -> 437, 438
	{
		idx := i*319 + 168
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 499, 0})
	goto inst437
inst499_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst438
	}

	goto unreachable
	goto inst367
inst367: // rune "09AFaf" -> 369
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst369
			}
			goto inst367_fail
		} else if false {
			i += sz
			goto inst369
		}
	}
	goto inst367_fail
	goto unreachable
	goto inst367_fail
inst367_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 370:
			goto inst370_alt
		}
	}
	goto fail

	goto unreachable
	goto inst369
inst369: // alt -> 368, 772
	{
		idx := i*319 + 169
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 369, 0})
	goto inst368
inst369_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst368
inst368: // rune "09AFaf" -> 772
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst772
			}
			goto inst368_fail
		} else if false {
			i += sz
			goto inst772
		}
	}
	goto inst368_fail
	goto unreachable
	goto inst368_fail
inst368_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 369:
			goto inst369_alt
		}
	}
	goto fail

	goto unreachable
	goto inst404
inst404: // rune "09AFaf" -> 406
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst406
			}
			goto inst404_fail
		} else if false {
			i += sz
			goto inst406
		}
	}
	goto inst404_fail
	goto unreachable
	goto inst404_fail
inst404_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 407:
			goto inst407_alt
		}
	}
	goto fail

	goto unreachable
	goto inst405
inst405: // rune "09AFaf" -> 435
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst435
			}
			goto inst405_fail
		} else if false {
			i += sz
			goto inst435
		}
	}
	goto inst405_fail
	goto unreachable
	goto inst405_fail
inst405_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 406:
			goto inst406_alt
		}
	}
	goto fail

	goto unreachable
	goto inst403
inst403: // rune "09AFaf" -> 407
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst407
			}
			goto inst403_fail
		} else if false {
			i += sz
			goto inst407
		}
	}
	goto inst403_fail
	goto unreachable
	goto inst403_fail
inst403_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 408:
			goto inst408_alt
		}
	}
	goto fail

	goto unreachable
	goto inst406
inst406: // alt -> 405, 435
	{
		idx := i*319 + 170
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 406, 0})
	goto inst405
inst406_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst435
	}

	goto unreachable
	goto inst407
inst407: // alt -> 404, 435
	{
		idx := i*319 + 171
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 407, 0})
	goto inst404
inst407_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst435
	}

	goto unreachable
	goto inst408
inst408: // alt -> 403, 435
	{
		idx := i*319 + 172
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 408, 0})
	goto inst403
inst408_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst435
	}

	goto unreachable
	goto inst409
inst409: // string ":" -> 410
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst410
		}
	}
	goto inst409_fail
	goto unreachable
	goto inst409_fail
inst409_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 435:
			goto inst435_alt
		}
	}
	goto fail

	goto unreachable
	goto inst410
inst410: // rune "09AFaf" -> 416
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst416
			}
			goto inst410_fail
		} else if false {
			i += sz
			goto inst416
		}
	}
	goto inst410_fail
	goto unreachable
	goto inst410_fail
inst410_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 435:
			goto inst435_alt
		}
	}
	goto fail

	goto unreachable
	goto inst411
inst411: // rune "09AFaf" -> 415
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst415
			}
			goto inst411_fail
		} else if false {
			i += sz
			goto inst415
		}
	}
	goto inst411_fail
	goto unreachable
	goto inst411_fail
inst411_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 416:
			goto inst416_alt
		}
	}
	goto fail

	goto unreachable
	goto inst412
inst412: // rune "09AFaf" -> 414
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst414
			}
			goto inst412_fail
		} else if false {
			i += sz
			goto inst414
		}
	}
	goto inst412_fail
	goto unreachable
	goto inst412_fail
inst412_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 415:
			goto inst415_alt
		}
	}
	goto fail

	goto unreachable
	goto inst413
inst413: // rune "09AFaf" -> 434
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst434
			}
			goto inst413_fail
		} else if false {
			i += sz
			goto inst434
		}
	}
	goto inst413_fail
	goto unreachable
	goto inst413_fail
inst413_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 414:
			goto inst414_alt
		}
	}
	goto fail

	goto unreachable
	goto inst414
inst414: // alt -> 413, 434
	{
		idx := i*319 + 173
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 414, 0})
	goto inst413
inst414_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst434
	}

	goto unreachable
	goto inst415
inst415: // alt -> 412, 434
	{
		idx := i*319 + 174
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 415, 0})
	goto inst412
inst415_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst434
	}

	goto unreachable
	goto inst416
inst416: // alt -> 411, 434
	{
		idx := i*319 + 175
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 416, 0})
	goto inst411
inst416_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst434
	}

	goto unreachable
	goto inst417
inst417: // string ":" -> 418
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst418
		}
	}
	goto inst417_fail
	goto unreachable
	goto inst417_fail
inst417_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 434:
			goto inst434_alt
		}
	}
	goto fail

	goto unreachable
	goto inst418
inst418: // rune "09AFaf" -> 424
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst424
			}
			goto inst418_fail
		} else if false {
			i += sz
			goto inst424
		}
	}
	goto inst418_fail
	goto unreachable
	goto inst418_fail
inst418_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 434:
			goto inst434_alt
		}
	}
	goto fail

	goto unreachable
	goto inst419
inst419: // rune "09AFaf" -> 423
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst423
			}
			goto inst419_fail
		} else if false {
			i += sz
			goto inst423
		}
	}
	goto inst419_fail
	goto unreachable
	goto inst419_fail
inst419_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 424:
			goto inst424_alt
		}
	}
	goto fail

	goto unreachable
	goto inst420
inst420: // rune "09AFaf" -> 422
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst422
			}
			goto inst420_fail
		} else if false {
			i += sz
			goto inst422
		}
	}
	goto inst420_fail
	goto unreachable
	goto inst420_fail
inst420_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 423:
			goto inst423_alt
		}
	}
	goto fail

	goto unreachable
	goto inst421
inst421: // rune "09AFaf" -> 433
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst433
			}
			goto inst421_fail
		} else if false {
			i += sz
			goto inst433
		}
	}
	goto inst421_fail
	goto unreachable
	goto inst421_fail
inst421_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 422:
			goto inst422_alt
		}
	}
	goto fail

	goto unreachable
	goto inst422
inst422: // alt -> 421, 433
	{
		idx := i*319 + 176
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 422, 0})
	goto inst421
inst422_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst433
	}

	goto unreachable
	goto inst423
inst423: // alt -> 420, 433
	{
		idx := i*319 + 177
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 423, 0})
	goto inst420
inst423_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst433
	}

	goto unreachable
	goto inst424
inst424: // alt -> 419, 433
	{
		idx := i*319 + 178
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 424, 0})
	goto inst419
inst424_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst433
	}

	goto unreachable
	goto inst425
inst425: // string ":" -> 426
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst426
		}
	}
	goto inst425_fail
	goto unreachable
	goto inst425_fail
inst425_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 433:
			goto inst433_alt
		}
	}
	goto fail

	goto unreachable
	goto inst426
inst426: // rune "09AFaf" -> 432
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst432
			}
			goto inst426_fail
		} else if false {
			i += sz
			goto inst432
		}
	}
	goto inst426_fail
	goto unreachable
	goto inst426_fail
inst426_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 433:
			goto inst433_alt
		}
	}
	goto fail

	goto unreachable
	goto inst427
inst427: // rune "09AFaf" -> 431
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst431
			}
			goto inst427_fail
		} else if false {
			i += sz
			goto inst431
		}
	}
	goto inst427_fail
	goto unreachable
	goto inst427_fail
inst427_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 432:
			goto inst432_alt
		}
	}
	goto fail

	goto unreachable
	goto inst428
inst428: // rune "09AFaf" -> 430
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst430
			}
			goto inst428_fail
		} else if false {
			i += sz
			goto inst430
		}
	}
	goto inst428_fail
	goto unreachable
	goto inst428_fail
inst428_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 431:
			goto inst431_alt
		}
	}
	goto fail

	goto unreachable
	goto inst432
inst432: // alt -> 427, 772
	{
		idx := i*319 + 179
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 432, 0})
	goto inst427
inst432_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst431
inst431: // alt -> 428, 772
	{
		idx := i*319 + 180
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 431, 0})
	goto inst428
inst431_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst433
inst433: // alt -> 425, 772
	{
		idx := i*319 + 181
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 433, 0})
	goto inst425
inst433_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst434
inst434: // alt -> 417, 772
	{
		idx := i*319 + 182
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 434, 0})
	goto inst417
inst434_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst435
inst435: // alt -> 409, 772
	{
		idx := i*319 + 183
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 435, 0})
	goto inst409
inst435_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst438
inst438: // rune "09AFaf" -> 444
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst444
			}
			goto inst438_fail
		} else if false {
			i += sz
			goto inst444
		}
	}
	goto inst438_fail
	goto unreachable
	goto inst438_fail
inst438_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 565:
			goto inst565_alt
		}
	}
	goto fail

	goto unreachable
	goto inst439
inst439: // rune "09AFaf" -> 443
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst443
			}
			goto inst439_fail
		} else if false {
			i += sz
			goto inst443
		}
	}
	goto inst439_fail
	goto unreachable
	goto inst439_fail
inst439_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 444:
			goto inst444_alt
		}
	}
	goto fail

	goto unreachable
	goto inst445
inst445: // string "::" -> 447
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "::" {
			i += 2
			goto inst447
		}
	}
	goto inst445_fail
	goto unreachable
	goto inst445_fail
inst445_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 442:
			goto inst442_alt
		case 443:
			goto inst443_alt
		case 444:
			goto inst444_alt
		case 565:
			goto inst565_alt
		}
	}
	goto fail

	goto unreachable
	goto inst440
inst440: // rune "09AFaf" -> 442
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst442
			}
			goto inst440_fail
		} else if false {
			i += sz
			goto inst442
		}
	}
	goto inst440_fail
	goto unreachable
	goto inst440_fail
inst440_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 443:
			goto inst443_alt
		}
	}
	goto fail

	goto unreachable
	goto inst453
inst453: // alt -> 448, 498
	{
		idx := i*319 + 184
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 453, 0})
	goto inst448
inst453_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst498
	}

	goto unreachable
	goto inst449
inst449: // rune "09AFaf" -> 451
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst451
			}
			goto inst449_fail
		} else if false {
			i += sz
			goto inst451
		}
	}
	goto inst449_fail
	goto unreachable
	goto inst449_fail
inst449_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 452:
			goto inst452_alt
		}
	}
	goto fail

	goto unreachable
	goto inst451
inst451: // alt -> 450, 498
	{
		idx := i*319 + 185
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 451, 0})
	goto inst450
inst451_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst498
	}

	goto unreachable
	goto inst441
inst441: // rune "09AFaf" -> 445
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst445
			}
			goto inst441_fail
		} else if false {
			i += sz
			goto inst445
		}
	}
	goto inst441_fail
	goto unreachable
	goto inst441_fail
inst441_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 442:
			goto inst442_alt
		}
	}
	goto fail

	goto unreachable
	goto inst442
inst442: // alt -> 441, 445
	{
		idx := i*319 + 186
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 442, 0})
	goto inst441
inst442_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst445
	}

	goto unreachable
	goto inst443
inst443: // alt -> 440, 445
	{
		idx := i*319 + 187
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 443, 0})
	goto inst440
inst443_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst445
	}

	goto unreachable
	goto inst444
inst444: // alt -> 439, 445
	{
		idx := i*319 + 188
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 444, 0})
	goto inst439
inst444_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst445
	}

	goto unreachable
	goto inst447
inst447: // rune "09AFaf" -> 453
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst453
			}
			goto inst447_fail
		} else if false {
			i += sz
			goto inst453
		}
	}
	goto inst447_fail
	goto unreachable
	goto inst447_fail
inst447_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 442:
			goto inst442_alt
		case 443:
			goto inst443_alt
		case 444:
			goto inst444_alt
		case 565:
			goto inst565_alt
		}
	}
	goto fail

	goto unreachable
	goto inst448
inst448: // rune "09AFaf" -> 452
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst452
			}
			goto inst448_fail
		} else if false {
			i += sz
			goto inst452
		}
	}
	goto inst448_fail
	goto unreachable
	goto inst448_fail
inst448_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 453:
			goto inst453_alt
		}
	}
	goto fail

	goto unreachable
	goto inst498
inst498: // alt -> 454, 772
	{
		idx := i*319 + 189
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 498, 0})
	goto inst454
inst498_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst450
inst450: // rune "09AFaf" -> 498
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst498
			}
			goto inst450_fail
		} else if false {
			i += sz
			goto inst498
		}
	}
	goto inst450_fail
	goto unreachable
	goto inst450_fail
inst450_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 451:
			goto inst451_alt
		}
	}
	goto fail

	goto unreachable
	goto inst452
inst452: // alt -> 449, 498
	{
		idx := i*319 + 190
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 452, 0})
	goto inst449
inst452_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst498
	}

	goto unreachable
	goto inst772
inst772: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto inst308
inst308: // alt -> 307, 772
	{
		idx := i*319 + 191
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 308, 0})
	goto inst307
inst308_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst307
inst307: // rune "09AFaf" -> 772
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst772
			}
			goto inst307_fail
		} else if false {
			i += sz
			goto inst772
		}
	}
	goto inst307_fail
	goto unreachable
	goto inst307_fail
inst307_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 308:
			goto inst308_alt
		}
	}
	goto fail

	goto unreachable
	goto inst61
inst61: // alt -> 60, 772
	{
		idx := i*319 + 192
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 61, 0})
	goto inst60
inst61_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst60
inst60: // rune "09AFaf" -> 772
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst772
			}
			goto inst60_fail
		} else if false {
			i += sz
			goto inst772
		}
	}
	goto inst60_fail
	goto unreachable
	goto inst60_fail
inst60_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 61:
			goto inst61_alt
		}
	}
	goto fail

	goto unreachable
	goto inst430
inst430: // alt -> 429, 772
	{
		idx := i*319 + 193
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 430, 0})
	goto inst429
inst430_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst429
inst429: // rune "09AFaf" -> 772
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst772
			}
			goto inst429_fail
		} else if false {
			i += sz
			goto inst772
		}
	}
	goto inst429_fail
	goto unreachable
	goto inst429_fail
inst429_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 430:
			goto inst430_alt
		}
	}
	goto fail

	goto unreachable
	goto inst186
inst186: // alt -> 185, 772
	{
		idx := i*319 + 194
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 186, 0})
	goto inst185
inst186_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst185
inst185: // rune "09AFaf" -> 772
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst772
			}
			goto inst185_fail
		} else if false {
			i += sz
			goto inst772
		}
	}
	goto inst185_fail
	goto unreachable
	goto inst185_fail
inst185_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 186:
			goto inst186_alt
		}
	}
	goto fail

	goto unreachable
	goto inst465
inst465: // rune "09AFaf" -> 467
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst467
			}
			goto inst465_fail
		} else if false {
			i += sz
			goto inst467
		}
	}
	goto inst465_fail
	goto unreachable
	goto inst465_fail
inst465_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 468:
			goto inst468_alt
		}
	}
	goto fail

	goto unreachable
	goto inst461
inst461: // alt -> 456, 497
	{
		idx := i*319 + 195
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 461, 0})
	goto inst456
inst461_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst497
	}

	goto unreachable
	goto inst464
inst464: // rune "09AFaf" -> 468
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst468
			}
			goto inst464_fail
		} else if false {
			i += sz
			goto inst468
		}
	}
	goto inst464_fail
	goto unreachable
	goto inst464_fail
inst464_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 469:
			goto inst469_alt
		}
	}
	goto fail

	goto unreachable
	goto inst466
inst466: // rune "09AFaf" -> 496
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst496
			}
			goto inst466_fail
		} else if false {
			i += sz
			goto inst496
		}
	}
	goto inst466_fail
	goto unreachable
	goto inst466_fail
inst466_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 467:
			goto inst467_alt
		}
	}
	goto fail

	goto unreachable
	goto inst467
inst467: // alt -> 466, 496
	{
		idx := i*319 + 196
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 467, 0})
	goto inst466
inst467_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst496
	}

	goto unreachable
	goto inst468
inst468: // alt -> 465, 496
	{
		idx := i*319 + 197
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 468, 0})
	goto inst465
inst468_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst496
	}

	goto unreachable
	goto inst496
inst496: // alt -> 470, 772
	{
		idx := i*319 + 198
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 496, 0})
	goto inst470
inst496_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst469
inst469: // alt -> 464, 496
	{
		idx := i*319 + 199
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 469, 0})
	goto inst464
inst469_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst496
	}

	goto unreachable
	goto inst470
inst470: // string ":" -> 471
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst471
		}
	}
	goto inst470_fail
	goto unreachable
	goto inst470_fail
inst470_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 496:
			goto inst496_alt
		}
	}
	goto fail

	goto unreachable
	goto inst472
inst472: // rune "09AFaf" -> 476
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst476
			}
			goto inst472_fail
		} else if false {
			i += sz
			goto inst476
		}
	}
	goto inst472_fail
	goto unreachable
	goto inst472_fail
inst472_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 477:
			goto inst477_alt
		}
	}
	goto fail

	goto unreachable
	goto inst473
inst473: // rune "09AFaf" -> 475
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst475
			}
			goto inst473_fail
		} else if false {
			i += sz
			goto inst475
		}
	}
	goto inst473_fail
	goto unreachable
	goto inst473_fail
inst473_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 476:
			goto inst476_alt
		}
	}
	goto fail

	goto unreachable
	goto inst476
inst476: // alt -> 473, 495
	{
		idx := i*319 + 200
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 476, 0})
	goto inst473
inst476_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst495
	}

	goto unreachable
	goto inst459
inst459: // alt -> 458, 497
	{
		idx := i*319 + 201
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 459, 0})
	goto inst458
inst459_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst497
	}

	goto unreachable
	goto inst478
inst478: // string ":" -> 479
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst479
		}
	}
	goto inst478_fail
	goto unreachable
	goto inst478_fail
inst478_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 495:
			goto inst495_alt
		}
	}
	goto fail

	goto unreachable
	goto inst479
inst479: // rune "09AFaf" -> 485
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst485
			}
			goto inst479_fail
		} else if false {
			i += sz
			goto inst485
		}
	}
	goto inst479_fail
	goto unreachable
	goto inst479_fail
inst479_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 495:
			goto inst495_alt
		}
	}
	goto fail

	goto unreachable
	goto inst457
inst457: // rune "09AFaf" -> 459
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst459
			}
			goto inst457_fail
		} else if false {
			i += sz
			goto inst459
		}
	}
	goto inst457_fail
	goto unreachable
	goto inst457_fail
inst457_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 460:
			goto inst460_alt
		}
	}
	goto fail

	goto unreachable
	goto inst456
inst456: // rune "09AFaf" -> 460
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst460
			}
			goto inst456_fail
		} else if false {
			i += sz
			goto inst460
		}
	}
	goto inst456_fail
	goto unreachable
	goto inst456_fail
inst456_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 461:
			goto inst461_alt
		}
	}
	goto fail

	goto unreachable
	goto inst460
inst460: // alt -> 457, 497
	{
		idx := i*319 + 202
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 460, 0})
	goto inst457
inst460_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst497
	}

	goto unreachable
	goto inst455
inst455: // rune "09AFaf" -> 461
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst461
			}
			goto inst455_fail
		} else if false {
			i += sz
			goto inst461
		}
	}
	goto inst455_fail
	goto unreachable
	goto inst455_fail
inst455_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 498:
			goto inst498_alt
		}
	}
	goto fail

	goto unreachable
	goto inst486
inst486: // string ":" -> 487
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst487
		}
	}
	goto inst486_fail
	goto unreachable
	goto inst486_fail
inst486_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 494:
			goto inst494_alt
		}
	}
	goto fail

	goto unreachable
	goto inst497
inst497: // alt -> 462, 772
	{
		idx := i*319 + 203
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 497, 0})
	goto inst462
inst497_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst485
inst485: // alt -> 480, 494
	{
		idx := i*319 + 204
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 485, 0})
	goto inst480
inst485_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst494
	}

	goto unreachable
	goto inst458
inst458: // rune "09AFaf" -> 497
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst497
			}
			goto inst458_fail
		} else if false {
			i += sz
			goto inst497
		}
	}
	goto inst458_fail
	goto unreachable
	goto inst458_fail
inst458_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 459:
			goto inst459_alt
		}
	}
	goto fail

	goto unreachable
	goto inst492
inst492: // alt -> 489, 772
	{
		idx := i*319 + 205
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 492, 0})
	goto inst489
inst492_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst493
inst493: // alt -> 488, 772
	{
		idx := i*319 + 206
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 493, 0})
	goto inst488
inst493_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst487
inst487: // rune "09AFaf" -> 493
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst493
			}
			goto inst487_fail
		} else if false {
			i += sz
			goto inst493
		}
	}
	goto inst487_fail
	goto unreachable
	goto inst487_fail
inst487_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 494:
			goto inst494_alt
		}
	}
	goto fail

	goto unreachable
	goto inst488
inst488: // rune "09AFaf" -> 492
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst492
			}
			goto inst488_fail
		} else if false {
			i += sz
			goto inst492
		}
	}
	goto inst488_fail
	goto unreachable
	goto inst488_fail
inst488_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 493:
			goto inst493_alt
		}
	}
	goto fail

	goto unreachable
	goto inst489
inst489: // rune "09AFaf" -> 491
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst491
			}
			goto inst489_fail
		} else if false {
			i += sz
			goto inst491
		}
	}
	goto inst489_fail
	goto unreachable
	goto inst489_fail
inst489_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 492:
			goto inst492_alt
		}
	}
	goto fail

	goto unreachable
	goto inst490
inst490: // rune "09AFaf" -> 772
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst772
			}
			goto inst490_fail
		} else if false {
			i += sz
			goto inst772
		}
	}
	goto inst490_fail
	goto unreachable
	goto inst490_fail
inst490_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 491:
			goto inst491_alt
		}
	}
	goto fail

	goto unreachable
	goto inst491
inst491: // alt -> 490, 772
	{
		idx := i*319 + 207
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 491, 0})
	goto inst490
inst491_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst494
inst494: // alt -> 486, 772
	{
		idx := i*319 + 208
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 494, 0})
	goto inst486
inst494_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst454
inst454: // string ":" -> 455
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst455
		}
	}
	goto inst454_fail
	goto unreachable
	goto inst454_fail
inst454_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 498:
			goto inst498_alt
		}
	}
	goto fail

	goto unreachable
	goto inst471
inst471: // rune "09AFaf" -> 477
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst477
			}
			goto inst471_fail
		} else if false {
			i += sz
			goto inst477
		}
	}
	goto inst471_fail
	goto unreachable
	goto inst471_fail
inst471_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 496:
			goto inst496_alt
		}
	}
	goto fail

	goto unreachable
	goto inst495
inst495: // alt -> 478, 772
	{
		idx := i*319 + 209
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 495, 0})
	goto inst478
inst495_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst462
inst462: // string ":" -> 463
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst463
		}
	}
	goto inst462_fail
	goto unreachable
	goto inst462_fail
inst462_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 497:
			goto inst497_alt
		}
	}
	goto fail

	goto unreachable
	goto inst475
inst475: // alt -> 474, 495
	{
		idx := i*319 + 210
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 475, 0})
	goto inst474
inst475_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst495
	}

	goto unreachable
	goto inst477
inst477: // alt -> 472, 495
	{
		idx := i*319 + 211
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 477, 0})
	goto inst472
inst477_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst495
	}

	goto unreachable
	goto inst463
inst463: // rune "09AFaf" -> 469
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst469
			}
			goto inst463_fail
		} else if false {
			i += sz
			goto inst469
		}
	}
	goto inst463_fail
	goto unreachable
	goto inst463_fail
inst463_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 497:
			goto inst497_alt
		}
	}
	goto fail

	goto unreachable
	goto inst560
inst560: // alt -> 525, 772
	{
		idx := i*319 + 212
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 560, 0})
	goto inst525
inst560_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst474
inst474: // rune "09AFaf" -> 495
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst495
			}
			goto inst474_fail
		} else if false {
			i += sz
			goto inst495
		}
	}
	goto inst474_fail
	goto unreachable
	goto inst474_fail
inst474_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 475:
			goto inst475_alt
		}
	}
	goto fail

	goto unreachable
	goto inst504
inst504: // rune "09AFaf" -> 506
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst506
			}
			goto inst504_fail
		} else if false {
			i += sz
			goto inst506
		}
	}
	goto inst504_fail
	goto unreachable
	goto inst504_fail
inst504_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 507:
			goto inst507_alt
		}
	}
	goto fail

	goto unreachable
	goto inst484
inst484: // alt -> 481, 494
	{
		idx := i*319 + 213
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 484, 0})
	goto inst481
inst484_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst494
	}

	goto unreachable
	goto inst483
inst483: // alt -> 482, 494
	{
		idx := i*319 + 214
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 483, 0})
	goto inst482
inst483_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst494
	}

	goto unreachable
	goto inst506
inst506: // alt -> 505, 562
	{
		idx := i*319 + 215
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 506, 0})
	goto inst505
inst506_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst562
	}

	goto unreachable
	goto inst480
inst480: // rune "09AFaf" -> 484
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst484
			}
			goto inst480_fail
		} else if false {
			i += sz
			goto inst484
		}
	}
	goto inst480_fail
	goto unreachable
	goto inst480_fail
inst480_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 485:
			goto inst485_alt
		}
	}
	goto fail

	goto unreachable
	goto inst505
inst505: // rune "09AFaf" -> 562
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst562
			}
			goto inst505_fail
		} else if false {
			i += sz
			goto inst562
		}
	}
	goto inst505_fail
	goto unreachable
	goto inst505_fail
inst505_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 506:
			goto inst506_alt
		}
	}
	goto fail

	goto unreachable
	goto inst521
inst521: // rune "09AFaf" -> 560
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst560
			}
			goto inst521_fail
		} else if false {
			i += sz
			goto inst560
		}
	}
	goto inst521_fail
	goto unreachable
	goto inst521_fail
inst521_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 522:
			goto inst522_alt
		}
	}
	goto fail

	goto unreachable
	goto inst482
inst482: // rune "09AFaf" -> 494
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst494
			}
			goto inst482_fail
		} else if false {
			i += sz
			goto inst494
		}
	}
	goto inst482_fail
	goto unreachable
	goto inst482_fail
inst482_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 483:
			goto inst483_alt
		}
	}
	goto fail

	goto unreachable
	goto inst561
inst561: // alt -> 517, 772
	{
		idx := i*319 + 216
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 561, 0})
	goto inst517
inst561_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst510
inst510: // rune "09AFaf" -> 516
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst516
			}
			goto inst510_fail
		} else if false {
			i += sz
			goto inst516
		}
	}
	goto inst510_fail
	goto unreachable
	goto inst510_fail
inst510_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 562:
			goto inst562_alt
		}
	}
	goto fail

	goto unreachable
	goto inst511
inst511: // rune "09AFaf" -> 515
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst515
			}
			goto inst511_fail
		} else if false {
			i += sz
			goto inst515
		}
	}
	goto inst511_fail
	goto unreachable
	goto inst511_fail
inst511_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 516:
			goto inst516_alt
		}
	}
	goto fail

	goto unreachable
	goto inst514
inst514: // alt -> 513, 561
	{
		idx := i*319 + 217
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 514, 0})
	goto inst513
inst514_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst561
	}

	goto unreachable
	goto inst512
inst512: // rune "09AFaf" -> 514
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst514
			}
			goto inst512_fail
		} else if false {
			i += sz
			goto inst514
		}
	}
	goto inst512_fail
	goto unreachable
	goto inst512_fail
inst512_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 515:
			goto inst515_alt
		}
	}
	goto fail

	goto unreachable
	goto inst513
inst513: // rune "09AFaf" -> 561
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst561
			}
			goto inst513_fail
		} else if false {
			i += sz
			goto inst561
		}
	}
	goto inst513_fail
	goto unreachable
	goto inst513_fail
inst513_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 514:
			goto inst514_alt
		}
	}
	goto fail

	goto unreachable
	goto inst515
inst515: // alt -> 512, 561
	{
		idx := i*319 + 218
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 515, 0})
	goto inst512
inst515_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst561
	}

	goto unreachable
	goto inst516
inst516: // alt -> 511, 561
	{
		idx := i*319 + 219
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 516, 0})
	goto inst511
inst516_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst561
	}

	goto unreachable
	goto inst517
inst517: // string ":" -> 518
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst518
		}
	}
	goto inst517_fail
	goto unreachable
	goto inst517_fail
inst517_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 561:
			goto inst561_alt
		}
	}
	goto fail

	goto unreachable
	goto inst518
inst518: // rune "09AFaf" -> 524
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst524
			}
			goto inst518_fail
		} else if false {
			i += sz
			goto inst524
		}
	}
	goto inst518_fail
	goto unreachable
	goto inst518_fail
inst518_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 561:
			goto inst561_alt
		}
	}
	goto fail

	goto unreachable
	goto inst519
inst519: // rune "09AFaf" -> 523
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst523
			}
			goto inst519_fail
		} else if false {
			i += sz
			goto inst523
		}
	}
	goto inst519_fail
	goto unreachable
	goto inst519_fail
inst519_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 524:
			goto inst524_alt
		}
	}
	goto fail

	goto unreachable
	goto inst524
inst524: // alt -> 519, 560
	{
		idx := i*319 + 220
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 524, 0})
	goto inst519
inst524_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst560
	}

	goto unreachable
	goto inst520
inst520: // rune "09AFaf" -> 522
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst522
			}
			goto inst520_fail
		} else if false {
			i += sz
			goto inst522
		}
	}
	goto inst520_fail
	goto unreachable
	goto inst520_fail
inst520_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 523:
			goto inst523_alt
		}
	}
	goto fail

	goto unreachable
	goto inst548
inst548: // alt -> 543, 557
	{
		idx := i*319 + 221
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 548, 0})
	goto inst543
inst548_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst557
	}

	goto unreachable
	goto inst522
inst522: // alt -> 521, 560
	{
		idx := i*319 + 222
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 522, 0})
	goto inst521
inst522_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst560
	}

	goto unreachable
	goto inst523
inst523: // alt -> 520, 560
	{
		idx := i*319 + 223
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 523, 0})
	goto inst520
inst523_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst560
	}

	goto unreachable
	goto inst525
inst525: // string ":" -> 526
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst526
		}
	}
	goto inst525_fail
	goto unreachable
	goto inst525_fail
inst525_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 560:
			goto inst560_alt
		}
	}
	goto fail

	goto unreachable
	goto inst532
inst532: // alt -> 527, 559
	{
		idx := i*319 + 224
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 532, 0})
	goto inst527
inst532_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst559
	}

	goto unreachable
	goto inst526
inst526: // rune "09AFaf" -> 532
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst532
			}
			goto inst526_fail
		} else if false {
			i += sz
			goto inst532
		}
	}
	goto inst526_fail
	goto unreachable
	goto inst526_fail
inst526_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 560:
			goto inst560_alt
		}
	}
	goto fail

	goto unreachable
	goto inst527
inst527: // rune "09AFaf" -> 531
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst531
			}
			goto inst527_fail
		} else if false {
			i += sz
			goto inst531
		}
	}
	goto inst527_fail
	goto unreachable
	goto inst527_fail
inst527_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 532:
			goto inst532_alt
		}
	}
	goto fail

	goto unreachable
	goto inst559
inst559: // alt -> 533, 772
	{
		idx := i*319 + 225
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 559, 0})
	goto inst533
inst559_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst528
inst528: // rune "09AFaf" -> 530
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst530
			}
			goto inst528_fail
		} else if false {
			i += sz
			goto inst530
		}
	}
	goto inst528_fail
	goto unreachable
	goto inst528_fail
inst528_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 531:
			goto inst531_alt
		}
	}
	goto fail

	goto unreachable
	goto inst529
inst529: // rune "09AFaf" -> 559
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst559
			}
			goto inst529_fail
		} else if false {
			i += sz
			goto inst559
		}
	}
	goto inst529_fail
	goto unreachable
	goto inst529_fail
inst529_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 530:
			goto inst530_alt
		}
	}
	goto fail

	goto unreachable
	goto inst530
inst530: // alt -> 529, 559
	{
		idx := i*319 + 226
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 530, 0})
	goto inst529
inst530_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst559
	}

	goto unreachable
	goto inst531
inst531: // alt -> 528, 559
	{
		idx := i*319 + 227
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 531, 0})
	goto inst528
inst531_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst559
	}

	goto unreachable
	goto inst542
inst542: // rune "09AFaf" -> 548
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst548
			}
			goto inst542_fail
		} else if false {
			i += sz
			goto inst548
		}
	}
	goto inst542_fail
	goto unreachable
	goto inst542_fail
inst542_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 558:
			goto inst558_alt
		}
	}
	goto fail

	goto unreachable
	goto inst533
inst533: // string ":" -> 534
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst534
		}
	}
	goto inst533_fail
	goto unreachable
	goto inst533_fail
inst533_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 559:
			goto inst559_alt
		}
	}
	goto fail

	goto unreachable
	goto inst534
inst534: // rune "09AFaf" -> 540
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst540
			}
			goto inst534_fail
		} else if false {
			i += sz
			goto inst540
		}
	}
	goto inst534_fail
	goto unreachable
	goto inst534_fail
inst534_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 559:
			goto inst559_alt
		}
	}
	goto fail

	goto unreachable
	goto inst536
inst536: // rune "09AFaf" -> 538
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst538
			}
			goto inst536_fail
		} else if false {
			i += sz
			goto inst538
		}
	}
	goto inst536_fail
	goto unreachable
	goto inst536_fail
inst536_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 539:
			goto inst539_alt
		}
	}
	goto fail

	goto unreachable
	goto inst554
inst554: // alt -> 553, 772
	{
		idx := i*319 + 228
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 554, 0})
	goto inst553
inst554_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst538
inst538: // alt -> 537, 558
	{
		idx := i*319 + 229
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 538, 0})
	goto inst537
inst538_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst558
	}

	goto unreachable
	goto inst539
inst539: // alt -> 536, 558
	{
		idx := i*319 + 230
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 539, 0})
	goto inst536
inst539_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst558
	}

	goto unreachable
	goto inst540
inst540: // alt -> 535, 558
	{
		idx := i*319 + 231
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 540, 0})
	goto inst535
inst540_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst558
	}

	goto unreachable
	goto inst553
inst553: // rune "09AFaf" -> 772
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst772
			}
			goto inst553_fail
		} else if false {
			i += sz
			goto inst772
		}
	}
	goto inst553_fail
	goto unreachable
	goto inst553_fail
inst553_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 554:
			goto inst554_alt
		}
	}
	goto fail

	goto unreachable
	goto inst541
inst541: // string ":" -> 542
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst542
		}
	}
	goto inst541_fail
	goto unreachable
	goto inst541_fail
inst541_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 558:
			goto inst558_alt
		}
	}
	goto fail

	goto unreachable
	goto inst543
inst543: // rune "09AFaf" -> 547
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst547
			}
			goto inst543_fail
		} else if false {
			i += sz
			goto inst547
		}
	}
	goto inst543_fail
	goto unreachable
	goto inst543_fail
inst543_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 548:
			goto inst548_alt
		}
	}
	goto fail

	goto unreachable
	goto inst544
inst544: // rune "09AFaf" -> 546
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst546
			}
			goto inst544_fail
		} else if false {
			i += sz
			goto inst546
		}
	}
	goto inst544_fail
	goto unreachable
	goto inst544_fail
inst544_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 547:
			goto inst547_alt
		}
	}
	goto fail

	goto unreachable
	goto inst545
inst545: // rune "09AFaf" -> 557
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst557
			}
			goto inst545_fail
		} else if false {
			i += sz
			goto inst557
		}
	}
	goto inst545_fail
	goto unreachable
	goto inst545_fail
inst545_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 546:
			goto inst546_alt
		}
	}
	goto fail

	goto unreachable
	goto inst546
inst546: // alt -> 545, 557
	{
		idx := i*319 + 232
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 546, 0})
	goto inst545
inst546_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst557
	}

	goto unreachable
	goto inst547
inst547: // alt -> 544, 557
	{
		idx := i*319 + 233
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 547, 0})
	goto inst544
inst547_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst557
	}

	goto unreachable
	goto inst507
inst507: // alt -> 504, 562
	{
		idx := i*319 + 234
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 507, 0})
	goto inst504
inst507_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst562
	}

	goto unreachable
	goto inst556
inst556: // alt -> 551, 772
	{
		idx := i*319 + 235
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 556, 0})
	goto inst551
inst556_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst535
inst535: // rune "09AFaf" -> 539
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst539
			}
			goto inst535_fail
		} else if false {
			i += sz
			goto inst539
		}
	}
	goto inst535_fail
	goto unreachable
	goto inst535_fail
inst535_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 540:
			goto inst540_alt
		}
	}
	goto fail

	goto unreachable
	goto inst550
inst550: // rune "09AFaf" -> 556
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst556
			}
			goto inst550_fail
		} else if false {
			i += sz
			goto inst556
		}
	}
	goto inst550_fail
	goto unreachable
	goto inst550_fail
inst550_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 557:
			goto inst557_alt
		}
	}
	goto fail

	goto unreachable
	goto inst551
inst551: // rune "09AFaf" -> 555
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst555
			}
			goto inst551_fail
		} else if false {
			i += sz
			goto inst555
		}
	}
	goto inst551_fail
	goto unreachable
	goto inst551_fail
inst551_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 556:
			goto inst556_alt
		}
	}
	goto fail

	goto unreachable
	goto inst552
inst552: // rune "09AFaf" -> 554
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst554
			}
			goto inst552_fail
		} else if false {
			i += sz
			goto inst554
		}
	}
	goto inst552_fail
	goto unreachable
	goto inst552_fail
inst552_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 555:
			goto inst555_alt
		}
	}
	goto fail

	goto unreachable
	goto inst555
inst555: // alt -> 552, 772
	{
		idx := i*319 + 236
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 555, 0})
	goto inst552
inst555_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst549
inst549: // string ":" -> 550
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst550
		}
	}
	goto inst549_fail
	goto unreachable
	goto inst549_fail
inst549_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 557:
			goto inst557_alt
		}
	}
	goto fail

	goto unreachable
	goto inst557
inst557: // alt -> 549, 772
	{
		idx := i*319 + 237
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 557, 0})
	goto inst549
inst557_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst558
inst558: // alt -> 541, 772
	{
		idx := i*319 + 238
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 558, 0})
	goto inst541
inst558_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst537
inst537: // rune "09AFaf" -> 558
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst558
			}
			goto inst537_fail
		} else if false {
			i += sz
			goto inst558
		}
	}
	goto inst537_fail
	goto unreachable
	goto inst537_fail
inst537_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 538:
			goto inst538_alt
		}
	}
	goto fail

	goto unreachable
	goto inst562
inst562: // alt -> 509, 772
	{
		idx := i*319 + 239
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 562, 0})
	goto inst509
inst562_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst772
	}

	goto unreachable
	goto inst481
inst481: // rune "09AFaf" -> 483
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst483
			}
			goto inst481_fail
		} else if false {
			i += sz
			goto inst483
		}
	}
	goto inst481_fail
	goto unreachable
	goto inst481_fail
inst481_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 484:
			goto inst484_alt
		}
	}
	goto fail

	goto unreachable
	goto inst609
inst609: // alt -> 580, 611
	{
		idx := i*319 + 240
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 609, 0})
	goto inst580
inst609_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst611
	}

	goto unreachable
	goto inst563
inst563: // string ":" -> 772
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst772
		}
	}
	goto inst563_fail
	goto unreachable
	goto inst563_fail
inst563_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 614:
			goto inst614_alt
		}
	}
	goto fail

	goto unreachable
	goto inst564
inst564: // alt -> 501, 563
	{
		idx := i*319 + 241
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 564, 0})
	goto inst501
inst564_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst563
	}

	goto unreachable
	goto inst565
inst565: // alt -> 499, 500
	{
		idx := i*319 + 242
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 565, 0})
	goto inst499
inst565_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst500
	}

	goto unreachable
	goto inst500
inst500: // string ":" -> 564
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst564
		}
	}
	goto inst500_fail
	goto unreachable
	goto inst500_fail
inst500_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 614:
			goto inst614_alt
		}
	}
	goto fail

	// inst568 unreacheable

	goto unreachable
	goto inst503
inst503: // rune "09AFaf" -> 507
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst507
			}
			goto inst503_fail
		} else if false {
			i += sz
			goto inst507
		}
	}
	goto inst503_fail
	goto unreachable
	goto inst503_fail
inst503_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 508:
			goto inst508_alt
		}
	}
	goto fail

	// inst616 unreacheable

	goto unreachable
	goto inst509
inst509: // string ":" -> 510
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst510
		}
	}
	goto inst509_fail
	goto unreachable
	goto inst509_fail
inst509_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 562:
			goto inst562_alt
		}
	}
	goto fail

	goto unreachable
	goto inst571
inst571: // string ":" -> 579
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst579
		}
	}
	goto inst571_fail
	goto unreachable
	goto inst571_fail
inst571_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 610:
			goto inst610_alt
		}
	}
	goto fail

	goto unreachable
	goto inst572
inst572: // rune "09AFaf" -> 578
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst578
			}
			goto inst572_fail
		} else if false {
			i += sz
			goto inst578
		}
	}
	goto inst572_fail
	goto unreachable
	goto inst572_fail
inst572_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 579:
			goto inst579_alt
		}
	}
	goto fail

	goto unreachable
	goto inst573
inst573: // rune "09AFaf" -> 577
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst577
			}
			goto inst573_fail
		} else if false {
			i += sz
			goto inst577
		}
	}
	goto inst573_fail
	goto unreachable
	goto inst573_fail
inst573_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 578:
			goto inst578_alt
		}
	}
	goto fail

	goto unreachable
	goto inst578
inst578: // alt -> 573, 609
	{
		idx := i*319 + 243
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 578, 0})
	goto inst573
inst578_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst609
	}

	goto unreachable
	goto inst574
inst574: // rune "09AFaf" -> 576
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst576
			}
			goto inst574_fail
		} else if false {
			i += sz
			goto inst576
		}
	}
	goto inst574_fail
	goto unreachable
	goto inst574_fail
inst574_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 577:
			goto inst577_alt
		}
	}
	goto fail

	goto unreachable
	goto inst575
inst575: // rune "09AFaf" -> 609
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst609
			}
			goto inst575_fail
		} else if false {
			i += sz
			goto inst609
		}
	}
	goto inst575_fail
	goto unreachable
	goto inst575_fail
inst575_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 576:
			goto inst576_alt
		}
	}
	goto fail

	goto unreachable
	goto inst576
inst576: // alt -> 575, 609
	{
		idx := i*319 + 244
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 576, 0})
	goto inst575
inst576_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst609
	}

	goto unreachable
	goto inst577
inst577: // alt -> 574, 609
	{
		idx := i*319 + 245
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 577, 0})
	goto inst574
inst577_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst609
	}

	goto unreachable
	goto inst579
inst579: // alt -> 572, 609
	{
		idx := i*319 + 246
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 579, 0})
	goto inst572
inst579_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst609
	}

	goto unreachable
	goto inst580
inst580: // string ":" -> 588
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst588
		}
	}
	goto inst580_fail
	goto unreachable
	goto inst580_fail
inst580_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 609:
			goto inst609_alt
		}
	}
	goto fail

	goto unreachable
	goto inst581
inst581: // rune "09AFaf" -> 587
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst587
			}
			goto inst581_fail
		} else if false {
			i += sz
			goto inst587
		}
	}
	goto inst581_fail
	goto unreachable
	goto inst581_fail
inst581_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 588:
			goto inst588_alt
		}
	}
	goto fail

	goto unreachable
	goto inst582
inst582: // rune "09AFaf" -> 586
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst586
			}
			goto inst582_fail
		} else if false {
			i += sz
			goto inst586
		}
	}
	goto inst582_fail
	goto unreachable
	goto inst582_fail
inst582_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 587:
			goto inst587_alt
		}
	}
	goto fail

	goto unreachable
	goto inst586
inst586: // alt -> 583, 608
	{
		idx := i*319 + 247
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 586, 0})
	goto inst583
inst586_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst608
	}

	goto unreachable
	goto inst590
inst590: // rune "09AFaf" -> 596
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst596
			}
			goto inst590_fail
		} else if false {
			i += sz
			goto inst596
		}
	}
	goto inst590_fail
	goto unreachable
	goto inst590_fail
inst590_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 597:
			goto inst597_alt
		}
	}
	goto fail

	goto unreachable
	goto inst584
inst584: // rune "09AFaf" -> 608
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst608
			}
			goto inst584_fail
		} else if false {
			i += sz
			goto inst608
		}
	}
	goto inst584_fail
	goto unreachable
	goto inst584_fail
inst584_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 585:
			goto inst585_alt
		}
	}
	goto fail

	goto unreachable
	goto inst585
inst585: // alt -> 584, 608
	{
		idx := i*319 + 248
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 585, 0})
	goto inst584
inst585_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst608
	}

	goto unreachable
	goto inst583
inst583: // rune "09AFaf" -> 585
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst585
			}
			goto inst583_fail
		} else if false {
			i += sz
			goto inst585
		}
	}
	goto inst583_fail
	goto unreachable
	goto inst583_fail
inst583_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 586:
			goto inst586_alt
		}
	}
	goto fail

	goto unreachable
	goto inst587
inst587: // alt -> 582, 608
	{
		idx := i*319 + 249
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 587, 0})
	goto inst582
inst587_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst608
	}

	goto unreachable
	goto inst588
inst588: // alt -> 581, 608
	{
		idx := i*319 + 250
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 588, 0})
	goto inst581
inst588_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst608
	}

	goto unreachable
	goto inst589
inst589: // string ":" -> 597
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst597
		}
	}
	goto inst589_fail
	goto unreachable
	goto inst589_fail
inst589_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 608:
			goto inst608_alt
		}
	}
	goto fail

	goto unreachable
	goto inst591
inst591: // rune "09AFaf" -> 595
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst595
			}
			goto inst591_fail
		} else if false {
			i += sz
			goto inst595
		}
	}
	goto inst591_fail
	goto unreachable
	goto inst591_fail
inst591_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 596:
			goto inst596_alt
		}
	}
	goto fail

	goto unreachable
	goto inst600
inst600: // rune "09AFaf" -> 604
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst604
			}
			goto inst600_fail
		} else if false {
			i += sz
			goto inst604
		}
	}
	goto inst600_fail
	goto unreachable
	goto inst600_fail
inst600_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 605:
			goto inst605_alt
		}
	}
	goto fail

	goto unreachable
	goto inst592
inst592: // rune "09AFaf" -> 594
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst594
			}
			goto inst592_fail
		} else if false {
			i += sz
			goto inst594
		}
	}
	goto inst592_fail
	goto unreachable
	goto inst592_fail
inst592_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 595:
			goto inst595_alt
		}
	}
	goto fail

	// inst569 unreacheable

	goto unreachable
	goto inst601
inst601: // rune "09AFaf" -> 603
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst603
			}
			goto inst601_fail
		} else if false {
			i += sz
			goto inst603
		}
	}
	goto inst601_fail
	goto unreachable
	goto inst601_fail
inst601_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 604:
			goto inst604_alt
		}
	}
	goto fail

	goto unreachable
	goto inst595
inst595: // alt -> 592, 607
	{
		idx := i*319 + 251
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 595, 0})
	goto inst592
inst595_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst607
	}

	goto unreachable
	goto inst596
inst596: // alt -> 591, 607
	{
		idx := i*319 + 252
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 596, 0})
	goto inst591
inst596_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst607
	}

	goto unreachable
	goto inst597
inst597: // alt -> 590, 607
	{
		idx := i*319 + 253
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 597, 0})
	goto inst590
inst597_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst607
	}

	goto unreachable
	goto inst598
inst598: // string ":" -> 606
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst606
		}
	}
	goto inst598_fail
	goto unreachable
	goto inst598_fail
inst598_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 607:
			goto inst607_alt
		}
	}
	goto fail

	goto unreachable
	goto inst599
inst599: // rune "09AFaf" -> 605
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst605
			}
			goto inst599_fail
		} else if false {
			i += sz
			goto inst605
		}
	}
	goto inst599_fail
	goto unreachable
	goto inst599_fail
inst599_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 606:
			goto inst606_alt
		}
	}
	goto fail

	goto unreachable
	goto inst608
inst608: // alt -> 589, 611
	{
		idx := i*319 + 254
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 608, 0})
	goto inst589
inst608_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst611
	}

	goto unreachable
	goto inst501
inst501: // string ":" -> 502
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst502
		}
	}
	goto inst501_fail
	goto unreachable
	goto inst501_fail
inst501_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 564:
			goto inst564_alt
		}
	}
	goto fail

	goto unreachable
	goto inst602
inst602: // rune "09AFaf" -> 611
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst611
			}
			goto inst602_fail
		} else if false {
			i += sz
			goto inst611
		}
	}
	goto inst602_fail
	goto unreachable
	goto inst602_fail
inst602_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 603:
			goto inst603_alt
		}
	}
	goto fail

	goto unreachable
	goto inst603
inst603: // alt -> 602, 611
	{
		idx := i*319 + 255
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 603, 0})
	goto inst602
inst603_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst611
	}

	goto unreachable
	goto inst604
inst604: // alt -> 601, 611
	{
		idx := i*319 + 256
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 604, 0})
	goto inst601
inst604_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst611
	}

	goto unreachable
	goto inst605
inst605: // alt -> 600, 611
	{
		idx := i*319 + 257
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 605, 0})
	goto inst600
inst605_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst611
	}

	goto unreachable
	goto inst606
inst606: // alt -> 599, 611
	{
		idx := i*319 + 258
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 606, 0})
	goto inst599
inst606_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst611
	}

	goto unreachable
	goto inst607
inst607: // alt -> 598, 611
	{
		idx := i*319 + 259
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 607, 0})
	goto inst598
inst607_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst611
	}

	goto unreachable
	goto inst594
inst594: // alt -> 593, 607
	{
		idx := i*319 + 260
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 594, 0})
	goto inst593
inst594_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst607
	}

	goto unreachable
	goto inst610
inst610: // alt -> 571, 611
	{
		idx := i*319 + 261
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 610, 0})
	goto inst571
inst610_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst611
	}

	goto unreachable
	goto inst611
inst611: // string "%" -> 612
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "%" {
			i += 1
			goto inst612
		}
	}
	goto inst611_fail
	goto unreachable
	goto inst611_fail
inst611_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 576:
			goto inst576_alt
		case 577:
			goto inst577_alt
		case 578:
			goto inst578_alt
		case 579:
			goto inst579_alt
		case 585:
			goto inst585_alt
		case 586:
			goto inst586_alt
		case 587:
			goto inst587_alt
		case 588:
			goto inst588_alt
		case 594:
			goto inst594_alt
		case 595:
			goto inst595_alt
		case 596:
			goto inst596_alt
		case 597:
			goto inst597_alt
		case 603:
			goto inst603_alt
		case 604:
			goto inst604_alt
		case 605:
			goto inst605_alt
		case 606:
			goto inst606_alt
		case 607:
			goto inst607_alt
		case 608:
			goto inst608_alt
		case 609:
			goto inst609_alt
		case 610:
			goto inst610_alt
		case 683:
			goto inst683_alt
		}
	}
	goto fail

	goto unreachable
	goto inst612
inst612: // rune "09AZaz" -> 613
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03\xfe\xff\xff\a\xfe\xff\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst613
			}
			goto inst612_fail
		} else if false {
			i += sz
			goto inst613
		}
	}
	goto inst612_fail
	goto unreachable
	goto inst612_fail
inst612_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 576:
			goto inst576_alt
		case 577:
			goto inst577_alt
		case 578:
			goto inst578_alt
		case 579:
			goto inst579_alt
		case 585:
			goto inst585_alt
		case 586:
			goto inst586_alt
		case 587:
			goto inst587_alt
		case 588:
			goto inst588_alt
		case 594:
			goto inst594_alt
		case 595:
			goto inst595_alt
		case 596:
			goto inst596_alt
		case 597:
			goto inst597_alt
		case 603:
			goto inst603_alt
		case 604:
			goto inst604_alt
		case 605:
			goto inst605_alt
		case 606:
			goto inst606_alt
		case 607:
			goto inst607_alt
		case 608:
			goto inst608_alt
		case 609:
			goto inst609_alt
		case 610:
			goto inst610_alt
		case 683:
			goto inst683_alt
		}
	}
	goto fail

	goto unreachable
	goto inst613
inst613: // alt -> 612, 772
	{
		idx := i*319 + 262
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 613 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst612
		}
	}
	bt = append(bt, stateMatch{c, i, 613, 0})
	goto inst612
inst613_alt:
	{
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst772
	}

	goto unreachable
	goto inst617
inst617: // string "ffff" -> 629
	if i >= 0 && i+4 <= len(r) {
		if r[i:i+4] == "ffff" {
			i += 4
			goto inst629
		}
	}
	goto inst617_fail
	goto unreachable
	goto inst617_fail
inst617_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 631:
			goto inst631_alt
		}
	}
	goto fail

	goto unreachable
	goto inst637
inst637: // string "1" -> 639
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "1" {
			i += 1
			goto inst639
		}
	}
	goto inst637_fail
	goto unreachable
	goto inst637_fail
inst637_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 638:
			goto inst638_alt
		}
	}
	goto fail

	goto unreachable
	goto inst614
inst614: // alt -> 565, 566
	{
		idx := i*319 + 263
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 614, 0})
	goto inst565
inst614_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst566
	}

	goto unreachable
	goto inst615
inst615: // string "::" -> 631
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "::" {
			i += 2
			goto inst631
		}
	}
	goto inst615_fail
	goto unreachable
	goto inst615_fail
inst615_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 771:
			goto inst771_alt
		}
	}
	goto fail

	goto unreachable
	goto inst624
inst624: // string "0" -> 626
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "0" {
			i += 1
			goto inst626
		}
	}
	goto inst624_fail
	goto unreachable
	goto inst624_fail
inst624_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 627:
			goto inst627_alt
		}
	}
	goto fail

	// inst618 unreacheable

	goto unreachable
	goto inst621
inst621: // string ":0" -> 628
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == ":0" {
			i += 2
			goto inst628
		}
	}
	goto inst621_fail
	goto unreachable
	goto inst621_fail
inst621_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 629:
			goto inst629_alt
		}
	}
	goto fail

	// inst622 unreacheable

	goto unreachable
	goto inst643
inst643: // alt -> 632, 641
	{
		idx := i*319 + 264
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 643, 0})
	goto inst632
inst643_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst641
	}

	goto unreachable
	goto inst623
inst623: // string "0" -> 627
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "0" {
			i += 1
			goto inst627
		}
	}
	goto inst623_fail
	goto unreachable
	goto inst623_fail
inst623_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 628:
			goto inst628_alt
		}
	}
	goto fail

	goto unreachable
	goto inst625
inst625: // string "0:" -> 643
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "0:" {
			i += 2
			goto inst643
		}
	}
	goto inst625_fail
	goto unreachable
	goto inst625_fail
inst625_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 626:
			goto inst626_alt
		}
	}
	goto fail

	// inst619 unreacheable

	goto unreachable
	goto inst630
inst630: // string ":" -> 643
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst643
		}
	}
	goto inst630_fail
	goto unreachable
	goto inst630_fail
inst630_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 627:
			goto inst627_alt
		case 628:
			goto inst628_alt
		case 629:
			goto inst629_alt
		case 631:
			goto inst631_alt
		}
	}
	goto fail

	goto unreachable
	goto inst626
inst626: // alt -> 625, 630
	{
		idx := i*319 + 265
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 626, 0})
	goto inst625
inst626_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst630
	}

	goto unreachable
	goto inst627
inst627: // alt -> 624, 630
	{
		idx := i*319 + 266
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 627, 0})
	goto inst624
inst627_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst630
	}

	goto unreachable
	goto inst628
inst628: // alt -> 623, 630
	{
		idx := i*319 + 267
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 628, 0})
	goto inst623
inst628_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst630
	}

	goto unreachable
	goto inst629
inst629: // alt -> 621, 630
	{
		idx := i*319 + 268
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 629, 0})
	goto inst621
inst629_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst630
	}

	goto unreachable
	goto inst631
inst631: // alt -> 617, 643
	{
		idx := i*319 + 269
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 631, 0})
	goto inst617
inst631_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst643
	}

	goto unreachable
	goto inst632
inst632: // string "25" -> 634
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "25" {
			i += 2
			goto inst634
		}
	}
	goto inst632_fail
	goto unreachable
	goto inst632_fail
inst632_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 643:
			goto inst643_alt
		}
	}
	goto fail

	// inst633 unreacheable

	goto unreachable
	goto inst635
inst635: // string "2" -> 636
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "2" {
			i += 1
			goto inst636
		}
	}
	goto inst635_fail
	goto unreachable
	goto inst635_fail
inst635_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 640:
			goto inst640_alt
		}
	}
	goto fail

	goto unreachable
	goto inst566
inst566: // string "fe80:" -> 610
	if i >= 0 && i+5 <= len(r) {
		if r[i:i+5] == "fe80:" {
			i += 5
			goto inst610
		}
	}
	goto inst566_fail
	goto unreachable
	goto inst566_fail
inst566_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 683:
			goto inst683_alt
		}
	}
	goto fail

	goto unreachable
	goto inst634
inst634: // rune "05" -> 644
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 53) {
			i += sz
			goto inst644
		}
	}
	goto inst634_fail
	goto unreachable
	goto inst634_fail
inst634_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 643:
			goto inst643_alt
		}
	}
	goto fail

	goto unreachable
	goto inst636
inst636: // rune "04" -> 642
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 52) {
			i += sz
			goto inst642
		}
	}
	goto inst636_fail
	goto unreachable
	goto inst636_fail
inst636_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 640:
			goto inst640_alt
		}
	}
	goto fail

	// inst570 unreacheable

	goto unreachable
	goto inst502
inst502: // rune "09AFaf" -> 508
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst508
			}
			goto inst502_fail
		} else if false {
			i += sz
			goto inst508
		}
	}
	goto inst502_fail
	goto unreachable
	goto inst502_fail
inst502_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 564:
			goto inst564_alt
		}
	}
	goto fail

	goto unreachable
	goto inst683
inst683: // alt -> 614, 615
	{
		idx := i*319 + 270
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 683, 0})
	goto inst614
inst683_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst615
	}

	goto unreachable
	goto inst639
inst639: // rune "09" -> 642
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst642
		}
	}
	goto inst639_fail
	goto unreachable
	goto inst639_fail
inst639_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 638:
			goto inst638_alt
		case 641:
			goto inst641_alt
		}
	}
	goto fail

	goto unreachable
	goto inst640
inst640: // alt -> 635, 638
	{
		idx := i*319 + 271
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 640, 0})
	goto inst635
inst640_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst638
	}

	goto unreachable
	goto inst641
inst641: // alt -> 640, 642
	{
		idx := i*319 + 272
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 641, 0})
	goto inst640
inst641_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst642
	}

	goto unreachable
	goto inst642
inst642: // rune "09" -> 644
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst644
		}
	}
	goto inst642_fail
	goto unreachable
	goto inst642_fail
inst642_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 626:
			goto inst626_alt
		case 627:
			goto inst627_alt
		case 628:
			goto inst628_alt
		case 629:
			goto inst629_alt
		case 631:
			goto inst631_alt
		case 638:
			goto inst638_alt
		case 640:
			goto inst640_alt
		case 641:
			goto inst641_alt
		case 771:
			goto inst771_alt
		}
	}
	goto fail

	goto unreachable
	goto inst645
inst645: // string "25" -> 647
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "25" {
			i += 2
			goto inst647
		}
	}
	goto inst645_fail
	goto unreachable
	goto inst645_fail
inst645_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 656:
			goto inst656_alt
		}
	}
	goto fail

	goto unreachable
	goto inst644
inst644: // string "." -> 656
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "." {
			i += 1
			goto inst656
		}
	}
	goto inst644_fail
	goto unreachable
	goto inst644_fail
inst644_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 626:
			goto inst626_alt
		case 627:
			goto inst627_alt
		case 628:
			goto inst628_alt
		case 629:
			goto inst629_alt
		case 631:
			goto inst631_alt
		case 638:
			goto inst638_alt
		case 640:
			goto inst640_alt
		case 641:
			goto inst641_alt
		case 643:
			goto inst643_alt
		case 771:
			goto inst771_alt
		}
	}
	goto fail

	// inst646 unreacheable

	goto unreachable
	goto inst673
inst673: // rune "05" -> 772
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 53) {
			i += sz
			goto inst772
		}
	}
	goto inst673_fail
	goto unreachable
	goto inst673_fail
inst673_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 682:
			goto inst682_alt
		}
	}
	goto fail

	goto unreachable
	goto inst638
inst638: // alt -> 637, 639
	{
		idx := i*319 + 273
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 638, 0})
	goto inst637
inst638_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst639
	}

	goto unreachable
	goto inst649
inst649: // rune "04" -> 655
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 52) {
			i += sz
			goto inst655
		}
	}
	goto inst649_fail
	goto unreachable
	goto inst649_fail
inst649_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 653:
			goto inst653_alt
		}
	}
	goto fail

	goto unreachable
	goto inst658
inst658: // string "25" -> 660
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "25" {
			i += 2
			goto inst660
		}
	}
	goto inst658_fail
	goto unreachable
	goto inst658_fail
inst658_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 669:
			goto inst669_alt
		}
	}
	goto fail

	goto unreachable
	goto inst650
inst650: // string "1" -> 652
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "1" {
			i += 1
			goto inst652
		}
	}
	goto inst650_fail
	goto unreachable
	goto inst650_fail
inst650_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 651:
			goto inst651_alt
		}
	}
	goto fail

	goto unreachable
	goto inst647
inst647: // rune "05" -> 657
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 53) {
			i += sz
			goto inst657
		}
	}
	goto inst647_fail
	goto unreachable
	goto inst647_fail
inst647_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 656:
			goto inst656_alt
		}
	}
	goto fail

	goto unreachable
	goto inst651
inst651: // alt -> 650, 652
	{
		idx := i*319 + 274
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 651, 0})
	goto inst650
inst651_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst652
	}

	goto unreachable
	goto inst652
inst652: // rune "09" -> 655
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst655
		}
	}
	goto inst652_fail
	goto unreachable
	goto inst652_fail
inst652_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 651:
			goto inst651_alt
		case 654:
			goto inst654_alt
		}
	}
	goto fail

	goto unreachable
	goto inst653
inst653: // alt -> 648, 651
	{
		idx := i*319 + 275
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 653, 0})
	goto inst648
inst653_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst651
	}

	goto unreachable
	goto inst654
inst654: // alt -> 653, 655
	{
		idx := i*319 + 276
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 654, 0})
	goto inst653
inst654_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst655
	}

	goto unreachable
	goto inst655
inst655: // rune "09" -> 657
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst657
		}
	}
	goto inst655_fail
	goto unreachable
	goto inst655_fail
inst655_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 626:
			goto inst626_alt
		case 627:
			goto inst627_alt
		case 628:
			goto inst628_alt
		case 629:
			goto inst629_alt
		case 631:
			goto inst631_alt
		case 638:
			goto inst638_alt
		case 640:
			goto inst640_alt
		case 641:
			goto inst641_alt
		case 643:
			goto inst643_alt
		case 651:
			goto inst651_alt
		case 653:
			goto inst653_alt
		case 654:
			goto inst654_alt
		case 771:
			goto inst771_alt
		}
	}
	goto fail

	goto unreachable
	goto inst656
inst656: // alt -> 645, 654
	{
		idx := i*319 + 277
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 656, 0})
	goto inst645
inst656_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst654
	}

	goto unreachable
	goto inst648
inst648: // string "2" -> 649
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "2" {
			i += 1
			goto inst649
		}
	}
	goto inst648_fail
	goto unreachable
	goto inst648_fail
inst648_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 653:
			goto inst653_alt
		}
	}
	goto fail

	goto unreachable
	goto inst508
inst508: // alt -> 503, 562
	{
		idx := i*319 + 278
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 508, 0})
	goto inst503
inst508_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst562
	}

	goto unreachable
	goto inst660
inst660: // rune "05" -> 670
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 53) {
			i += sz
			goto inst670
		}
	}
	goto inst660_fail
	goto unreachable
	goto inst660_fail
inst660_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 669:
			goto inst669_alt
		}
	}
	goto fail

	goto unreachable
	goto inst661
inst661: // string "2" -> 662
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "2" {
			i += 1
			goto inst662
		}
	}
	goto inst661_fail
	goto unreachable
	goto inst661_fail
inst661_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 666:
			goto inst666_alt
		}
	}
	goto fail

	goto unreachable
	goto inst670
inst670: // string "." -> 682
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "." {
			i += 1
			goto inst682
		}
	}
	goto inst670_fail
	goto unreachable
	goto inst670_fail
inst670_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 626:
			goto inst626_alt
		case 627:
			goto inst627_alt
		case 628:
			goto inst628_alt
		case 629:
			goto inst629_alt
		case 631:
			goto inst631_alt
		case 638:
			goto inst638_alt
		case 640:
			goto inst640_alt
		case 641:
			goto inst641_alt
		case 643:
			goto inst643_alt
		case 651:
			goto inst651_alt
		case 653:
			goto inst653_alt
		case 654:
			goto inst654_alt
		case 656:
			goto inst656_alt
		case 664:
			goto inst664_alt
		case 666:
			goto inst666_alt
		case 667:
			goto inst667_alt
		case 669:
			goto inst669_alt
		case 771:
			goto inst771_alt
		}
	}
	goto fail

	goto unreachable
	goto inst662
inst662: // rune "04" -> 668
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 52) {
			i += sz
			goto inst668
		}
	}
	goto inst662_fail
	goto unreachable
	goto inst662_fail
inst662_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 666:
			goto inst666_alt
		}
	}
	goto fail

	goto unreachable
	goto inst663
inst663: // string "1" -> 665
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "1" {
			i += 1
			goto inst665
		}
	}
	goto inst663_fail
	goto unreachable
	goto inst663_fail
inst663_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 664:
			goto inst664_alt
		}
	}
	goto fail

	goto unreachable
	goto inst664
inst664: // alt -> 663, 665
	{
		idx := i*319 + 279
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 664, 0})
	goto inst663
inst664_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst665
	}

	goto unreachable
	goto inst665
inst665: // rune "09" -> 668
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst668
		}
	}
	goto inst665_fail
	goto unreachable
	goto inst665_fail
inst665_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 664:
			goto inst664_alt
		case 667:
			goto inst667_alt
		}
	}
	goto fail

	goto unreachable
	goto inst666
inst666: // alt -> 661, 664
	{
		idx := i*319 + 280
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 666, 0})
	goto inst661
inst666_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst664
	}

	goto unreachable
	goto inst667
inst667: // alt -> 666, 668
	{
		idx := i*319 + 281
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 667, 0})
	goto inst666
inst667_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst668
	}

	goto unreachable
	goto inst668
inst668: // rune "09" -> 670
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst670
		}
	}
	goto inst668_fail
	goto unreachable
	goto inst668_fail
inst668_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 626:
			goto inst626_alt
		case 627:
			goto inst627_alt
		case 628:
			goto inst628_alt
		case 629:
			goto inst629_alt
		case 631:
			goto inst631_alt
		case 638:
			goto inst638_alt
		case 640:
			goto inst640_alt
		case 641:
			goto inst641_alt
		case 643:
			goto inst643_alt
		case 651:
			goto inst651_alt
		case 653:
			goto inst653_alt
		case 654:
			goto inst654_alt
		case 656:
			goto inst656_alt
		case 664:
			goto inst664_alt
		case 666:
			goto inst666_alt
		case 667:
			goto inst667_alt
		case 771:
			goto inst771_alt
		}
	}
	goto fail

	goto unreachable
	goto inst669
inst669: // alt -> 658, 667
	{
		idx := i*319 + 282
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 669, 0})
	goto inst658
inst669_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst667
	}

	goto unreachable
	goto inst671
inst671: // string "25" -> 673
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "25" {
			i += 2
			goto inst673
		}
	}
	goto inst671_fail
	goto unreachable
	goto inst671_fail
inst671_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 682:
			goto inst682_alt
		}
	}
	goto fail

	goto unreachable
	goto inst682
inst682: // alt -> 671, 680
	{
		idx := i*319 + 283
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 682, 0})
	goto inst671
inst682_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst680
	}

	// inst672 unreacheable

	goto unreachable
	goto inst674
inst674: // string "2" -> 675
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "2" {
			i += 1
			goto inst675
		}
	}
	goto inst674_fail
	goto unreachable
	goto inst674_fail
inst674_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 679:
			goto inst679_alt
		}
	}
	goto fail

	goto unreachable
	goto inst593
inst593: // rune "09AFaf" -> 607
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst607
			}
			goto inst593_fail
		} else if false {
			i += sz
			goto inst607
		}
	}
	goto inst593_fail
	goto unreachable
	goto inst593_fail
inst593_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 594:
			goto inst594_alt
		}
	}
	goto fail

	goto unreachable
	goto inst675
inst675: // rune "04" -> 681
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 52) {
			i += sz
			goto inst681
		}
	}
	goto inst675_fail
	goto unreachable
	goto inst675_fail
inst675_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 679:
			goto inst679_alt
		}
	}
	goto fail

	goto unreachable
	goto inst676
inst676: // string "1" -> 678
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "1" {
			i += 1
			goto inst678
		}
	}
	goto inst676_fail
	goto unreachable
	goto inst676_fail
inst676_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 677:
			goto inst677_alt
		}
	}
	goto fail

	goto unreachable
	goto inst677
inst677: // alt -> 676, 678
	{
		idx := i*319 + 284
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 677, 0})
	goto inst676
inst677_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst678
	}

	goto unreachable
	goto inst678
inst678: // rune "09" -> 681
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst681
		}
	}
	goto inst678_fail
	goto unreachable
	goto inst678_fail
inst678_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 677:
			goto inst677_alt
		case 680:
			goto inst680_alt
		}
	}
	goto fail

	goto unreachable
	goto inst679
inst679: // alt -> 674, 677
	{
		idx := i*319 + 285
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 679, 0})
	goto inst674
inst679_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst677
	}

	goto unreachable
	goto inst680
inst680: // alt -> 679, 681
	{
		idx := i*319 + 286
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 680, 0})
	goto inst679
inst680_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst681
	}

	goto unreachable
	goto inst681
inst681: // rune "09" -> 772
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst772
		}
	}
	goto inst681_fail
	goto unreachable
	goto inst681_fail
inst681_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 626:
			goto inst626_alt
		case 627:
			goto inst627_alt
		case 628:
			goto inst628_alt
		case 629:
			goto inst629_alt
		case 631:
			goto inst631_alt
		case 638:
			goto inst638_alt
		case 640:
			goto inst640_alt
		case 641:
			goto inst641_alt
		case 643:
			goto inst643_alt
		case 651:
			goto inst651_alt
		case 653:
			goto inst653_alt
		case 654:
			goto inst654_alt
		case 656:
			goto inst656_alt
		case 664:
			goto inst664_alt
		case 666:
			goto inst666_alt
		case 667:
			goto inst667_alt
		case 669:
			goto inst669_alt
		case 677:
			goto inst677_alt
		case 679:
			goto inst679_alt
		case 680:
			goto inst680_alt
		case 771:
			goto inst771_alt
		}
	}
	goto fail

	// inst760 unreacheable

	goto unreachable
	goto inst657
inst657: // string "." -> 669
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "." {
			i += 1
			goto inst669
		}
	}
	goto inst657_fail
	goto unreachable
	goto inst657_fail
inst657_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 626:
			goto inst626_alt
		case 627:
			goto inst627_alt
		case 628:
			goto inst628_alt
		case 629:
			goto inst629_alt
		case 631:
			goto inst631_alt
		case 638:
			goto inst638_alt
		case 640:
			goto inst640_alt
		case 641:
			goto inst641_alt
		case 643:
			goto inst643_alt
		case 651:
			goto inst651_alt
		case 653:
			goto inst653_alt
		case 654:
			goto inst654_alt
		case 656:
			goto inst656_alt
		case 771:
			goto inst771_alt
		}
	}
	goto fail

	goto unreachable
	goto inst691
inst691: // string ":" -> 718
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst718
		}
	}
	goto inst691_fail
	goto unreachable
	goto inst691_fail
inst691_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 688:
			goto inst688_alt
		case 689:
			goto inst689_alt
		case 690:
			goto inst690_alt
		}
	}
	goto fail

	goto unreachable
	goto inst685
inst685: // rune "09AFaf" -> 689
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst689
			}
			goto inst685_fail
		} else if false {
			i += sz
			goto inst689
		}
	}
	goto inst685_fail
	goto unreachable
	goto inst685_fail
inst685_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 690:
			goto inst690_alt
		}
	}
	goto fail

	goto unreachable
	goto inst686
inst686: // rune "09AFaf" -> 688
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst688
			}
			goto inst686_fail
		} else if false {
			i += sz
			goto inst688
		}
	}
	goto inst686_fail
	goto unreachable
	goto inst686_fail
inst686_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 689:
			goto inst689_alt
		}
	}
	goto fail

	goto unreachable
	goto inst687
inst687: // rune "09AFaf" -> 691
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst691
			}
			goto inst687_fail
		} else if false {
			i += sz
			goto inst691
		}
	}
	goto inst687_fail
	goto unreachable
	goto inst687_fail
inst687_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 688:
			goto inst688_alt
		}
	}
	goto fail

	goto unreachable
	goto inst688
inst688: // alt -> 687, 691
	{
		idx := i*319 + 287
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 688, 0})
	goto inst687
inst688_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst691
	}

	goto unreachable
	goto inst689
inst689: // alt -> 686, 691
	{
		idx := i*319 + 288
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 689, 0})
	goto inst686
inst689_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst691
	}

	goto unreachable
	goto inst690
inst690: // alt -> 685, 691
	{
		idx := i*319 + 289
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 690, 0})
	goto inst685
inst690_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst691
	}

	goto unreachable
	goto inst692
inst692: // rune "09AFaf" -> 698
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst698
			}
			goto inst692_fail
		} else if false {
			i += sz
			goto inst698
		}
	}
	goto inst692_fail
	goto unreachable
	goto inst692_fail
inst692_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 718:
			goto inst718_alt
		}
	}
	goto fail

	goto unreachable
	goto inst699
inst699: // string ":" -> 717
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst717
		}
	}
	goto inst699_fail
	goto unreachable
	goto inst699_fail
inst699_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 696:
			goto inst696_alt
		case 697:
			goto inst697_alt
		case 698:
			goto inst698_alt
		case 718:
			goto inst718_alt
		}
	}
	goto fail

	goto unreachable
	goto inst693
inst693: // rune "09AFaf" -> 697
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst697
			}
			goto inst693_fail
		} else if false {
			i += sz
			goto inst697
		}
	}
	goto inst693_fail
	goto unreachable
	goto inst693_fail
inst693_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 698:
			goto inst698_alt
		}
	}
	goto fail

	goto unreachable
	goto inst694
inst694: // rune "09AFaf" -> 696
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst696
			}
			goto inst694_fail
		} else if false {
			i += sz
			goto inst696
		}
	}
	goto inst694_fail
	goto unreachable
	goto inst694_fail
inst694_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 697:
			goto inst697_alt
		}
	}
	goto fail

	goto unreachable
	goto inst695
inst695: // rune "09AFaf" -> 699
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst699
			}
			goto inst695_fail
		} else if false {
			i += sz
			goto inst699
		}
	}
	goto inst695_fail
	goto unreachable
	goto inst695_fail
inst695_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 696:
			goto inst696_alt
		}
	}
	goto fail

	goto unreachable
	goto inst696
inst696: // alt -> 695, 699
	{
		idx := i*319 + 290
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 696, 0})
	goto inst695
inst696_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst699
	}

	goto unreachable
	goto inst697
inst697: // alt -> 694, 699
	{
		idx := i*319 + 291
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 697, 0})
	goto inst694
inst697_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst699
	}

	goto unreachable
	goto inst698
inst698: // alt -> 693, 699
	{
		idx := i*319 + 292
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 698, 0})
	goto inst693
inst698_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst699
	}

	goto unreachable
	goto inst703
inst703: // rune "09AFaf" -> 707
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst707
			}
			goto inst703_fail
		} else if false {
			i += sz
			goto inst707
		}
	}
	goto inst703_fail
	goto unreachable
	goto inst703_fail
inst703_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 704:
			goto inst704_alt
		}
	}
	goto fail

	goto unreachable
	goto inst707
inst707: // string ":" -> 716
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst716
		}
	}
	goto inst707_fail
	goto unreachable
	goto inst707_fail
inst707_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 704:
			goto inst704_alt
		case 705:
			goto inst705_alt
		case 706:
			goto inst706_alt
		case 717:
			goto inst717_alt
		}
	}
	goto fail

	goto unreachable
	goto inst701
inst701: // rune "09AFaf" -> 705
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst705
			}
			goto inst701_fail
		} else if false {
			i += sz
			goto inst705
		}
	}
	goto inst701_fail
	goto unreachable
	goto inst701_fail
inst701_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 706:
			goto inst706_alt
		}
	}
	goto fail

	goto unreachable
	goto inst702
inst702: // rune "09AFaf" -> 704
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst704
			}
			goto inst702_fail
		} else if false {
			i += sz
			goto inst704
		}
	}
	goto inst702_fail
	goto unreachable
	goto inst702_fail
inst702_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 705:
			goto inst705_alt
		}
	}
	goto fail

	goto unreachable
	goto inst704
inst704: // alt -> 703, 707
	{
		idx := i*319 + 293
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 704, 0})
	goto inst703
inst704_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst707
	}

	goto unreachable
	goto inst705
inst705: // alt -> 702, 707
	{
		idx := i*319 + 294
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 705, 0})
	goto inst702
inst705_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst707
	}

	goto unreachable
	goto inst706
inst706: // alt -> 701, 707
	{
		idx := i*319 + 295
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 706, 0})
	goto inst701
inst706_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst707
	}

	// inst567 unreacheable

	goto unreachable
	goto inst708
inst708: // rune "09AFaf" -> 714
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst714
			}
			goto inst708_fail
		} else if false {
			i += sz
			goto inst714
		}
	}
	goto inst708_fail
	goto unreachable
	goto inst708_fail
inst708_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 716:
			goto inst716_alt
		}
	}
	goto fail

	goto unreachable
	goto inst714
inst714: // alt -> 709, 715
	{
		idx := i*319 + 296
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 714, 0})
	goto inst709
inst714_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst715
	}

	goto unreachable
	goto inst709
inst709: // rune "09AFaf" -> 713
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst713
			}
			goto inst709_fail
		} else if false {
			i += sz
			goto inst713
		}
	}
	goto inst709_fail
	goto unreachable
	goto inst709_fail
inst709_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 714:
			goto inst714_alt
		}
	}
	goto fail

	goto unreachable
	goto inst710
inst710: // rune "09AFaf" -> 712
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst712
			}
			goto inst710_fail
		} else if false {
			i += sz
			goto inst712
		}
	}
	goto inst710_fail
	goto unreachable
	goto inst710_fail
inst710_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 713:
			goto inst713_alt
		}
	}
	goto fail

	goto unreachable
	goto inst700
inst700: // rune "09AFaf" -> 706
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst706
			}
			goto inst700_fail
		} else if false {
			i += sz
			goto inst706
		}
	}
	goto inst700_fail
	goto unreachable
	goto inst700_fail
inst700_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 717:
			goto inst717_alt
		}
	}
	goto fail

	goto unreachable
	goto inst711
inst711: // rune "09AFaf" -> 715
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst715
			}
			goto inst711_fail
		} else if false {
			i += sz
			goto inst715
		}
	}
	goto inst711_fail
	goto unreachable
	goto inst711_fail
inst711_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 712:
			goto inst712_alt
		}
	}
	goto fail

	goto unreachable
	goto inst712
inst712: // alt -> 711, 715
	{
		idx := i*319 + 297
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 712, 0})
	goto inst711
inst712_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst715
	}

	goto unreachable
	goto inst713
inst713: // alt -> 710, 715
	{
		idx := i*319 + 298
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 713, 0})
	goto inst710
inst713_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst715
	}

	goto unreachable
	goto inst715
inst715: // string "::" -> 731
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "::" {
			i += 2
			goto inst731
		}
	}
	goto inst715_fail
	goto unreachable
	goto inst715_fail
inst715_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 716:
			goto inst716_alt
		}
	}
	goto fail

	goto unreachable
	goto inst716
inst716: // alt -> 708, 719
	{
		idx := i*319 + 299
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 716, 0})
	goto inst708
inst716_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst719
	}

	goto unreachable
	goto inst717
inst717: // alt -> 700, 719
	{
		idx := i*319 + 300
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 717, 0})
	goto inst700
inst717_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst719
	}

	goto unreachable
	goto inst718
inst718: // alt -> 692, 719
	{
		idx := i*319 + 301
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 718, 0})
	goto inst692
inst718_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst719
	}

	goto unreachable
	goto inst719
inst719: // string ":" -> 731
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == ":" {
			i += 1
			goto inst731
		}
	}
	goto inst719_fail
	goto unreachable
	goto inst719_fail
inst719_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 688:
			goto inst688_alt
		case 689:
			goto inst689_alt
		case 690:
			goto inst690_alt
		case 696:
			goto inst696_alt
		case 697:
			goto inst697_alt
		case 698:
			goto inst698_alt
		case 704:
			goto inst704_alt
		case 705:
			goto inst705_alt
		case 706:
			goto inst706_alt
		case 717:
			goto inst717_alt
		case 718:
			goto inst718_alt
		}
	}
	goto fail

	goto unreachable
	goto inst731
inst731: // alt -> 720, 729
	{
		idx := i*319 + 302
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 731, 0})
	goto inst720
inst731_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst729
	}

	goto unreachable
	goto inst720
inst720: // string "25" -> 722
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "25" {
			i += 2
			goto inst722
		}
	}
	goto inst720_fail
	goto unreachable
	goto inst720_fail
inst720_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 731:
			goto inst731_alt
		}
	}
	goto fail

	// inst721 unreacheable

	goto unreachable
	goto inst722
inst722: // rune "05" -> 732
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 53) {
			i += sz
			goto inst732
		}
	}
	goto inst722_fail
	goto unreachable
	goto inst722_fail
inst722_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 731:
			goto inst731_alt
		}
	}
	goto fail

	goto unreachable
	goto inst723
inst723: // string "2" -> 724
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "2" {
			i += 1
			goto inst724
		}
	}
	goto inst723_fail
	goto unreachable
	goto inst723_fail
inst723_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 728:
			goto inst728_alt
		}
	}
	goto fail

	goto unreachable
	goto inst724
inst724: // rune "04" -> 730
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 52) {
			i += sz
			goto inst730
		}
	}
	goto inst724_fail
	goto unreachable
	goto inst724_fail
inst724_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 728:
			goto inst728_alt
		}
	}
	goto fail

	goto unreachable
	goto inst725
inst725: // string "1" -> 727
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "1" {
			i += 1
			goto inst727
		}
	}
	goto inst725_fail
	goto unreachable
	goto inst725_fail
inst725_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 726:
			goto inst726_alt
		}
	}
	goto fail

	goto unreachable
	goto inst726
inst726: // alt -> 725, 727
	{
		idx := i*319 + 303
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 726, 0})
	goto inst725
inst726_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst727
	}

	goto unreachable
	goto inst727
inst727: // rune "09" -> 730
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst730
		}
	}
	goto inst727_fail
	goto unreachable
	goto inst727_fail
inst727_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 726:
			goto inst726_alt
		case 729:
			goto inst729_alt
		}
	}
	goto fail

	goto unreachable
	goto inst728
inst728: // alt -> 723, 726
	{
		idx := i*319 + 304
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 728, 0})
	goto inst723
inst728_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst726
	}

	goto unreachable
	goto inst729
inst729: // alt -> 728, 730
	{
		idx := i*319 + 305
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 729, 0})
	goto inst728
inst729_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst730
	}

	goto unreachable
	goto inst730
inst730: // rune "09" -> 732
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst732
		}
	}
	goto inst730_fail
	goto unreachable
	goto inst730_fail
inst730_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 688:
			goto inst688_alt
		case 689:
			goto inst689_alt
		case 690:
			goto inst690_alt
		case 696:
			goto inst696_alt
		case 697:
			goto inst697_alt
		case 698:
			goto inst698_alt
		case 704:
			goto inst704_alt
		case 705:
			goto inst705_alt
		case 706:
			goto inst706_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 716:
			goto inst716_alt
		case 717:
			goto inst717_alt
		case 718:
			goto inst718_alt
		case 726:
			goto inst726_alt
		case 728:
			goto inst728_alt
		case 729:
			goto inst729_alt
		}
	}
	goto fail

	goto unreachable
	goto inst732
inst732: // string "." -> 744
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "." {
			i += 1
			goto inst744
		}
	}
	goto inst732_fail
	goto unreachable
	goto inst732_fail
inst732_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 688:
			goto inst688_alt
		case 689:
			goto inst689_alt
		case 690:
			goto inst690_alt
		case 696:
			goto inst696_alt
		case 697:
			goto inst697_alt
		case 698:
			goto inst698_alt
		case 704:
			goto inst704_alt
		case 705:
			goto inst705_alt
		case 706:
			goto inst706_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 716:
			goto inst716_alt
		case 717:
			goto inst717_alt
		case 718:
			goto inst718_alt
		case 726:
			goto inst726_alt
		case 728:
			goto inst728_alt
		case 729:
			goto inst729_alt
		case 731:
			goto inst731_alt
		}
	}
	goto fail

	goto unreachable
	goto inst744
inst744: // alt -> 733, 742
	{
		idx := i*319 + 306
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 744, 0})
	goto inst733
inst744_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst742
	}

	goto unreachable
	goto inst733
inst733: // string "25" -> 735
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "25" {
			i += 2
			goto inst735
		}
	}
	goto inst733_fail
	goto unreachable
	goto inst733_fail
inst733_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 744:
			goto inst744_alt
		}
	}
	goto fail

	// inst734 unreacheable

	goto unreachable
	goto inst735
inst735: // rune "05" -> 745
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 53) {
			i += sz
			goto inst745
		}
	}
	goto inst735_fail
	goto unreachable
	goto inst735_fail
inst735_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 744:
			goto inst744_alt
		}
	}
	goto fail

	goto unreachable
	goto inst736
inst736: // string "2" -> 737
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "2" {
			i += 1
			goto inst737
		}
	}
	goto inst736_fail
	goto unreachable
	goto inst736_fail
inst736_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 741:
			goto inst741_alt
		}
	}
	goto fail

	goto unreachable
	goto inst737
inst737: // rune "04" -> 743
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 52) {
			i += sz
			goto inst743
		}
	}
	goto inst737_fail
	goto unreachable
	goto inst737_fail
inst737_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 741:
			goto inst741_alt
		}
	}
	goto fail

	goto unreachable
	goto inst738
inst738: // string "1" -> 740
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "1" {
			i += 1
			goto inst740
		}
	}
	goto inst738_fail
	goto unreachable
	goto inst738_fail
inst738_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 739:
			goto inst739_alt
		}
	}
	goto fail

	// inst659 unreacheable

	goto unreachable
	goto inst740
inst740: // rune "09" -> 743
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst743
		}
	}
	goto inst740_fail
	goto unreachable
	goto inst740_fail
inst740_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 739:
			goto inst739_alt
		case 742:
			goto inst742_alt
		}
	}
	goto fail

	goto unreachable
	goto inst741
inst741: // alt -> 736, 739
	{
		idx := i*319 + 307
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 741, 0})
	goto inst736
inst741_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst739
	}

	goto unreachable
	goto inst742
inst742: // alt -> 741, 743
	{
		idx := i*319 + 308
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 742, 0})
	goto inst741
inst742_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst743
	}

	goto unreachable
	goto inst743
inst743: // rune "09" -> 745
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst745
		}
	}
	goto inst743_fail
	goto unreachable
	goto inst743_fail
inst743_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 688:
			goto inst688_alt
		case 689:
			goto inst689_alt
		case 690:
			goto inst690_alt
		case 696:
			goto inst696_alt
		case 697:
			goto inst697_alt
		case 698:
			goto inst698_alt
		case 704:
			goto inst704_alt
		case 705:
			goto inst705_alt
		case 706:
			goto inst706_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 716:
			goto inst716_alt
		case 717:
			goto inst717_alt
		case 718:
			goto inst718_alt
		case 726:
			goto inst726_alt
		case 728:
			goto inst728_alt
		case 729:
			goto inst729_alt
		case 731:
			goto inst731_alt
		case 739:
			goto inst739_alt
		case 741:
			goto inst741_alt
		case 742:
			goto inst742_alt
		}
	}
	goto fail

	goto unreachable
	goto inst745
inst745: // string "." -> 757
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "." {
			i += 1
			goto inst757
		}
	}
	goto inst745_fail
	goto unreachable
	goto inst745_fail
inst745_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 688:
			goto inst688_alt
		case 689:
			goto inst689_alt
		case 690:
			goto inst690_alt
		case 696:
			goto inst696_alt
		case 697:
			goto inst697_alt
		case 698:
			goto inst698_alt
		case 704:
			goto inst704_alt
		case 705:
			goto inst705_alt
		case 706:
			goto inst706_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 716:
			goto inst716_alt
		case 717:
			goto inst717_alt
		case 718:
			goto inst718_alt
		case 726:
			goto inst726_alt
		case 728:
			goto inst728_alt
		case 729:
			goto inst729_alt
		case 731:
			goto inst731_alt
		case 739:
			goto inst739_alt
		case 741:
			goto inst741_alt
		case 742:
			goto inst742_alt
		case 744:
			goto inst744_alt
		}
	}
	goto fail

	goto unreachable
	goto inst757
inst757: // alt -> 746, 755
	{
		idx := i*319 + 309
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 757, 0})
	goto inst746
inst757_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst755
	}

	goto unreachable
	goto inst746
inst746: // string "25" -> 748
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "25" {
			i += 2
			goto inst748
		}
	}
	goto inst746_fail
	goto unreachable
	goto inst746_fail
inst746_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 757:
			goto inst757_alt
		}
	}
	goto fail

	// inst747 unreacheable

	goto unreachable
	goto inst748
inst748: // rune "05" -> 758
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 53) {
			i += sz
			goto inst758
		}
	}
	goto inst748_fail
	goto unreachable
	goto inst748_fail
inst748_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 757:
			goto inst757_alt
		}
	}
	goto fail

	goto unreachable
	goto inst749
inst749: // string "2" -> 750
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "2" {
			i += 1
			goto inst750
		}
	}
	goto inst749_fail
	goto unreachable
	goto inst749_fail
inst749_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 754:
			goto inst754_alt
		}
	}
	goto fail

	goto unreachable
	goto inst750
inst750: // rune "04" -> 756
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 52) {
			i += sz
			goto inst756
		}
	}
	goto inst750_fail
	goto unreachable
	goto inst750_fail
inst750_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 754:
			goto inst754_alt
		}
	}
	goto fail

	goto unreachable
	goto inst751
inst751: // string "1" -> 753
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "1" {
			i += 1
			goto inst753
		}
	}
	goto inst751_fail
	goto unreachable
	goto inst751_fail
inst751_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 752:
			goto inst752_alt
		}
	}
	goto fail

	goto unreachable
	goto inst752
inst752: // alt -> 751, 753
	{
		idx := i*319 + 310
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 752, 0})
	goto inst751
inst752_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst753
	}

	goto unreachable
	goto inst753
inst753: // rune "09" -> 756
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst756
		}
	}
	goto inst753_fail
	goto unreachable
	goto inst753_fail
inst753_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 752:
			goto inst752_alt
		case 755:
			goto inst755_alt
		}
	}
	goto fail

	goto unreachable
	goto inst754
inst754: // alt -> 749, 752
	{
		idx := i*319 + 311
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 754, 0})
	goto inst749
inst754_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst752
	}

	goto unreachable
	goto inst755
inst755: // alt -> 754, 756
	{
		idx := i*319 + 312
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 755, 0})
	goto inst754
inst755_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst756
	}

	goto unreachable
	goto inst756
inst756: // rune "09" -> 758
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst758
		}
	}
	goto inst756_fail
	goto unreachable
	goto inst756_fail
inst756_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 688:
			goto inst688_alt
		case 689:
			goto inst689_alt
		case 690:
			goto inst690_alt
		case 696:
			goto inst696_alt
		case 697:
			goto inst697_alt
		case 698:
			goto inst698_alt
		case 704:
			goto inst704_alt
		case 705:
			goto inst705_alt
		case 706:
			goto inst706_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 716:
			goto inst716_alt
		case 717:
			goto inst717_alt
		case 718:
			goto inst718_alt
		case 726:
			goto inst726_alt
		case 728:
			goto inst728_alt
		case 729:
			goto inst729_alt
		case 731:
			goto inst731_alt
		case 739:
			goto inst739_alt
		case 741:
			goto inst741_alt
		case 742:
			goto inst742_alt
		case 744:
			goto inst744_alt
		case 752:
			goto inst752_alt
		case 754:
			goto inst754_alt
		case 755:
			goto inst755_alt
		}
	}
	goto fail

	goto unreachable
	goto inst758
inst758: // string "." -> 770
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "." {
			i += 1
			goto inst770
		}
	}
	goto inst758_fail
	goto unreachable
	goto inst758_fail
inst758_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 688:
			goto inst688_alt
		case 689:
			goto inst689_alt
		case 690:
			goto inst690_alt
		case 696:
			goto inst696_alt
		case 697:
			goto inst697_alt
		case 698:
			goto inst698_alt
		case 704:
			goto inst704_alt
		case 705:
			goto inst705_alt
		case 706:
			goto inst706_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 716:
			goto inst716_alt
		case 717:
			goto inst717_alt
		case 718:
			goto inst718_alt
		case 726:
			goto inst726_alt
		case 728:
			goto inst728_alt
		case 729:
			goto inst729_alt
		case 731:
			goto inst731_alt
		case 739:
			goto inst739_alt
		case 741:
			goto inst741_alt
		case 742:
			goto inst742_alt
		case 744:
			goto inst744_alt
		case 752:
			goto inst752_alt
		case 754:
			goto inst754_alt
		case 755:
			goto inst755_alt
		case 757:
			goto inst757_alt
		}
	}
	goto fail

	goto unreachable
	goto inst770
inst770: // alt -> 759, 768
	{
		idx := i*319 + 313
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 770, 0})
	goto inst759
inst770_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst768
	}

	goto unreachable
	goto inst759
inst759: // string "25" -> 761
	if i >= 0 && i+2 <= len(r) {
		if r[i:i+2] == "25" {
			i += 2
			goto inst761
		}
	}
	goto inst759_fail
	goto unreachable
	goto inst759_fail
inst759_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 770:
			goto inst770_alt
		}
	}
	goto fail

	goto unreachable
	goto inst684
inst684: // rune "09AFaf" -> 690
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst690
			}
			goto inst684_fail
		} else if false {
			i += sz
			goto inst690
		}
	}
	goto inst684_fail
	goto unreachable
	goto inst684_fail
inst684_fail:
	goto fail

	goto unreachable
	goto inst761
inst761: // rune "05" -> 772
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 53) {
			i += sz
			goto inst772
		}
	}
	goto inst761_fail
	goto unreachable
	goto inst761_fail
inst761_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 770:
			goto inst770_alt
		}
	}
	goto fail

	goto unreachable
	goto inst762
inst762: // string "2" -> 763
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "2" {
			i += 1
			goto inst763
		}
	}
	goto inst762_fail
	goto unreachable
	goto inst762_fail
inst762_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 767:
			goto inst767_alt
		}
	}
	goto fail

	goto unreachable
	goto inst763
inst763: // rune "04" -> 769
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 52) {
			i += sz
			goto inst769
		}
	}
	goto inst763_fail
	goto unreachable
	goto inst763_fail
inst763_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 767:
			goto inst767_alt
		}
	}
	goto fail

	goto unreachable
	goto inst764
inst764: // string "1" -> 766
	if i >= 0 && i+1 <= len(r) {
		if r[i:i+1] == "1" {
			i += 1
			goto inst766
		}
	}
	goto inst764_fail
	goto unreachable
	goto inst764_fail
inst764_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 765:
			goto inst765_alt
		}
	}
	goto fail

	goto unreachable
	goto inst765
inst765: // alt -> 764, 766
	{
		idx := i*319 + 314
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 765, 0})
	goto inst764
inst765_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst766
	}

	goto unreachable
	goto inst766
inst766: // rune "09" -> 769
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst769
		}
	}
	goto inst766_fail
	goto unreachable
	goto inst766_fail
inst766_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 765:
			goto inst765_alt
		case 768:
			goto inst768_alt
		}
	}
	goto fail

	goto unreachable
	goto inst767
inst767: // alt -> 762, 765
	{
		idx := i*319 + 315
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 767, 0})
	goto inst762
inst767_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst765
	}

	goto unreachable
	goto inst768
inst768: // alt -> 767, 769
	{
		idx := i*319 + 316
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 768, 0})
	goto inst767
inst768_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst769
	}

	goto unreachable
	goto inst769
inst769: // rune "09" -> 772
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst772
		}
	}
	goto inst769_fail
	goto unreachable
	goto inst769_fail
inst769_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 688:
			goto inst688_alt
		case 689:
			goto inst689_alt
		case 690:
			goto inst690_alt
		case 696:
			goto inst696_alt
		case 697:
			goto inst697_alt
		case 698:
			goto inst698_alt
		case 704:
			goto inst704_alt
		case 705:
			goto inst705_alt
		case 706:
			goto inst706_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 716:
			goto inst716_alt
		case 717:
			goto inst717_alt
		case 718:
			goto inst718_alt
		case 726:
			goto inst726_alt
		case 728:
			goto inst728_alt
		case 729:
			goto inst729_alt
		case 731:
			goto inst731_alt
		case 739:
			goto inst739_alt
		case 741:
			goto inst741_alt
		case 742:
			goto inst742_alt
		case 744:
			goto inst744_alt
		case 752:
			goto inst752_alt
		case 754:
			goto inst754_alt
		case 755:
			goto inst755_alt
		case 757:
			goto inst757_alt
		case 765:
			goto inst765_alt
		case 767:
			goto inst767_alt
		case 768:
			goto inst768_alt
		}
	}
	goto fail

	goto unreachable
	goto inst771
inst771: // alt -> 683, 684
	{
		idx := i*319 + 317
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 771, 0})
	goto inst683
inst771_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst684
	}

	// inst620 unreacheable

	goto unreachable
	goto inst739
inst739: // alt -> 738, 740
	{
		idx := i*319 + 318
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateMatch{c, i, 739, 0})
	goto inst738
inst739_alt:
	{
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst740
	}

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 7:
				goto inst7_alt
			case 6:
				goto inst6_alt
			case 5:
				goto inst5_alt
			case 15:
				goto inst15_alt
			case 14:
				goto inst14_alt
			case 13:
				goto inst13_alt
			case 23:
				goto inst23_alt
			case 22:
				goto inst22_alt
			case 21:
				goto inst21_alt
			case 31:
				goto inst31_alt
			case 30:
				goto inst30_alt
			case 29:
				goto inst29_alt
			case 39:
				goto inst39_alt
			case 38:
				goto inst38_alt
			case 37:
				goto inst37_alt
			case 47:
				goto inst47_alt
			case 46:
				goto inst46_alt
			case 45:
				goto inst45_alt
			case 55:
				goto inst55_alt
			case 54:
				goto inst54_alt
			case 53:
				goto inst53_alt
			case 63:
				goto inst63_alt
			case 62:
				goto inst62_alt
			case 68:
				goto inst68_alt
			case 69:
				goto inst69_alt
			case 70:
				goto inst70_alt
			case 127:
				goto inst127_alt
			case 76:
				goto inst76_alt
			case 77:
				goto inst77_alt
			case 78:
				goto inst78_alt
			case 86:
				goto inst86_alt
			case 85:
				goto inst85_alt
			case 84:
				goto inst84_alt
			case 124:
				goto inst124_alt
			case 92:
				goto inst92_alt
			case 93:
				goto inst93_alt
			case 94:
				goto inst94_alt
			case 100:
				goto inst100_alt
			case 101:
				goto inst101_alt
			case 102:
				goto inst102_alt
			case 121:
				goto inst121_alt
			case 110:
				goto inst110_alt
			case 125:
				goto inst125_alt
			case 109:
				goto inst109_alt
			case 108:
				goto inst108_alt
			case 123:
				goto inst123_alt
			case 120:
				goto inst120_alt
			case 122:
				goto inst122_alt
			case 118:
				goto inst118_alt
			case 117:
				goto inst117_alt
			case 116:
				goto inst116_alt
			case 132:
				goto inst132_alt
			case 133:
				goto inst133_alt
			case 134:
				goto inst134_alt
			case 189:
				goto inst189_alt
			case 141:
				goto inst141_alt
			case 140:
				goto inst140_alt
			case 142:
				goto inst142_alt
			case 150:
				goto inst150_alt
			case 149:
				goto inst149_alt
			case 148:
				goto inst148_alt
			case 179:
				goto inst179_alt
			case 156:
				goto inst156_alt
			case 157:
				goto inst157_alt
			case 158:
				goto inst158_alt
			case 180:
				goto inst180_alt
			case 165:
				goto inst165_alt
			case 164:
				goto inst164_alt
			case 166:
				goto inst166_alt
			case 177:
				goto inst177_alt
			case 178:
				goto inst178_alt
			case 176:
				goto inst176_alt
			case 174:
				goto inst174_alt
			case 172:
				goto inst172_alt
			case 173:
				goto inst173_alt
			case 251:
				goto inst251_alt
			case 188:
				goto inst188_alt
			case 196:
				goto inst196_alt
			case 195:
				goto inst195_alt
			case 194:
				goto inst194_alt
			case 233:
				goto inst233_alt
			case 204:
				goto inst204_alt
			case 203:
				goto inst203_alt
			case 202:
				goto inst202_alt
			case 210:
				goto inst210_alt
			case 211:
				goto inst211_alt
			case 212:
				goto inst212_alt
			case 232:
				goto inst232_alt
			case 218:
				goto inst218_alt
			case 219:
				goto inst219_alt
			case 231:
				goto inst231_alt
			case 220:
				goto inst220_alt
			case 230:
				goto inst230_alt
			case 228:
				goto inst228_alt
			case 227:
				goto inst227_alt
			case 226:
				goto inst226_alt
			case 241:
				goto inst241_alt
			case 240:
				goto inst240_alt
			case 239:
				goto inst239_alt
			case 250:
				goto inst250_alt
			case 313:
				goto inst313_alt
			case 187:
				goto inst187_alt
			case 258:
				goto inst258_alt
			case 257:
				goto inst257_alt
			case 249:
				goto inst249_alt
			case 256:
				goto inst256_alt
			case 248:
				goto inst248_alt
			case 264:
				goto inst264_alt
			case 265:
				goto inst265_alt
			case 266:
				goto inst266_alt
			case 272:
				goto inst272_alt
			case 273:
				goto inst273_alt
			case 274:
				goto inst274_alt
			case 285:
				goto inst285_alt
			case 286:
				goto inst286_alt
			case 284:
				goto inst284_alt
			case 282:
				goto inst282_alt
			case 280:
				goto inst280_alt
			case 281:
				goto inst281_alt
			case 292:
				goto inst292_alt
			case 294:
				goto inst294_alt
			case 312:
				goto inst312_alt
			case 293:
				goto inst293_alt
			case 247:
				goto inst247_alt
			case 302:
				goto inst302_alt
			case 301:
				goto inst301_alt
			case 300:
				goto inst300_alt
			case 311:
				goto inst311_alt
			case 310:
				goto inst310_alt
			case 309:
				goto inst309_alt
			case 375:
				goto inst375_alt
			case 320:
				goto inst320_alt
			case 319:
				goto inst319_alt
			case 318:
				goto inst318_alt
			case 339:
				goto inst339_alt
			case 328:
				goto inst328_alt
			case 327:
				goto inst327_alt
			case 326:
				goto inst326_alt
			case 335:
				goto inst335_alt
			case 334:
				goto inst334_alt
			case 336:
				goto inst336_alt
			case 338:
				goto inst338_alt
			case 347:
				goto inst347_alt
			case 346:
				goto inst346_alt
			case 345:
				goto inst345_alt
			case 374:
				goto inst374_alt
			case 353:
				goto inst353_alt
			case 355:
				goto inst355_alt
			case 354:
				goto inst354_alt
			case 373:
				goto inst373_alt
			case 363:
				goto inst363_alt
			case 362:
				goto inst362_alt
			case 361:
				goto inst361_alt
			case 372:
				goto inst372_alt
			case 398:
				goto inst398_alt
			case 436:
				goto inst436_alt
			case 400:
				goto inst400_alt
			case 381:
				goto inst381_alt
			case 382:
				goto inst382_alt
			case 437:
				goto inst437_alt
			case 380:
				goto inst380_alt
			case 388:
				goto inst388_alt
			case 389:
				goto inst389_alt
			case 390:
				goto inst390_alt
			case 392:
				goto inst392_alt
			case 399:
				goto inst399_alt
			case 371:
				goto inst371_alt
			case 370:
				goto inst370_alt
			case 499:
				goto inst499_alt
			case 369:
				goto inst369_alt
			case 406:
				goto inst406_alt
			case 407:
				goto inst407_alt
			case 408:
				goto inst408_alt
			case 414:
				goto inst414_alt
			case 415:
				goto inst415_alt
			case 416:
				goto inst416_alt
			case 422:
				goto inst422_alt
			case 423:
				goto inst423_alt
			case 424:
				goto inst424_alt
			case 432:
				goto inst432_alt
			case 431:
				goto inst431_alt
			case 433:
				goto inst433_alt
			case 434:
				goto inst434_alt
			case 435:
				goto inst435_alt
			case 453:
				goto inst453_alt
			case 451:
				goto inst451_alt
			case 442:
				goto inst442_alt
			case 443:
				goto inst443_alt
			case 444:
				goto inst444_alt
			case 498:
				goto inst498_alt
			case 452:
				goto inst452_alt
			case 308:
				goto inst308_alt
			case 61:
				goto inst61_alt
			case 430:
				goto inst430_alt
			case 186:
				goto inst186_alt
			case 461:
				goto inst461_alt
			case 467:
				goto inst467_alt
			case 468:
				goto inst468_alt
			case 496:
				goto inst496_alt
			case 469:
				goto inst469_alt
			case 476:
				goto inst476_alt
			case 459:
				goto inst459_alt
			case 460:
				goto inst460_alt
			case 497:
				goto inst497_alt
			case 485:
				goto inst485_alt
			case 492:
				goto inst492_alt
			case 493:
				goto inst493_alt
			case 491:
				goto inst491_alt
			case 494:
				goto inst494_alt
			case 495:
				goto inst495_alt
			case 475:
				goto inst475_alt
			case 477:
				goto inst477_alt
			case 560:
				goto inst560_alt
			case 484:
				goto inst484_alt
			case 483:
				goto inst483_alt
			case 506:
				goto inst506_alt
			case 561:
				goto inst561_alt
			case 514:
				goto inst514_alt
			case 515:
				goto inst515_alt
			case 516:
				goto inst516_alt
			case 524:
				goto inst524_alt
			case 548:
				goto inst548_alt
			case 522:
				goto inst522_alt
			case 523:
				goto inst523_alt
			case 532:
				goto inst532_alt
			case 559:
				goto inst559_alt
			case 530:
				goto inst530_alt
			case 531:
				goto inst531_alt
			case 554:
				goto inst554_alt
			case 538:
				goto inst538_alt
			case 539:
				goto inst539_alt
			case 540:
				goto inst540_alt
			case 546:
				goto inst546_alt
			case 547:
				goto inst547_alt
			case 507:
				goto inst507_alt
			case 556:
				goto inst556_alt
			case 555:
				goto inst555_alt
			case 557:
				goto inst557_alt
			case 558:
				goto inst558_alt
			case 562:
				goto inst562_alt
			case 609:
				goto inst609_alt
			case 564:
				goto inst564_alt
			case 565:
				goto inst565_alt
			case 578:
				goto inst578_alt
			case 576:
				goto inst576_alt
			case 577:
				goto inst577_alt
			case 579:
				goto inst579_alt
			case 586:
				goto inst586_alt
			case 585:
				goto inst585_alt
			case 587:
				goto inst587_alt
			case 588:
				goto inst588_alt
			case 595:
				goto inst595_alt
			case 596:
				goto inst596_alt
			case 597:
				goto inst597_alt
			case 608:
				goto inst608_alt
			case 603:
				goto inst603_alt
			case 604:
				goto inst604_alt
			case 605:
				goto inst605_alt
			case 606:
				goto inst606_alt
			case 607:
				goto inst607_alt
			case 594:
				goto inst594_alt
			case 610:
				goto inst610_alt
			case 613:
				goto inst613_alt
			case 614:
				goto inst614_alt
			case 643:
				goto inst643_alt
			case 626:
				goto inst626_alt
			case 627:
				goto inst627_alt
			case 628:
				goto inst628_alt
			case 629:
				goto inst629_alt
			case 631:
				goto inst631_alt
			case 683:
				goto inst683_alt
			case 640:
				goto inst640_alt
			case 641:
				goto inst641_alt
			case 638:
				goto inst638_alt
			case 651:
				goto inst651_alt
			case 653:
				goto inst653_alt
			case 654:
				goto inst654_alt
			case 656:
				goto inst656_alt
			case 508:
				goto inst508_alt
			case 664:
				goto inst664_alt
			case 666:
				goto inst666_alt
			case 667:
				goto inst667_alt
			case 669:
				goto inst669_alt
			case 682:
				goto inst682_alt
			case 677:
				goto inst677_alt
			case 679:
				goto inst679_alt
			case 680:
				goto inst680_alt
			case 688:
				goto inst688_alt
			case 689:
				goto inst689_alt
			case 690:
				goto inst690_alt
			case 696:
				goto inst696_alt
			case 697:
				goto inst697_alt
			case 698:
				goto inst698_alt
			case 704:
				goto inst704_alt
			case 705:
				goto inst705_alt
			case 706:
				goto inst706_alt
			case 714:
				goto inst714_alt
			case 712:
				goto inst712_alt
			case 713:
				goto inst713_alt
			case 716:
				goto inst716_alt
			case 717:
				goto inst717_alt
			case 718:
				goto inst718_alt
			case 731:
				goto inst731_alt
			case 726:
				goto inst726_alt
			case 728:
				goto inst728_alt
			case 729:
				goto inst729_alt
			case 744:
				goto inst744_alt
			case 741:
				goto inst741_alt
			case 742:
				goto inst742_alt
			case 757:
				goto inst757_alt
			case 752:
				goto inst752_alt
			case 754:
				goto inst754_alt
			case 755:
				goto inst755_alt
			case 770:
				goto inst770_alt
			case 765:
				goto inst765_alt
			case 767:
				goto inst767_alt
			case 768:
				goto inst768_alt
			case 771:
				goto inst771_alt
			case 739:
				goto inst739_alt
			}
		}
		if matched {
			var m [1]string
			m[0] = r[bc[0]:bc[1]]
			return m, si, true
		}
		if len(r[si:]) != 0 {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		var m [1]string
		return m, len(r), false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
