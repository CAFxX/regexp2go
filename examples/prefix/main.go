// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags 212 -pkg "prefix" -fn "Match" "Hello ([^!]+)!"

package prefix

import "regexp/syntax"

const MatchRegexp = "Hello ([^!]+)!"

var _ = syntax.IsWordChar

type state struct {
	c   [4]int
	i   int
	pc  int
	cnt int
}

// Match implements the regular expression
// Hello ([^!]+)!
// with flags 212
func Match(r []rune) ([2][]rune, bool) {
	si := 0 // starting rune index
restart:
	var _bt [1]state // static storage for backtracking state
	bt := _bt[:0]    // backtracking state
	var c [4]int     // captures
	i := si          // current rune index

	// fast prefix search "Hello "
	for j, cr := range r[si:] {
		if cr == 72 {
			i += j // prefix found, skip to it
			goto prefix_found
		}
	}
	i += len(r[si:]) // no prefix found, skip to the end of the rune slice
prefix_found:

	c[0] = i // start of match
	goto inst1 // initial instruction

	goto unreachable
	goto inst0
inst0: // fail
	goto fail

	goto unreachable
	goto inst1
inst1: // rune1 "H" -> 2
	if i >= 0 && i+5 < len(r) && r[i+0] == 72 && r[i+1] == 101 && r[i+2] == 108 && r[i+3] == 108 && r[i+4] == 111 && r[i+5] == 32 {
		i += 6
		goto inst7
	}
	goto fail

	goto unreachable
	goto inst2
inst2: // rune1 "e" -> 3
	if i >= 0 && i+4 < len(r) && r[i+0] == 101 && r[i+1] == 108 && r[i+2] == 108 && r[i+3] == 111 && r[i+4] == 32 {
		i += 5
		goto inst7
	}
	goto fail

	goto unreachable
	goto inst3
inst3: // rune1 "l" -> 4
	if i >= 0 && i+3 < len(r) && r[i+0] == 108 && r[i+1] == 108 && r[i+2] == 111 && r[i+3] == 32 {
		i += 4
		goto inst7
	}
	goto fail

	goto unreachable
	goto inst4
inst4: // rune1 "l" -> 5
	if i >= 0 && i+2 < len(r) && r[i+0] == 108 && r[i+1] == 111 && r[i+2] == 32 {
		i += 3
		goto inst7
	}
	goto fail

	goto unreachable
	goto inst5
inst5: // rune1 "o" -> 6
	if i >= 0 && i+1 < len(r) && r[i+0] == 111 && r[i+1] == 32 {
		i += 2
		goto inst7
	}
	goto fail

	goto unreachable
	goto inst6
inst6: // rune1 " " -> 7
	if i >= 0 && i < len(r) {
		cr := r[i]
		if false || cr == 32 {
			i++
			goto inst7
		}
	}
	goto fail

	goto unreachable
	goto inst7
inst7: // cap 2 -> 8
	c[2] = i
	goto inst8

	goto unreachable
	goto inst8
inst8: // rune "\x00 \"\U0010ffff" -> 9
	if i >= 0 && i < len(r) {
		cr := r[i]
		if false || (cr >= 0 && cr <= 32) || (cr >= 34 && cr <= 1114111) {
			i++
			goto inst9
		}
	}
	goto fail

	goto unreachable
	goto inst9
inst9: // alt -> 8, 10
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 9 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst8
		}
	}
	bt = append(bt, state{c, i, 9, 0})
	goto inst8
inst9_alt:
	{
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst10
	}

	goto unreachable
	goto inst10
inst10: // cap 3 -> 11
	c[3] = i
	goto inst11

	goto unreachable
	goto inst11
inst11: // rune1 "!" -> 12
	if i >= 0 && i < len(r) {
		cr := r[i]
		if false || cr == 33 {
			i++
			goto inst12
		}
	}
	goto fail

	goto unreachable
	goto inst12
inst12: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto backtrack
backtrack:
	switch bt[len(bt)-1].pc {
	default:
		panic(bt[len(bt)-1].pc)
	case 9:
		goto inst9_alt
	}

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			goto backtrack
		}
		if len(r[si:]) != 0 {
			si++
			goto restart
		}
		var m [2][]rune
		return m, false
	}

	goto unreachable
	goto match
match:
	{
		var m [2][]rune
		m[0] = r[c[0]:c[1]]
		m[1] = r[c[2]:c[3]]
		return m, true
	}

	goto unreachable
unreachable:
	panic("unreachable")
}
