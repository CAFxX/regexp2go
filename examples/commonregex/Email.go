// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="Email" -pool=true "(?i)([A-Za-z0-9!#$%&'*+\\/=?^_{|.}~-]+@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const EmailRegexp = "(?i)([A-Za-z0-9!#$%&'*+\\/=?^_{|.}~-]+@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeEmail uint8

const (
	modeMatchEmail modeTypeEmail = iota
	modeFirstEmail
	modeLongestEmail
)

// Email implements the regular expression
// (?i)([A-Za-z0-9!#$%&'*+\/=?^_{|.}~-]+@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)
// with flags 212.
type Email struct{}
type stateEmail struct {
	c   [4]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e Email) FindString(r string) (matches [2]string, pos int, ok bool) {
	var bt [6]stateEmail // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstEmail, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e Email) FindLongestString(r string) (matches [2]string, pos int, ok bool) {
	var bt [6]stateEmail // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestEmail, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e Email) Find(s []byte) (matches [2][]byte, pos int, ok bool) {
	var bt [6]stateEmail // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstEmail, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e Email) FindLongest(s []byte) (matches [2][]byte, pos int, ok bool) {
	var bt [6]stateEmail // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestEmail, bt[:0])
	return
}

func (e Email) doByteSlice(s []byte, m modeTypeEmail, bt []stateEmail) (matches [2][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [2 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e Email) doString(s string, m modeTypeEmail, bt []stateEmail) (matches [2]string, pos int, ok bool) {
	var pmatches [2 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e Email) do(r string, m modeTypeEmail, bt []stateEmail) ([4]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*6 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]                 // fast reset dynamic backtracking state
	c := [4]int{-1, -1, -1, -1} // captures
	var bc [4]int               // captures for the longest match so far
	matched := false            // succesful match flag
	i := si                     // current byte index
	c[0] = i                    // start of match
	goto inst1                  // initial instruction

	// inst0 unreacheable

	goto unreachable
	goto inst1
inst1: // cap 2 -> 2
	c[2] = i
	goto inst2

	goto unreachable
	goto inst2
inst2: // rune "!!#'*+-9==??AZ^_a~\u017f\u017f\u212a\u212a" -> 3
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\xfa\xec\xff\xa3\xfe\xff\xff\xc7\xfe\xff\xff\u007f"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst3
			}
			goto inst2_fail
		}
		if cr == 383 || cr == 8490 {
			i += sz
			goto inst3
		}
	}
	goto inst2_fail
	goto unreachable
	goto inst2_fail
inst2_fail:
	goto fail

	goto unreachable
	goto inst3
inst3: // alt -> 2, 4
	{
		idx := i*6 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 3 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst2
		}
	}
	bt = append(bt, stateEmail{c, i, 3, 0})
	goto inst2
inst3_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst4
	}
	goto unreachable

	goto unreachable
	goto inst4
inst4: // string "@" -> 5
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "@" {
			i += 1
			goto inst5
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	goto fail

	goto unreachable
	goto inst5
inst5: // rune "09AZaz\u017f\u017f\u212a\u212a" -> 9
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03\xfe\xff\xff\a\xfe\xff\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst9
			}
			goto inst5_fail
		}
		if cr == 383 || cr == 8490 {
			i += sz
			goto inst9
		}
	}
	goto inst5_fail
	goto unreachable
	goto inst5_fail
inst5_fail:
	goto fail

	goto unreachable
	goto inst6
inst6: // rune "--09AZaz\u017f\u017f\u212a\u212a" -> 7
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00 \xff\x03\xfe\xff\xff\a\xfe\xff\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst7
			}
			goto inst6_fail
		}
		if cr == 383 || cr == 8490 {
			i += sz
			goto inst7
		}
	}
	goto inst6_fail
	goto unreachable
	goto inst6_fail
inst6_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 7:
			goto inst7_alt
		}
	}
	goto fail

	goto unreachable
	goto inst7
inst7: // alt -> 6, 8
	{
		idx := i*6 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 7 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst6
		}
	}
	bt = append(bt, stateEmail{c, i, 7, 0})
	goto inst6
inst7_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst8
	}
	goto unreachable

	goto unreachable
	goto inst9
inst9: // alt -> 7, 10
	{
		idx := i*6 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateEmail{c, i, 9, 0})
	goto inst7
inst9_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst10
	}
	goto unreachable

	goto unreachable
	goto inst8
inst8: // rune "09AZaz\u017f\u017f\u212a\u212a" -> 10
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03\xfe\xff\xff\a\xfe\xff\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst10
			}
			goto inst8_fail
		}
		if cr == 383 || cr == 8490 {
			i += sz
			goto inst10
		}
	}
	goto inst8_fail
	goto unreachable
	goto inst8_fail
inst8_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 9:
			goto inst9_alt
		}
	}
	goto fail

	goto unreachable
	goto inst10
inst10: // string "." -> 11
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst11
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 9:
			goto inst9_alt
		}
	}
	goto fail

	goto unreachable
	goto inst11
inst11: // alt -> 5, 12
	{
		idx := i*6 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateEmail{c, i, 11, 0})
	goto inst5
inst11_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst12
	}
	goto unreachable

	goto unreachable
	goto inst12
inst12: // rune "09AZaz\u017f\u017f\u212a\u212a" -> 16
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03\xfe\xff\xff\a\xfe\xff\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst16
			}
			goto inst12_fail
		}
		if cr == 383 || cr == 8490 {
			i += sz
			goto inst16
		}
	}
	goto inst12_fail
	goto unreachable
	goto inst12_fail
inst12_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 9:
			goto inst9_alt
		}
	}
	goto fail

	goto unreachable
	goto inst13
inst13: // rune "--09AZaz\u017f\u017f\u212a\u212a" -> 14
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00 \xff\x03\xfe\xff\xff\a\xfe\xff\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst14
			}
			goto inst13_fail
		}
		if cr == 383 || cr == 8490 {
			i += sz
			goto inst14
		}
	}
	goto inst13_fail
	goto unreachable
	goto inst13_fail
inst13_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 14:
			goto inst14_alt
		}
	}
	goto fail

	goto unreachable
	goto inst14
inst14: // alt -> 13, 15
	{
		idx := i*6 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 14 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst13
		}
	}
	bt = append(bt, stateEmail{c, i, 14, 0})
	goto inst13
inst14_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst15
	}
	goto unreachable

	goto unreachable
	goto inst15
inst15: // rune "09AZaz\u017f\u017f\u212a\u212a" -> 17
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03\xfe\xff\xff\a\xfe\xff\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst17
			}
			goto inst15_fail
		}
		if cr == 383 || cr == 8490 {
			i += sz
			goto inst17
		}
	}
	goto inst15_fail
	goto unreachable
	goto inst15_fail
inst15_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 16:
			goto inst16_alt
		}
	}
	goto fail

	goto unreachable
	goto inst16
inst16: // alt -> 14, 17
	{
		idx := i*6 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateEmail{c, i, 16, 0})
	goto inst14
inst16_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst17
	}
	goto unreachable

	goto unreachable
	goto inst17
inst17: // cap 3 -> 18
	c[3] = i
	goto inst18

	goto unreachable
	goto inst18
inst18: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 3:
				goto inst3_alt
			case 7:
				goto inst7_alt
			case 9:
				goto inst9_alt
			case 11:
				goto inst11_alt
			case 14:
				goto inst14_alt
			case 16:
				goto inst16_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchEmail || m == modeFirstEmail {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
