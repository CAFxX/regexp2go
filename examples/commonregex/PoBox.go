// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="PoBox" -pool=true "(?i)P\\.? ?O\\.? Box \\d+"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const PoBoxRegexp = "(?i)P\\.? ?O\\.? Box \\d+"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypePoBox uint8

const (
	modeMatchPoBox modeTypePoBox = iota
	modeFirstPoBox
	modeLongestPoBox
)

// PoBox implements the regular expression
// (?i)P\.? ?O\.? Box \d+
// with flags 212.
type PoBox struct{}
type statePoBox struct {
	c   [2]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e PoBox) FindString(r string) (matches [1]string, pos int, ok bool) {
	var bt [4]statePoBox // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstPoBox, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e PoBox) FindLongestString(r string) (matches [1]string, pos int, ok bool) {
	var bt [4]statePoBox // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestPoBox, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e PoBox) Find(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [4]statePoBox // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstPoBox, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e PoBox) FindLongest(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [4]statePoBox // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestPoBox, bt[:0])
	return
}

func (e PoBox) doByteSlice(s []byte, m modeTypePoBox, bt []statePoBox) (matches [1][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [1 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e PoBox) doString(s string, m modeTypePoBox, bt []statePoBox) (matches [1]string, pos int, ok bool) {
	var pmatches [1 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e PoBox) do(r string, m modeTypePoBox, bt []statePoBox) ([2]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*4 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]         // fast reset dynamic backtracking state
	c := [2]int{-1, -1} // captures
	var bc [2]int       // captures for the longest match so far
	matched := false    // succesful match flag
	i := si             // current byte index
	c[0] = i            // start of match
	goto inst1          // initial instruction

	// inst0 unreacheable

	goto unreachable
	goto inst1
inst1: // rune "P"/i -> 3
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 80 || cr == 112 {
			i += sz
			goto inst3
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	goto fail

	goto unreachable
	goto inst3
inst3: // alt -> 2, 5
	{
		idx := i*4 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePoBox{c, i, 3, 0})
	goto inst2
inst3_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst5
	}
	goto unreachable

	goto unreachable
	goto inst2
inst2: // string "." -> 5
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst5
		}
	}
	goto inst2_fail
	goto unreachable
	goto inst2_fail
inst2_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 3:
			goto inst3_alt
		}
	}
	goto fail

	goto unreachable
	goto inst5
inst5: // alt -> 4, 6
	{
		idx := i*4 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePoBox{c, i, 5, 0})
	goto inst4
inst5_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst6
	}
	goto unreachable

	goto unreachable
	goto inst4
inst4: // string " " -> 6
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == " " {
			i += 1
			goto inst6
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		}
	}
	goto fail

	goto unreachable
	goto inst6
inst6: // rune "O"/i -> 8
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 79 || cr == 111 {
			i += sz
			goto inst8
		}
	}
	goto inst6_fail
	goto unreachable
	goto inst6_fail
inst6_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 3:
			goto inst3_alt
		case 5:
			goto inst5_alt
		}
	}
	goto fail

	goto unreachable
	goto inst8
inst8: // alt -> 7, 9
	{
		idx := i*4 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePoBox{c, i, 8, 0})
	goto inst7
inst8_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst9
	}
	goto unreachable

	goto unreachable
	goto inst7
inst7: // string ". " -> 10
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 2 && rs[:2] == ". " {
			i += 2
			goto inst10
		}
	}
	goto inst7_fail
	goto unreachable
	goto inst7_fail
inst7_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst9
inst9: // string " " -> 10
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == " " {
			i += 1
			goto inst10
		}
	}
	goto inst9_fail
	goto unreachable
	goto inst9_fail
inst9_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 3:
			goto inst3_alt
		case 5:
			goto inst5_alt
		}
	}
	goto fail

	goto unreachable
	goto inst10
inst10: // rune "B"/i -> 11
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 66 || cr == 98 {
			i += sz
			goto inst11
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 3:
			goto inst3_alt
		case 5:
			goto inst5_alt
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst11
inst11: // rune "O"/i -> 12
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 79 || cr == 111 {
			i += sz
			goto inst12
		}
	}
	goto inst11_fail
	goto unreachable
	goto inst11_fail
inst11_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 3:
			goto inst3_alt
		case 5:
			goto inst5_alt
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst12
inst12: // rune "X"/i -> 13
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 88 || cr == 120 {
			i += sz
			goto inst13
		}
	}
	goto inst12_fail
	goto unreachable
	goto inst12_fail
inst12_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 3:
			goto inst3_alt
		case 5:
			goto inst5_alt
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst13
inst13: // string " " -> 14
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == " " {
			i += 1
			goto inst14
		}
	}
	goto inst13_fail
	goto unreachable
	goto inst13_fail
inst13_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 3:
			goto inst3_alt
		case 5:
			goto inst5_alt
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst14
inst14: // rune "09" -> 15
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst15
		}
	}
	goto inst14_fail
	goto unreachable
	goto inst14_fail
inst14_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 3:
			goto inst3_alt
		case 5:
			goto inst5_alt
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst15
inst15: // alt -> 14, 16
	{
		idx := i*4 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 15 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst14
		}
	}
	bt = append(bt, statePoBox{c, i, 15, 0})
	goto inst14
inst15_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst16
	}
	goto unreachable

	goto unreachable
	goto inst16
inst16: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 3:
				goto inst3_alt
			case 5:
				goto inst5_alt
			case 8:
				goto inst8_alt
			case 15:
				goto inst15_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchPoBox || m == modeFirstPoBox {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
