// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="Link" -pool=true "(?:(?:https?:\\/\\/)?(?:[a-z0-9.\\-]+|www|[a-z0-9.\\-])[.](?:[^\\s()<>]+|\\((?:[^\\s()<>]+|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]+|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s!()\\[\\]{};:\\'\".,<>?]))"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const LinkRegexp = "(?:(?:https?:\\/\\/)?(?:[a-z0-9.\\-]+|www|[a-z0-9.\\-])[.](?:[^\\s()<>]+|\\((?:[^\\s()<>]+|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]+|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s!()\\[\\]{};:\\'\".,<>?]))"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeLink uint8

const (
	modeMatchLink modeTypeLink = iota
	modeFirstLink
	modeLongestLink
)

// Link implements the regular expression
// (?:(?:https?:\/\/)?(?:[a-z0-9.\-]+|www|[a-z0-9.\-])[.](?:[^\s()<>]+|\((?:[^\s()<>]+|(?:\([^\s()<>]+\)))*\))+(?:\((?:[^\s()<>]+|(?:\([^\s()<>]+\)))*\)|[^\s!()\[\]{};:\'".,<>?]))
// with flags 212.
type Link struct{}
type stateLink struct {
	c   [2]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e Link) FindString(r string) (matches [1]string, pos int, ok bool) {
	var bt [17]stateLink // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstLink, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e Link) FindLongestString(r string) (matches [1]string, pos int, ok bool) {
	var bt [17]stateLink // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestLink, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e Link) Find(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [17]stateLink // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstLink, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e Link) FindLongest(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [17]stateLink // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestLink, bt[:0])
	return
}

func (e Link) doByteSlice(s []byte, m modeTypeLink, bt []stateLink) (matches [1][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [1 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e Link) doString(s string, m modeTypeLink, bt []stateLink) (matches [1]string, pos int, ok bool) {
	var pmatches [1 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e Link) do(r string, m modeTypeLink, bt []stateLink) ([2]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*17 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]         // fast reset dynamic backtracking state
	c := [2]int{-1, -1} // captures
	var bc [2]int       // captures for the longest match so far
	matched := false    // succesful match flag
	i := si             // current byte index
	c[0] = i            // start of match
	goto inst10         // initial instruction

	// inst0 unreacheable

	// inst3 unreacheable

	// inst4 unreacheable

	// inst8 unreacheable

	// inst9 unreacheable

	goto unreachable
	goto inst10
inst10: // alt -> 1, 18
	{
		idx := i*17 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateLink{c, i, 10, 0})
	goto inst1
inst10_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst18
	}
	goto unreachable

	goto unreachable
	goto inst1
inst1: // string "http" -> 6
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 4 && rs[:4] == "http" {
			i += 4
			goto inst6
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 10:
			goto inst10_alt
		}
	}
	goto fail

	goto unreachable
	goto inst6
inst6: // alt -> 5, 7
	{
		idx := i*17 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateLink{c, i, 6, 0})
	goto inst5
inst6_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst7
	}
	goto unreachable

	goto unreachable
	goto inst7
inst7: // string "://" -> 18
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 3 && rs[:3] == "://" {
			i += 3
			goto inst18
		}
	}
	goto inst7_fail
	goto unreachable
	goto inst7_fail
inst7_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 10:
			goto inst10_alt
		}
	}
	goto fail

	goto unreachable
	goto inst5
inst5: // string "s://" -> 18
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 4 && rs[:4] == "s://" {
			i += 4
			goto inst18
		}
	}
	goto inst5_fail
	goto unreachable
	goto inst5_fail
inst5_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		}
	}
	goto fail

	goto unreachable
	goto inst18
inst18: // alt -> 16, 17
	{
		idx := i*17 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateLink{c, i, 18, 0})
	goto inst16
inst18_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst17
	}
	goto unreachable

	goto unreachable
	goto inst16
inst16: // alt -> 11, 13
	{
		idx := i*17 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateLink{c, i, 16, 0})
	goto inst11
inst16_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst13
	}
	goto unreachable

	goto unreachable
	goto inst11
inst11: // rune "-.09az" -> 12
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00`\xff\x03\x00\x00\x00\x00\xfe\xff\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst12
			}
			goto inst11_fail
		}
	}
	goto inst11_fail
	goto unreachable
	goto inst11_fail
inst11_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 16:
			goto inst16_alt
		}
	}
	goto fail

	goto unreachable
	goto inst12
inst12: // alt -> 11, 19
	{
		idx := i*17 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 12 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst11
		}
	}
	bt = append(bt, stateLink{c, i, 12, 0})
	goto inst11
inst12_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst19
	}
	goto unreachable

	goto unreachable
	goto inst17
inst17: // rune "-.09az" -> 19
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00`\xff\x03\x00\x00\x00\x00\xfe\xff\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst19
			}
			goto inst17_fail
		}
	}
	goto inst17_fail
	goto unreachable
	goto inst17_fail
inst17_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 10:
			goto inst10_alt
		}
	}
	goto fail

	goto unreachable
	goto inst19
inst19: // string "." -> 32
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst32
		}
	}
	goto inst19_fail
	goto unreachable
	goto inst19_fail
inst19_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 10:
			goto inst10_alt
		case 16:
			goto inst16_alt
		}
	}
	goto fail

	// inst15 unreacheable

	// inst14 unreacheable

	goto unreachable
	goto inst13
inst13: // string "www." -> 32
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 4 && rs[:4] == "www." {
			i += 4
			goto inst32
		}
	}
	goto inst13_fail
	goto unreachable
	goto inst13_fail
inst13_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 18:
			goto inst18_alt
		}
	}
	goto fail

	goto unreachable
	goto inst32
inst32: // alt -> 20, 22
	{
		idx := i*17 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateLink{c, i, 32, 0})
	goto inst20
inst32_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst22
	}
	goto unreachable

	goto unreachable
	goto inst20
inst20: // rune "\x00\b\v\v\x0e\x1f!'*;==?\U0010ffff" -> 21
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\xff\xc9\xff\xff\xfe\xfc\xff\xaf\xff\xff\xff\xff\xff\xff\xff\xff"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst21
			}
			goto inst20_fail
		}
		if cr >= 63 && cr <= 1114111 {
			i += sz
			goto inst21
		}
	}
	goto inst20_fail
	goto unreachable
	goto inst20_fail
inst20_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 32:
			goto inst32_alt
		}
	}
	goto fail

	goto unreachable
	goto inst21
inst21: // alt -> 20, 33
	{
		idx := i*17 + 6
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 21 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst20
		}
	}
	bt = append(bt, stateLink{c, i, 21, 0})
	goto inst20
inst21_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst33
	}
	goto unreachable

	goto unreachable
	goto inst22
inst22: // string "(" -> 30
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "(" {
			i += 1
			goto inst30
		}
	}
	goto inst22_fail
	goto unreachable
	goto inst22_fail
inst22_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 10:
			goto inst10_alt
		case 16:
			goto inst16_alt
		case 18:
			goto inst18_alt
		}
	}
	goto fail

	goto unreachable
	goto inst23
inst23: // rune "\x00\b\v\v\x0e\x1f!'*;==?\U0010ffff" -> 24
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\xff\xc9\xff\xff\xfe\xfc\xff\xaf\xff\xff\xff\xff\xff\xff\xff\xff"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst24
			}
			goto inst23_fail
		}
		if cr >= 63 && cr <= 1114111 {
			i += sz
			goto inst24
		}
	}
	goto inst23_fail
	goto unreachable
	goto inst23_fail
inst23_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 29:
			goto inst29_alt
		}
	}
	goto fail

	goto unreachable
	goto inst24
inst24: // alt -> 23, 30
	{
		idx := i*17 + 7
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 24 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst23
		}
	}
	bt = append(bt, stateLink{c, i, 24, 0})
	goto inst23
inst24_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst30
	}
	goto unreachable

	goto unreachable
	goto inst25
inst25: // string "(" -> 26
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "(" {
			i += 1
			goto inst26
		}
	}
	goto inst25_fail
	goto unreachable
	goto inst25_fail
inst25_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 30:
			goto inst30_alt
		}
	}
	goto fail

	goto unreachable
	goto inst26
inst26: // rune "\x00\b\v\v\x0e\x1f!'*;==?\U0010ffff" -> 27
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\xff\xc9\xff\xff\xfe\xfc\xff\xaf\xff\xff\xff\xff\xff\xff\xff\xff"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst27
			}
			goto inst26_fail
		}
		if cr >= 63 && cr <= 1114111 {
			i += sz
			goto inst27
		}
	}
	goto inst26_fail
	goto unreachable
	goto inst26_fail
inst26_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 30:
			goto inst30_alt
		}
	}
	goto fail

	goto unreachable
	goto inst27
inst27: // alt -> 26, 28
	{
		idx := i*17 + 8
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 27 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst26
		}
	}
	bt = append(bt, stateLink{c, i, 27, 0})
	goto inst26
inst27_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst28
	}
	goto unreachable

	goto unreachable
	goto inst28
inst28: // string ")" -> 30
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ")" {
			i += 1
			goto inst30
		}
	}
	goto inst28_fail
	goto unreachable
	goto inst28_fail
inst28_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 30:
			goto inst30_alt
		}
	}
	goto fail

	goto unreachable
	goto inst29
inst29: // alt -> 23, 25
	{
		idx := i*17 + 9
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateLink{c, i, 29, 0})
	goto inst23
inst29_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst25
	}
	goto unreachable

	goto unreachable
	goto inst30
inst30: // alt -> 29, 31
	{
		idx := i*17 + 10
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateLink{c, i, 30, 0})
	goto inst29
inst30_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst31
	}
	goto unreachable

	goto unreachable
	goto inst31
inst31: // string ")" -> 33
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ")" {
			i += 1
			goto inst33
		}
	}
	goto inst31_fail
	goto unreachable
	goto inst31_fail
inst31_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 10:
			goto inst10_alt
		case 16:
			goto inst16_alt
		case 18:
			goto inst18_alt
		}
	}
	goto fail

	goto unreachable
	goto inst33
inst33: // alt -> 32, 45
	{
		idx := i*17 + 11
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateLink{c, i, 33, 0})
	goto inst32
inst33_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst45
	}
	goto unreachable

	goto unreachable
	goto inst34
inst34: // string "(" -> 42
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "(" {
			i += 1
			goto inst42
		}
	}
	goto inst34_fail
	goto unreachable
	goto inst34_fail
inst34_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 45:
			goto inst45_alt
		}
	}
	goto fail

	goto unreachable
	goto inst45
inst45: // alt -> 34, 44
	{
		idx := i*17 + 12
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateLink{c, i, 45, 0})
	goto inst34
inst45_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst44
	}
	goto unreachable

	goto unreachable
	goto inst35
inst35: // rune "\x00\b\v\v\x0e\x1f!'*;==?\U0010ffff" -> 36
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\xff\xc9\xff\xff\xfe\xfc\xff\xaf\xff\xff\xff\xff\xff\xff\xff\xff"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst36
			}
			goto inst35_fail
		}
		if cr >= 63 && cr <= 1114111 {
			i += sz
			goto inst36
		}
	}
	goto inst35_fail
	goto unreachable
	goto inst35_fail
inst35_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 41:
			goto inst41_alt
		}
	}
	goto fail

	goto unreachable
	goto inst36
inst36: // alt -> 35, 42
	{
		idx := i*17 + 13
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 36 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst35
		}
	}
	bt = append(bt, stateLink{c, i, 36, 0})
	goto inst35
inst36_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst42
	}
	goto unreachable

	goto unreachable
	goto inst41
inst41: // alt -> 35, 37
	{
		idx := i*17 + 14
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateLink{c, i, 41, 0})
	goto inst35
inst41_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst37
	}
	goto unreachable

	goto unreachable
	goto inst37
inst37: // string "(" -> 38
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "(" {
			i += 1
			goto inst38
		}
	}
	goto inst37_fail
	goto unreachable
	goto inst37_fail
inst37_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 42:
			goto inst42_alt
		}
	}
	goto fail

	goto unreachable
	goto inst39
inst39: // alt -> 38, 40
	{
		idx := i*17 + 15
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 39 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst38
		}
	}
	bt = append(bt, stateLink{c, i, 39, 0})
	goto inst38
inst39_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst40
	}
	goto unreachable

	goto unreachable
	goto inst38
inst38: // rune "\x00\b\v\v\x0e\x1f!'*;==?\U0010ffff" -> 39
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\xff\xc9\xff\xff\xfe\xfc\xff\xaf\xff\xff\xff\xff\xff\xff\xff\xff"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst39
			}
			goto inst38_fail
		}
		if cr >= 63 && cr <= 1114111 {
			i += sz
			goto inst39
		}
	}
	goto inst38_fail
	goto unreachable
	goto inst38_fail
inst38_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 42:
			goto inst42_alt
		}
	}
	goto fail

	goto unreachable
	goto inst42
inst42: // alt -> 41, 43
	{
		idx := i*17 + 16
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateLink{c, i, 42, 0})
	goto inst41
inst42_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst43
	}
	goto unreachable

	goto unreachable
	goto inst40
inst40: // string ")" -> 42
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ")" {
			i += 1
			goto inst42
		}
	}
	goto inst40_fail
	goto unreachable
	goto inst40_fail
inst40_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 42:
			goto inst42_alt
		}
	}
	goto fail

	goto unreachable
	goto inst43
inst43: // string ")" -> 46
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ")" {
			i += 1
			goto inst46
		}
	}
	goto inst43_fail
	goto unreachable
	goto inst43_fail
inst43_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 45:
			goto inst45_alt
		}
	}
	goto fail

	goto unreachable
	goto inst44
inst44: // rune "\x00\b\v\v\x0e\x1f#&*+--/9==@Z\\\\^z||~\U0010ffff" -> 46
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\xff\xc9\xff\xffx\xac\xff#\xff\xff\xff\xd7\xff\xff\xff\xd7"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst46
			}
			goto inst44_fail
		}
		if cr >= 126 && cr <= 1114111 {
			i += sz
			goto inst46
		}
	}
	goto inst44_fail
	goto unreachable
	goto inst44_fail
inst44_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 10:
			goto inst10_alt
		case 16:
			goto inst16_alt
		case 18:
			goto inst18_alt
		case 32:
			goto inst32_alt
		}
	}
	goto fail

	// inst2 unreacheable

	goto unreachable
	goto inst46
inst46: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 10:
				goto inst10_alt
			case 6:
				goto inst6_alt
			case 18:
				goto inst18_alt
			case 16:
				goto inst16_alt
			case 12:
				goto inst12_alt
			case 32:
				goto inst32_alt
			case 21:
				goto inst21_alt
			case 24:
				goto inst24_alt
			case 27:
				goto inst27_alt
			case 29:
				goto inst29_alt
			case 30:
				goto inst30_alt
			case 33:
				goto inst33_alt
			case 45:
				goto inst45_alt
			case 36:
				goto inst36_alt
			case 41:
				goto inst41_alt
			case 39:
				goto inst39_alt
			case 42:
				goto inst42_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchLink || m == modeFirstLink {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
