// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="BtcAddress" -pool=true "[13][a-km-zA-HJ-NP-Z1-9]{25,34}"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const BtcAddressRegexp = "[13][a-km-zA-HJ-NP-Z1-9]{25,34}"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeBtcAddress uint8

const (
	modeMatchBtcAddress modeTypeBtcAddress = iota
	modeFirstBtcAddress
	modeLongestBtcAddress
)

// BtcAddress implements the regular expression
// [13][a-km-zA-HJ-NP-Z1-9]{25,34}
// with flags 212.
type BtcAddress struct{}
type stateBtcAddress struct {
	c   [2]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e BtcAddress) FindString(r string) (matches [1]string, pos int, ok bool) {
	var bt [9]stateBtcAddress // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstBtcAddress, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e BtcAddress) FindLongestString(r string) (matches [1]string, pos int, ok bool) {
	var bt [9]stateBtcAddress // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestBtcAddress, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e BtcAddress) Find(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [9]stateBtcAddress // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstBtcAddress, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e BtcAddress) FindLongest(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [9]stateBtcAddress // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestBtcAddress, bt[:0])
	return
}

func (e BtcAddress) doByteSlice(s []byte, m modeTypeBtcAddress, bt []stateBtcAddress) (matches [1][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [1 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e BtcAddress) doString(s string, m modeTypeBtcAddress, bt []stateBtcAddress) (matches [1]string, pos int, ok bool) {
	var pmatches [1 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e BtcAddress) do(r string, m modeTypeBtcAddress, bt []stateBtcAddress) ([2]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*9 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]         // fast reset dynamic backtracking state
	c := [2]int{-1, -1} // captures
	var bc [2]int       // captures for the longest match so far
	matched := false    // succesful match flag
	i := si             // current byte index
	c[0] = i            // start of match
	goto inst1          // initial instruction

	// inst0 unreacheable

	goto unreachable
	goto inst1
inst1: // rune "1133" -> 2
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 49 || cr == 51 {
			i += sz
			goto inst2
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	goto fail

	goto unreachable
	goto inst2
inst2: // rune "19AHJNPZakmz" -> 3
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst3
			}
			goto inst2_fail
		}
	}
	goto inst2_fail
	goto unreachable
	goto inst2_fail
inst2_fail:
	goto fail

	goto unreachable
	goto inst3
inst3: // rune "19AHJNPZakmz" -> 4
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst4
			}
			goto inst3_fail
		}
	}
	goto inst3_fail
	goto unreachable
	goto inst3_fail
inst3_fail:
	goto fail

	goto unreachable
	goto inst4
inst4: // rune "19AHJNPZakmz" -> 5
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst5
			}
			goto inst4_fail
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	goto fail

	goto unreachable
	goto inst5
inst5: // rune "19AHJNPZakmz" -> 6
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst6
			}
			goto inst5_fail
		}
	}
	goto inst5_fail
	goto unreachable
	goto inst5_fail
inst5_fail:
	goto fail

	goto unreachable
	goto inst6
inst6: // rune "19AHJNPZakmz" -> 7
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst7
			}
			goto inst6_fail
		}
	}
	goto inst6_fail
	goto unreachable
	goto inst6_fail
inst6_fail:
	goto fail

	goto unreachable
	goto inst7
inst7: // rune "19AHJNPZakmz" -> 8
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst8
			}
			goto inst7_fail
		}
	}
	goto inst7_fail
	goto unreachable
	goto inst7_fail
inst7_fail:
	goto fail

	goto unreachable
	goto inst8
inst8: // rune "19AHJNPZakmz" -> 9
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst9
			}
			goto inst8_fail
		}
	}
	goto inst8_fail
	goto unreachable
	goto inst8_fail
inst8_fail:
	goto fail

	goto unreachable
	goto inst9
inst9: // rune "19AHJNPZakmz" -> 10
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst10
			}
			goto inst9_fail
		}
	}
	goto inst9_fail
	goto unreachable
	goto inst9_fail
inst9_fail:
	goto fail

	goto unreachable
	goto inst10
inst10: // rune "19AHJNPZakmz" -> 11
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst11
			}
			goto inst10_fail
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	goto fail

	goto unreachable
	goto inst11
inst11: // rune "19AHJNPZakmz" -> 12
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst12
			}
			goto inst11_fail
		}
	}
	goto inst11_fail
	goto unreachable
	goto inst11_fail
inst11_fail:
	goto fail

	goto unreachable
	goto inst12
inst12: // rune "19AHJNPZakmz" -> 13
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst13
			}
			goto inst12_fail
		}
	}
	goto inst12_fail
	goto unreachable
	goto inst12_fail
inst12_fail:
	goto fail

	goto unreachable
	goto inst13
inst13: // rune "19AHJNPZakmz" -> 14
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst14
			}
			goto inst13_fail
		}
	}
	goto inst13_fail
	goto unreachable
	goto inst13_fail
inst13_fail:
	goto fail

	goto unreachable
	goto inst14
inst14: // rune "19AHJNPZakmz" -> 15
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst15
			}
			goto inst14_fail
		}
	}
	goto inst14_fail
	goto unreachable
	goto inst14_fail
inst14_fail:
	goto fail

	goto unreachable
	goto inst15
inst15: // rune "19AHJNPZakmz" -> 16
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst16
			}
			goto inst15_fail
		}
	}
	goto inst15_fail
	goto unreachable
	goto inst15_fail
inst15_fail:
	goto fail

	goto unreachable
	goto inst16
inst16: // rune "19AHJNPZakmz" -> 17
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst17
			}
			goto inst16_fail
		}
	}
	goto inst16_fail
	goto unreachable
	goto inst16_fail
inst16_fail:
	goto fail

	goto unreachable
	goto inst17
inst17: // rune "19AHJNPZakmz" -> 18
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst18
			}
			goto inst17_fail
		}
	}
	goto inst17_fail
	goto unreachable
	goto inst17_fail
inst17_fail:
	goto fail

	goto unreachable
	goto inst18
inst18: // rune "19AHJNPZakmz" -> 19
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst19
			}
			goto inst18_fail
		}
	}
	goto inst18_fail
	goto unreachable
	goto inst18_fail
inst18_fail:
	goto fail

	goto unreachable
	goto inst19
inst19: // rune "19AHJNPZakmz" -> 20
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst20
			}
			goto inst19_fail
		}
	}
	goto inst19_fail
	goto unreachable
	goto inst19_fail
inst19_fail:
	goto fail

	goto unreachable
	goto inst20
inst20: // rune "19AHJNPZakmz" -> 21
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst21
			}
			goto inst20_fail
		}
	}
	goto inst20_fail
	goto unreachable
	goto inst20_fail
inst20_fail:
	goto fail

	goto unreachable
	goto inst21
inst21: // rune "19AHJNPZakmz" -> 22
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst22
			}
			goto inst21_fail
		}
	}
	goto inst21_fail
	goto unreachable
	goto inst21_fail
inst21_fail:
	goto fail

	goto unreachable
	goto inst22
inst22: // rune "19AHJNPZakmz" -> 23
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst23
			}
			goto inst22_fail
		}
	}
	goto inst22_fail
	goto unreachable
	goto inst22_fail
inst22_fail:
	goto fail

	goto unreachable
	goto inst23
inst23: // rune "19AHJNPZakmz" -> 24
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst24
			}
			goto inst23_fail
		}
	}
	goto inst23_fail
	goto unreachable
	goto inst23_fail
inst23_fail:
	goto fail

	goto unreachable
	goto inst24
inst24: // rune "19AHJNPZakmz" -> 25
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst25
			}
			goto inst24_fail
		}
	}
	goto inst24_fail
	goto unreachable
	goto inst24_fail
inst24_fail:
	goto fail

	goto unreachable
	goto inst25
inst25: // rune "19AHJNPZakmz" -> 26
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst26
			}
			goto inst25_fail
		}
	}
	goto inst25_fail
	goto unreachable
	goto inst25_fail
inst25_fail:
	goto fail

	goto unreachable
	goto inst26
inst26: // rune "19AHJNPZakmz" -> 44
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst44
			}
			goto inst26_fail
		}
	}
	goto inst26_fail
	goto unreachable
	goto inst26_fail
inst26_fail:
	goto fail

	goto unreachable
	goto inst37
inst37: // alt -> 34, 45
	{
		idx := i*9 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateBtcAddress{c, i, 37, 0})
	goto inst34
inst37_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst45
	}
	goto unreachable

	goto unreachable
	goto inst33
inst33: // rune "19AHJNPZakmz" -> 37
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst37
			}
			goto inst33_fail
		}
	}
	goto inst33_fail
	goto unreachable
	goto inst33_fail
inst33_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 38:
			goto inst38_alt
		}
	}
	goto fail

	goto unreachable
	goto inst32
inst32: // rune "19AHJNPZakmz" -> 38
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst38
			}
			goto inst32_fail
		}
	}
	goto inst32_fail
	goto unreachable
	goto inst32_fail
inst32_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 39:
			goto inst39_alt
		}
	}
	goto fail

	goto unreachable
	goto inst34
inst34: // rune "19AHJNPZakmz" -> 36
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst36
			}
			goto inst34_fail
		}
	}
	goto inst34_fail
	goto unreachable
	goto inst34_fail
inst34_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 37:
			goto inst37_alt
		}
	}
	goto fail

	goto unreachable
	goto inst38
inst38: // alt -> 33, 45
	{
		idx := i*9 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateBtcAddress{c, i, 38, 0})
	goto inst33
inst38_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst45
	}
	goto unreachable

	goto unreachable
	goto inst35
inst35: // rune "19AHJNPZakmz" -> 45
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst45
			}
			goto inst35_fail
		}
	}
	goto inst35_fail
	goto unreachable
	goto inst35_fail
inst35_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		}
	}
	goto fail

	goto unreachable
	goto inst36
inst36: // alt -> 35, 45
	{
		idx := i*9 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateBtcAddress{c, i, 36, 0})
	goto inst35
inst36_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst45
	}
	goto unreachable

	goto unreachable
	goto inst30
inst30: // rune "19AHJNPZakmz" -> 40
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst40
			}
			goto inst30_fail
		}
	}
	goto inst30_fail
	goto unreachable
	goto inst30_fail
inst30_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 41:
			goto inst41_alt
		}
	}
	goto fail

	goto unreachable
	goto inst45
inst45: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto inst40
inst40: // alt -> 31, 45
	{
		idx := i*9 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateBtcAddress{c, i, 40, 0})
	goto inst31
inst40_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst45
	}
	goto unreachable

	goto unreachable
	goto inst44
inst44: // alt -> 27, 45
	{
		idx := i*9 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateBtcAddress{c, i, 44, 0})
	goto inst27
inst44_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst45
	}
	goto unreachable

	goto unreachable
	goto inst41
inst41: // alt -> 30, 45
	{
		idx := i*9 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateBtcAddress{c, i, 41, 0})
	goto inst30
inst41_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst45
	}
	goto unreachable

	goto unreachable
	goto inst29
inst29: // rune "19AHJNPZakmz" -> 41
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst41
			}
			goto inst29_fail
		}
	}
	goto inst29_fail
	goto unreachable
	goto inst29_fail
inst29_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 42:
			goto inst42_alt
		}
	}
	goto fail

	goto unreachable
	goto inst31
inst31: // rune "19AHJNPZakmz" -> 39
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst39
			}
			goto inst31_fail
		}
	}
	goto inst31_fail
	goto unreachable
	goto inst31_fail
inst31_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 40:
			goto inst40_alt
		}
	}
	goto fail

	goto unreachable
	goto inst39
inst39: // alt -> 32, 45
	{
		idx := i*9 + 6
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateBtcAddress{c, i, 39, 0})
	goto inst32
inst39_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst45
	}
	goto unreachable

	goto unreachable
	goto inst42
inst42: // alt -> 29, 45
	{
		idx := i*9 + 7
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateBtcAddress{c, i, 42, 0})
	goto inst29
inst42_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst45
	}
	goto unreachable

	goto unreachable
	goto inst28
inst28: // rune "19AHJNPZakmz" -> 42
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst42
			}
			goto inst28_fail
		}
	}
	goto inst28_fail
	goto unreachable
	goto inst28_fail
inst28_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 43:
			goto inst43_alt
		}
	}
	goto fail

	goto unreachable
	goto inst43
inst43: // alt -> 28, 45
	{
		idx := i*9 + 8
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateBtcAddress{c, i, 43, 0})
	goto inst28
inst43_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst45
	}
	goto unreachable

	goto unreachable
	goto inst27
inst27: // rune "19AHJNPZakmz" -> 43
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xfe\x03\xfe}\xff\a\xfe\xef\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst43
			}
			goto inst27_fail
		}
	}
	goto inst27_fail
	goto unreachable
	goto inst27_fail
inst27_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 37:
				goto inst37_alt
			case 38:
				goto inst38_alt
			case 36:
				goto inst36_alt
			case 40:
				goto inst40_alt
			case 44:
				goto inst44_alt
			case 41:
				goto inst41_alt
			case 39:
				goto inst39_alt
			case 42:
				goto inst42_alt
			case 43:
				goto inst43_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchBtcAddress || m == modeFirstBtcAddress {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
