// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="IPv4" -pool=true "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const IPv4Regexp = "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeIPv4 uint8

const (
	modeMatchIPv4 modeTypeIPv4 = iota
	modeFirstIPv4
	modeLongestIPv4
)

// IPv4 implements the regular expression
// (?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)
// with flags 212.
type IPv4 struct{}
type stateIPv4 struct {
	c   [2]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e IPv4) FindString(r string) (matches [1]string, pos int, ok bool) {
	var bt [16]stateIPv4 // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstIPv4, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e IPv4) FindLongestString(r string) (matches [1]string, pos int, ok bool) {
	var bt [16]stateIPv4 // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestIPv4, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e IPv4) Find(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [16]stateIPv4 // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstIPv4, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e IPv4) FindLongest(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [16]stateIPv4 // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestIPv4, bt[:0])
	return
}

func (e IPv4) doByteSlice(s []byte, m modeTypeIPv4, bt []stateIPv4) (matches [1][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [1 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e IPv4) doString(s string, m modeTypeIPv4, bt []stateIPv4) (matches [1]string, pos int, ok bool) {
	var pmatches [1 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e IPv4) do(r string, m modeTypeIPv4, bt []stateIPv4) ([2]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*16 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]         // fast reset dynamic backtracking state
	c := [2]int{-1, -1} // captures
	var bc [2]int       // captures for the longest match so far
	matched := false    // succesful match flag
	i := si             // current byte index
	c[0] = i            // start of match
	goto inst12         // initial instruction

	goto unreachable
	goto inst1
inst1: // string "2" -> 6
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst6
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 12:
			goto inst12_alt
		}
	}
	goto fail

	goto unreachable
	goto inst6
inst6: // alt -> 2, 4
	{
		idx := i*16 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 6, 0})
	goto inst2
inst6_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst4
	}
	goto unreachable

	goto unreachable
	goto inst2
inst2: // string "5" -> 3
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst3
		}
	}
	goto inst2_fail
	goto unreachable
	goto inst2_fail
inst2_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		}
	}
	goto fail

	goto unreachable
	goto inst3
inst3: // rune "05" -> 13
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst13
		}
	}
	goto inst3_fail
	goto unreachable
	goto inst3_fail
inst3_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		}
	}
	goto fail

	goto unreachable
	goto inst4
inst4: // rune "04" -> 5
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst5
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 12:
			goto inst12_alt
		}
	}
	goto fail

	goto unreachable
	goto inst5
inst5: // rune "09" -> 13
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst13
		}
	}
	goto inst5_fail
	goto unreachable
	goto inst5_fail
inst5_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 12:
			goto inst12_alt
		}
	}
	goto fail

	goto unreachable
	goto inst12
inst12: // alt -> 1, 8
	{
		idx := i*16 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 12, 0})
	goto inst1
inst12_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst8
	}
	goto unreachable

	goto unreachable
	goto inst8
inst8: // alt -> 7, 9
	{
		idx := i*16 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 8, 0})
	goto inst7
inst8_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst9
	}
	goto unreachable

	goto unreachable
	goto inst7
inst7: // rune "01" -> 9
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || cr == 49 {
			i += sz
			goto inst9
		}
	}
	goto inst7_fail
	goto unreachable
	goto inst7_fail
inst7_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst9
inst9: // rune "09" -> 11
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst11
		}
	}
	goto inst9_fail
	goto unreachable
	goto inst9_fail
inst9_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst11
inst11: // alt -> 10, 13
	{
		idx := i*16 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 11, 0})
	goto inst10
inst11_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst13
	}
	goto unreachable

	goto unreachable
	goto inst13
inst13: // string "." -> 25
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst25
		}
	}
	goto inst13_fail
	goto unreachable
	goto inst13_fail
inst13_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 12:
			goto inst12_alt
		}
	}
	goto fail

	goto unreachable
	goto inst10
inst10: // rune "09" -> 13
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst13
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 11:
			goto inst11_alt
		}
	}
	goto fail

	goto unreachable
	goto inst25
inst25: // alt -> 14, 21
	{
		idx := i*16 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 25, 0})
	goto inst14
inst25_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst21
	}
	goto unreachable

	goto unreachable
	goto inst14
inst14: // string "2" -> 19
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst19
		}
	}
	goto inst14_fail
	goto unreachable
	goto inst14_fail
inst14_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 25:
			goto inst25_alt
		}
	}
	goto fail

	goto unreachable
	goto inst19
inst19: // alt -> 15, 17
	{
		idx := i*16 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 19, 0})
	goto inst15
inst19_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst17
	}
	goto unreachable

	goto unreachable
	goto inst15
inst15: // string "5" -> 16
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst16
		}
	}
	goto inst15_fail
	goto unreachable
	goto inst15_fail
inst15_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 19:
			goto inst19_alt
		}
	}
	goto fail

	goto unreachable
	goto inst17
inst17: // rune "04" -> 18
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst18
		}
	}
	goto inst17_fail
	goto unreachable
	goto inst17_fail
inst17_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 25:
			goto inst25_alt
		}
	}
	goto fail

	goto unreachable
	goto inst18
inst18: // rune "09" -> 26
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst26
		}
	}
	goto inst18_fail
	goto unreachable
	goto inst18_fail
inst18_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 25:
			goto inst25_alt
		}
	}
	goto fail

	goto unreachable
	goto inst16
inst16: // rune "05" -> 26
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst26
		}
	}
	goto inst16_fail
	goto unreachable
	goto inst16_fail
inst16_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 19:
			goto inst19_alt
		}
	}
	goto fail

	goto unreachable
	goto inst21
inst21: // alt -> 20, 22
	{
		idx := i*16 + 6
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 21, 0})
	goto inst20
inst21_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst22
	}
	goto unreachable

	goto unreachable
	goto inst20
inst20: // rune "01" -> 22
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || cr == 49 {
			i += sz
			goto inst22
		}
	}
	goto inst20_fail
	goto unreachable
	goto inst20_fail
inst20_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 21:
			goto inst21_alt
		}
	}
	goto fail

	goto unreachable
	goto inst22
inst22: // rune "09" -> 24
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst24
		}
	}
	goto inst22_fail
	goto unreachable
	goto inst22_fail
inst22_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 12:
			goto inst12_alt
		case 21:
			goto inst21_alt
		}
	}
	goto fail

	goto unreachable
	goto inst24
inst24: // alt -> 23, 26
	{
		idx := i*16 + 7
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 24, 0})
	goto inst23
inst24_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst26
	}
	goto unreachable

	goto unreachable
	goto inst26
inst26: // string "." -> 38
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst38
		}
	}
	goto inst26_fail
	goto unreachable
	goto inst26_fail
inst26_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 12:
			goto inst12_alt
		case 19:
			goto inst19_alt
		case 21:
			goto inst21_alt
		case 24:
			goto inst24_alt
		case 25:
			goto inst25_alt
		}
	}
	goto fail

	goto unreachable
	goto inst23
inst23: // rune "09" -> 26
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst26
		}
	}
	goto inst23_fail
	goto unreachable
	goto inst23_fail
inst23_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 24:
			goto inst24_alt
		}
	}
	goto fail

	goto unreachable
	goto inst32
inst32: // alt -> 28, 30
	{
		idx := i*16 + 8
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 32, 0})
	goto inst28
inst32_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst30
	}
	goto unreachable

	goto unreachable
	goto inst27
inst27: // string "2" -> 32
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst32
		}
	}
	goto inst27_fail
	goto unreachable
	goto inst27_fail
inst27_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 38:
			goto inst38_alt
		}
	}
	goto fail

	goto unreachable
	goto inst28
inst28: // string "5" -> 29
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst29
		}
	}
	goto inst28_fail
	goto unreachable
	goto inst28_fail
inst28_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 32:
			goto inst32_alt
		}
	}
	goto fail

	goto unreachable
	goto inst29
inst29: // rune "05" -> 39
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst39
		}
	}
	goto inst29_fail
	goto unreachable
	goto inst29_fail
inst29_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 32:
			goto inst32_alt
		}
	}
	goto fail

	goto unreachable
	goto inst30
inst30: // rune "04" -> 31
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst31
		}
	}
	goto inst30_fail
	goto unreachable
	goto inst30_fail
inst30_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 38:
			goto inst38_alt
		}
	}
	goto fail

	goto unreachable
	goto inst31
inst31: // rune "09" -> 39
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst39
		}
	}
	goto inst31_fail
	goto unreachable
	goto inst31_fail
inst31_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 38:
			goto inst38_alt
		}
	}
	goto fail

	goto unreachable
	goto inst38
inst38: // alt -> 27, 34
	{
		idx := i*16 + 9
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 38, 0})
	goto inst27
inst38_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst34
	}
	goto unreachable

	goto unreachable
	goto inst33
inst33: // rune "01" -> 35
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || cr == 49 {
			i += sz
			goto inst35
		}
	}
	goto inst33_fail
	goto unreachable
	goto inst33_fail
inst33_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 34:
			goto inst34_alt
		}
	}
	goto fail

	goto unreachable
	goto inst34
inst34: // alt -> 33, 35
	{
		idx := i*16 + 10
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 34, 0})
	goto inst33
inst34_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst35
	}
	goto unreachable

	goto unreachable
	goto inst35
inst35: // rune "09" -> 37
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst37
		}
	}
	goto inst35_fail
	goto unreachable
	goto inst35_fail
inst35_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 12:
			goto inst12_alt
		case 19:
			goto inst19_alt
		case 21:
			goto inst21_alt
		case 24:
			goto inst24_alt
		case 25:
			goto inst25_alt
		case 34:
			goto inst34_alt
		}
	}
	goto fail

	goto unreachable
	goto inst36
inst36: // rune "09" -> 39
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst39
		}
	}
	goto inst36_fail
	goto unreachable
	goto inst36_fail
inst36_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 37:
			goto inst37_alt
		}
	}
	goto fail

	goto unreachable
	goto inst37
inst37: // alt -> 36, 39
	{
		idx := i*16 + 11
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 37, 0})
	goto inst36
inst37_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst39
	}
	goto unreachable

	goto unreachable
	goto inst39
inst39: // string "." -> 51
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst51
		}
	}
	goto inst39_fail
	goto unreachable
	goto inst39_fail
inst39_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 12:
			goto inst12_alt
		case 19:
			goto inst19_alt
		case 21:
			goto inst21_alt
		case 24:
			goto inst24_alt
		case 25:
			goto inst25_alt
		case 32:
			goto inst32_alt
		case 34:
			goto inst34_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		}
	}
	goto fail

	goto unreachable
	goto inst45
inst45: // alt -> 41, 43
	{
		idx := i*16 + 12
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 45, 0})
	goto inst41
inst45_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst43
	}
	goto unreachable

	goto unreachable
	goto inst40
inst40: // string "2" -> 45
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst45
		}
	}
	goto inst40_fail
	goto unreachable
	goto inst40_fail
inst40_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst41
inst41: // string "5" -> 42
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst42
		}
	}
	goto inst41_fail
	goto unreachable
	goto inst41_fail
inst41_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 45:
			goto inst45_alt
		}
	}
	goto fail

	goto unreachable
	goto inst42
inst42: // rune "05" -> 52
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst52
		}
	}
	goto inst42_fail
	goto unreachable
	goto inst42_fail
inst42_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 45:
			goto inst45_alt
		}
	}
	goto fail

	goto unreachable
	goto inst43
inst43: // rune "04" -> 44
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst44
		}
	}
	goto inst43_fail
	goto unreachable
	goto inst43_fail
inst43_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst44
inst44: // rune "09" -> 52
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst52
		}
	}
	goto inst44_fail
	goto unreachable
	goto inst44_fail
inst44_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst51
inst51: // alt -> 40, 47
	{
		idx := i*16 + 13
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 51, 0})
	goto inst40
inst51_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst47
	}
	goto unreachable

	goto unreachable
	goto inst52
inst52: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto inst47
inst47: // alt -> 46, 48
	{
		idx := i*16 + 14
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 47, 0})
	goto inst46
inst47_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst48
	}
	goto unreachable

	goto unreachable
	goto inst48
inst48: // rune "09" -> 50
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst50
		}
	}
	goto inst48_fail
	goto unreachable
	goto inst48_fail
inst48_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 12:
			goto inst12_alt
		case 19:
			goto inst19_alt
		case 21:
			goto inst21_alt
		case 24:
			goto inst24_alt
		case 25:
			goto inst25_alt
		case 32:
			goto inst32_alt
		case 34:
			goto inst34_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 47:
			goto inst47_alt
		}
	}
	goto fail

	goto unreachable
	goto inst46
inst46: // rune "01" -> 48
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || cr == 49 {
			i += sz
			goto inst48
		}
	}
	goto inst46_fail
	goto unreachable
	goto inst46_fail
inst46_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 47:
			goto inst47_alt
		}
	}
	goto fail

	goto unreachable
	goto inst50
inst50: // alt -> 49, 52
	{
		idx := i*16 + 15
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv4{c, i, 50, 0})
	goto inst49
inst50_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst52
	}
	goto unreachable

	goto unreachable
	goto inst49
inst49: // rune "09" -> 52
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst52
		}
	}
	goto inst49_fail
	goto unreachable
	goto inst49_fail
inst49_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 50:
			goto inst50_alt
		}
	}
	goto fail

	// inst0 unreacheable

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 6:
				goto inst6_alt
			case 12:
				goto inst12_alt
			case 8:
				goto inst8_alt
			case 11:
				goto inst11_alt
			case 25:
				goto inst25_alt
			case 19:
				goto inst19_alt
			case 21:
				goto inst21_alt
			case 24:
				goto inst24_alt
			case 32:
				goto inst32_alt
			case 38:
				goto inst38_alt
			case 34:
				goto inst34_alt
			case 37:
				goto inst37_alt
			case 45:
				goto inst45_alt
			case 51:
				goto inst51_alt
			case 47:
				goto inst47_alt
			case 50:
				goto inst50_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchIPv4 || m == modeFirstIPv4 {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
