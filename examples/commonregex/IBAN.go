// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="IBAN" -pool=true "[A-Z]{2}\\d{2}[A-Z0-9]{4}\\d{7}([A-Z\\d]?){0,16}"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const IBANRegexp = "[A-Z]{2}\\d{2}[A-Z0-9]{4}\\d{7}([A-Z\\d]?){0,16}"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeIBAN uint8

const (
	modeMatchIBAN modeTypeIBAN = iota
	modeFirstIBAN
	modeLongestIBAN
)

// IBAN implements the regular expression
// [A-Z]{2}\d{2}[A-Z0-9]{4}\d{7}([A-Z\d]?){0,16}
// with flags 212.
type IBAN struct{}
type stateIBAN struct {
	c   [4]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e IBAN) FindString(r string) (matches [2]string, pos int, ok bool) {
	var bt [32]stateIBAN // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstIBAN, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e IBAN) FindLongestString(r string) (matches [2]string, pos int, ok bool) {
	var bt [32]stateIBAN // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestIBAN, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e IBAN) Find(s []byte) (matches [2][]byte, pos int, ok bool) {
	var bt [32]stateIBAN // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstIBAN, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e IBAN) FindLongest(s []byte) (matches [2][]byte, pos int, ok bool) {
	var bt [32]stateIBAN // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestIBAN, bt[:0])
	return
}

func (e IBAN) doByteSlice(s []byte, m modeTypeIBAN, bt []stateIBAN) (matches [2][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [2 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e IBAN) doString(s string, m modeTypeIBAN, bt []stateIBAN) (matches [2]string, pos int, ok bool) {
	var pmatches [2 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e IBAN) do(r string, m modeTypeIBAN, bt []stateIBAN) ([4]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*32 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]                 // fast reset dynamic backtracking state
	c := [4]int{-1, -1, -1, -1} // captures
	var bc [4]int               // captures for the longest match so far
	matched := false            // succesful match flag
	i := si                     // current byte index
	c[0] = i                    // start of match
	goto inst1                  // initial instruction

	goto unreachable
	goto inst1
inst1: // rune "AZ" -> 2
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 65 && cr <= 90 {
			i += sz
			goto inst2
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	goto fail

	goto unreachable
	goto inst2
inst2: // rune "AZ" -> 3
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 65 && cr <= 90 {
			i += sz
			goto inst3
		}
	}
	goto inst2_fail
	goto unreachable
	goto inst2_fail
inst2_fail:
	goto fail

	goto unreachable
	goto inst3
inst3: // rune "09" -> 4
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst4
		}
	}
	goto inst3_fail
	goto unreachable
	goto inst3_fail
inst3_fail:
	goto fail

	goto unreachable
	goto inst4
inst4: // rune "09" -> 5
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst5
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	goto fail

	goto unreachable
	goto inst5
inst5: // rune "09AZ" -> 6
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst6
		}
	}
	goto inst5_fail
	goto unreachable
	goto inst5_fail
inst5_fail:
	goto fail

	goto unreachable
	goto inst6
inst6: // rune "09AZ" -> 7
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst7
		}
	}
	goto inst6_fail
	goto unreachable
	goto inst6_fail
inst6_fail:
	goto fail

	goto unreachable
	goto inst7
inst7: // rune "09AZ" -> 8
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst8
		}
	}
	goto inst7_fail
	goto unreachable
	goto inst7_fail
inst7_fail:
	goto fail

	goto unreachable
	goto inst8
inst8: // rune "09AZ" -> 9
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst9
		}
	}
	goto inst8_fail
	goto unreachable
	goto inst8_fail
inst8_fail:
	goto fail

	goto unreachable
	goto inst9
inst9: // rune "09" -> 10
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst10
		}
	}
	goto inst9_fail
	goto unreachable
	goto inst9_fail
inst9_fail:
	goto fail

	goto unreachable
	goto inst10
inst10: // rune "09" -> 11
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst11
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	goto fail

	goto unreachable
	goto inst11
inst11: // rune "09" -> 12
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst12
		}
	}
	goto inst11_fail
	goto unreachable
	goto inst11_fail
inst11_fail:
	goto fail

	goto unreachable
	goto inst12
inst12: // rune "09" -> 13
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst13
		}
	}
	goto inst12_fail
	goto unreachable
	goto inst12_fail
inst12_fail:
	goto fail

	goto unreachable
	goto inst13
inst13: // rune "09" -> 14
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst14
		}
	}
	goto inst13_fail
	goto unreachable
	goto inst13_fail
inst13_fail:
	goto fail

	goto unreachable
	goto inst14
inst14: // rune "09" -> 15
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst15
		}
	}
	goto inst14_fail
	goto unreachable
	goto inst14_fail
inst14_fail:
	goto fail

	goto unreachable
	goto inst15
inst15: // rune "09" -> 95
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst95
		}
	}
	goto inst15_fail
	goto unreachable
	goto inst15_fail
inst15_fail:
	goto fail

	goto unreachable
	goto inst17
inst17: // rune "09AZ" -> 19
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst19
		}
	}
	goto inst17_fail
	goto unreachable
	goto inst17_fail
inst17_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 18:
			goto inst18_alt
		}
	}
	goto fail

	goto unreachable
	goto inst18
inst18: // alt -> 17, 19
	{
		idx := i*32 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 18, 0})
	goto inst17
inst18_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst19
	}
	goto unreachable

	goto unreachable
	goto inst19
inst19: // cap 3 -> 94
	c[3] = i
	goto inst94

	goto unreachable
	goto inst28
inst28: // cap 2 -> 30
	c[2] = i
	goto inst30

	goto unreachable
	goto inst92
inst92: // alt -> 28, 96
	{
		idx := i*32 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 92, 0})
	goto inst28
inst92_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst21
inst21: // rune "09AZ" -> 23
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst23
		}
	}
	goto inst21_fail
	goto unreachable
	goto inst21_fail
inst21_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 22:
			goto inst22_alt
		}
	}
	goto fail

	goto unreachable
	goto inst22
inst22: // alt -> 21, 23
	{
		idx := i*32 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 22, 0})
	goto inst21
inst22_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst23
	}
	goto unreachable

	goto unreachable
	goto inst23
inst23: // cap 3 -> 93
	c[3] = i
	goto inst93

	goto unreachable
	goto inst27
inst27: // cap 3 -> 92
	c[3] = i
	goto inst92

	goto unreachable
	goto inst25
inst25: // rune "09AZ" -> 27
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst27
		}
	}
	goto inst25_fail
	goto unreachable
	goto inst25_fail
inst25_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 26:
			goto inst26_alt
		}
	}
	goto fail

	goto unreachable
	goto inst26
inst26: // alt -> 25, 27
	{
		idx := i*32 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 26, 0})
	goto inst25
inst26_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst27
	}
	goto unreachable

	goto unreachable
	goto inst20
inst20: // cap 2 -> 22
	c[2] = i
	goto inst22

	goto unreachable
	goto inst30
inst30: // alt -> 29, 31
	{
		idx := i*32 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 30, 0})
	goto inst29
inst30_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst31
	}
	goto unreachable

	goto unreachable
	goto inst29
inst29: // rune "09AZ" -> 31
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst31
		}
	}
	goto inst29_fail
	goto unreachable
	goto inst29_fail
inst29_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 30:
			goto inst30_alt
		}
	}
	goto fail

	goto unreachable
	goto inst31
inst31: // cap 3 -> 91
	c[3] = i
	goto inst91

	goto unreachable
	goto inst94
inst94: // alt -> 20, 96
	{
		idx := i*32 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 94, 0})
	goto inst20
inst94_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst90
inst90: // alt -> 36, 96
	{
		idx := i*32 + 6
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 90, 0})
	goto inst36
inst90_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst35
inst35: // cap 3 -> 90
	c[3] = i
	goto inst90

	goto unreachable
	goto inst33
inst33: // rune "09AZ" -> 35
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst35
		}
	}
	goto inst33_fail
	goto unreachable
	goto inst33_fail
inst33_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 34:
			goto inst34_alt
		}
	}
	goto fail

	goto unreachable
	goto inst34
inst34: // alt -> 33, 35
	{
		idx := i*32 + 7
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 34, 0})
	goto inst33
inst34_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst35
	}
	goto unreachable

	goto unreachable
	goto inst36
inst36: // cap 2 -> 38
	c[2] = i
	goto inst38

	goto unreachable
	goto inst24
inst24: // cap 2 -> 26
	c[2] = i
	goto inst26

	goto unreachable
	goto inst38
inst38: // alt -> 37, 39
	{
		idx := i*32 + 8
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 38, 0})
	goto inst37
inst38_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst39
	}
	goto unreachable

	goto unreachable
	goto inst93
inst93: // alt -> 24, 96
	{
		idx := i*32 + 9
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 93, 0})
	goto inst24
inst93_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst37
inst37: // rune "09AZ" -> 39
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst39
		}
	}
	goto inst37_fail
	goto unreachable
	goto inst37_fail
inst37_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 38:
			goto inst38_alt
		}
	}
	goto fail

	goto unreachable
	goto inst39
inst39: // cap 3 -> 89
	c[3] = i
	goto inst89

	goto unreachable
	goto inst41
inst41: // rune "09AZ" -> 43
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst43
		}
	}
	goto inst41_fail
	goto unreachable
	goto inst41_fail
inst41_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 42:
			goto inst42_alt
		}
	}
	goto fail

	goto unreachable
	goto inst43
inst43: // cap 3 -> 88
	c[3] = i
	goto inst88

	goto unreachable
	goto inst42
inst42: // alt -> 41, 43
	{
		idx := i*32 + 10
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 42, 0})
	goto inst41
inst42_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst43
	}
	goto unreachable

	goto unreachable
	goto inst40
inst40: // cap 2 -> 42
	c[2] = i
	goto inst42

	goto unreachable
	goto inst16
inst16: // cap 2 -> 18
	c[2] = i
	goto inst18

	goto unreachable
	goto inst45
inst45: // rune "09AZ" -> 47
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst47
		}
	}
	goto inst45_fail
	goto unreachable
	goto inst45_fail
inst45_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 46:
			goto inst46_alt
		}
	}
	goto fail

	goto unreachable
	goto inst46
inst46: // alt -> 45, 47
	{
		idx := i*32 + 11
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 46, 0})
	goto inst45
inst46_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst47
	}
	goto unreachable

	goto unreachable
	goto inst89
inst89: // alt -> 40, 96
	{
		idx := i*32 + 12
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 89, 0})
	goto inst40
inst89_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst47
inst47: // cap 3 -> 87
	c[3] = i
	goto inst87

	goto unreachable
	goto inst44
inst44: // cap 2 -> 46
	c[2] = i
	goto inst46

	goto unreachable
	goto inst88
inst88: // alt -> 44, 96
	{
		idx := i*32 + 13
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 88, 0})
	goto inst44
inst88_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst32
inst32: // cap 2 -> 34
	c[2] = i
	goto inst34

	goto unreachable
	goto inst91
inst91: // alt -> 32, 96
	{
		idx := i*32 + 14
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 91, 0})
	goto inst32
inst91_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst95
inst95: // alt -> 16, 96
	{
		idx := i*32 + 15
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 95, 0})
	goto inst16
inst95_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst53
inst53: // rune "09AZ" -> 55
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst55
		}
	}
	goto inst53_fail
	goto unreachable
	goto inst53_fail
inst53_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 54:
			goto inst54_alt
		}
	}
	goto fail

	goto unreachable
	goto inst56
inst56: // cap 2 -> 58
	c[2] = i
	goto inst58

	goto unreachable
	goto inst85
inst85: // alt -> 56, 96
	{
		idx := i*32 + 16
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 85, 0})
	goto inst56
inst85_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst54
inst54: // alt -> 53, 55
	{
		idx := i*32 + 17
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 54, 0})
	goto inst53
inst54_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst55
	}
	goto unreachable

	goto unreachable
	goto inst55
inst55: // cap 3 -> 85
	c[3] = i
	goto inst85

	goto unreachable
	goto inst96
inst96: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto inst63
inst63: // cap 3 -> 83
	c[3] = i
	goto inst83

	goto unreachable
	goto inst62
inst62: // alt -> 61, 63
	{
		idx := i*32 + 18
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 62, 0})
	goto inst61
inst62_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst63
	}
	goto unreachable

	goto unreachable
	goto inst61
inst61: // rune "09AZ" -> 63
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst63
		}
	}
	goto inst61_fail
	goto unreachable
	goto inst61_fail
inst61_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 62:
			goto inst62_alt
		}
	}
	goto fail

	goto unreachable
	goto inst58
inst58: // alt -> 57, 59
	{
		idx := i*32 + 19
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 58, 0})
	goto inst57
inst58_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst59
	}
	goto unreachable

	goto unreachable
	goto inst59
inst59: // cap 3 -> 84
	c[3] = i
	goto inst84

	goto unreachable
	goto inst57
inst57: // rune "09AZ" -> 59
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst59
		}
	}
	goto inst57_fail
	goto unreachable
	goto inst57_fail
inst57_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 58:
			goto inst58_alt
		}
	}
	goto fail

	goto unreachable
	goto inst60
inst60: // cap 2 -> 62
	c[2] = i
	goto inst62

	goto unreachable
	goto inst84
inst84: // alt -> 60, 96
	{
		idx := i*32 + 20
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 84, 0})
	goto inst60
inst84_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst71
inst71: // cap 3 -> 81
	c[3] = i
	goto inst81

	goto unreachable
	goto inst81
inst81: // alt -> 72, 96
	{
		idx := i*32 + 21
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 81, 0})
	goto inst72
inst81_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst69
inst69: // rune "09AZ" -> 71
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst71
		}
	}
	goto inst69_fail
	goto unreachable
	goto inst69_fail
inst69_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		}
	}
	goto fail

	goto unreachable
	goto inst82
inst82: // alt -> 68, 96
	{
		idx := i*32 + 22
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 82, 0})
	goto inst68
inst82_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst87
inst87: // alt -> 48, 96
	{
		idx := i*32 + 23
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 87, 0})
	goto inst48
inst87_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst68
inst68: // cap 2 -> 70
	c[2] = i
	goto inst70

	goto unreachable
	goto inst83
inst83: // alt -> 64, 96
	{
		idx := i*32 + 24
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 83, 0})
	goto inst64
inst83_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst70
inst70: // alt -> 69, 71
	{
		idx := i*32 + 25
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 70, 0})
	goto inst69
inst70_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst71
	}
	goto unreachable

	goto unreachable
	goto inst64
inst64: // cap 2 -> 66
	c[2] = i
	goto inst66

	goto unreachable
	goto inst67
inst67: // cap 3 -> 82
	c[3] = i
	goto inst82

	goto unreachable
	goto inst66
inst66: // alt -> 65, 67
	{
		idx := i*32 + 26
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 66, 0})
	goto inst65
inst66_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst67
	}
	goto unreachable

	goto unreachable
	goto inst65
inst65: // rune "09AZ" -> 67
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst67
		}
	}
	goto inst65_fail
	goto unreachable
	goto inst65_fail
inst65_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 66:
			goto inst66_alt
		}
	}
	goto fail

	goto unreachable
	goto inst79
inst79: // cap 3 -> 96
	c[3] = i
	goto inst96

	goto unreachable
	goto inst77
inst77: // rune "09AZ" -> 79
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst79
		}
	}
	goto inst77_fail
	goto unreachable
	goto inst77_fail
inst77_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 78:
			goto inst78_alt
		}
	}
	goto fail

	goto unreachable
	goto inst72
inst72: // cap 2 -> 74
	c[2] = i
	goto inst74

	goto unreachable
	goto inst52
inst52: // cap 2 -> 54
	c[2] = i
	goto inst54

	goto unreachable
	goto inst78
inst78: // alt -> 77, 79
	{
		idx := i*32 + 27
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 78, 0})
	goto inst77
inst78_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst79
	}
	goto unreachable

	goto unreachable
	goto inst86
inst86: // alt -> 52, 96
	{
		idx := i*32 + 28
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 86, 0})
	goto inst52
inst86_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst74
inst74: // alt -> 73, 75
	{
		idx := i*32 + 29
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 74, 0})
	goto inst73
inst74_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst75
	}
	goto unreachable

	goto unreachable
	goto inst73
inst73: // rune "09AZ" -> 75
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst75
		}
	}
	goto inst73_fail
	goto unreachable
	goto inst73_fail
inst73_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 74:
			goto inst74_alt
		}
	}
	goto fail

	goto unreachable
	goto inst75
inst75: // cap 3 -> 80
	c[3] = i
	goto inst80

	goto unreachable
	goto inst76
inst76: // cap 2 -> 78
	c[2] = i
	goto inst78

	goto unreachable
	goto inst80
inst80: // alt -> 76, 96
	{
		idx := i*32 + 30
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 80, 0})
	goto inst76
inst80_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst48
inst48: // cap 2 -> 50
	c[2] = i
	goto inst50

	goto unreachable
	goto inst49
inst49: // rune "09AZ" -> 51
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if (cr >= 48 && cr <= 57) || (cr >= 65 && cr <= 90) {
			i += sz
			goto inst51
		}
	}
	goto inst49_fail
	goto unreachable
	goto inst49_fail
inst49_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 50:
			goto inst50_alt
		}
	}
	goto fail

	goto unreachable
	goto inst50
inst50: // alt -> 49, 51
	{
		idx := i*32 + 31
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIBAN{c, i, 50, 0})
	goto inst49
inst50_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst51
	}
	goto unreachable

	goto unreachable
	goto inst51
inst51: // cap 3 -> 86
	c[3] = i
	goto inst86

	// inst0 unreacheable

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 18:
				goto inst18_alt
			case 92:
				goto inst92_alt
			case 22:
				goto inst22_alt
			case 26:
				goto inst26_alt
			case 30:
				goto inst30_alt
			case 94:
				goto inst94_alt
			case 90:
				goto inst90_alt
			case 34:
				goto inst34_alt
			case 38:
				goto inst38_alt
			case 93:
				goto inst93_alt
			case 42:
				goto inst42_alt
			case 46:
				goto inst46_alt
			case 89:
				goto inst89_alt
			case 88:
				goto inst88_alt
			case 91:
				goto inst91_alt
			case 95:
				goto inst95_alt
			case 85:
				goto inst85_alt
			case 54:
				goto inst54_alt
			case 62:
				goto inst62_alt
			case 58:
				goto inst58_alt
			case 84:
				goto inst84_alt
			case 81:
				goto inst81_alt
			case 82:
				goto inst82_alt
			case 87:
				goto inst87_alt
			case 83:
				goto inst83_alt
			case 70:
				goto inst70_alt
			case 66:
				goto inst66_alt
			case 78:
				goto inst78_alt
			case 86:
				goto inst86_alt
			case 74:
				goto inst74_alt
			case 80:
				goto inst80_alt
			case 50:
				goto inst50_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchIBAN || m == modeFirstIBAN {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
