// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="Phone" -pool=true "(?:(?:\\+?\\d{1,3}[-.\\s*]?)?(?:\\(?\\d{3}\\)?[-.\\s*]?)?\\d{3}[-.\\s*]?\\d{4,6})|(?:(?:(?:\\(\\+?\\d{2}\\))|(?:\\+?\\d{2}))\\s*\\d{2}\\s*\\d{3}\\s*\\d{4})"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const PhoneRegexp = "(?:(?:\\+?\\d{1,3}[-.\\s*]?)?(?:\\(?\\d{3}\\)?[-.\\s*]?)?\\d{3}[-.\\s*]?\\d{4,6})|(?:(?:(?:\\(\\+?\\d{2}\\))|(?:\\+?\\d{2}))\\s*\\d{2}\\s*\\d{3}\\s*\\d{4})"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypePhone uint8

const (
	modeMatchPhone modeTypePhone = iota
	modeFirstPhone
	modeLongestPhone
)

// Phone implements the regular expression
// (?:(?:\+?\d{1,3}[-.\s*]?)?(?:\(?\d{3}\)?[-.\s*]?)?\d{3}[-.\s*]?\d{4,6})|(?:(?:(?:\(\+?\d{2}\))|(?:\+?\d{2}))\s*\d{2}\s*\d{3}\s*\d{4})
// with flags 212.
type Phone struct{}
type statePhone struct {
	c   [2]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e Phone) FindString(r string) (matches [1]string, pos int, ok bool) {
	var bt [19]statePhone // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstPhone, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e Phone) FindLongestString(r string) (matches [1]string, pos int, ok bool) {
	var bt [19]statePhone // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestPhone, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e Phone) Find(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [19]statePhone // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstPhone, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e Phone) FindLongest(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [19]statePhone // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestPhone, bt[:0])
	return
}

func (e Phone) doByteSlice(s []byte, m modeTypePhone, bt []statePhone) (matches [1][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [1 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e Phone) doString(s string, m modeTypePhone, bt []statePhone) (matches [1]string, pos int, ok bool) {
	var pmatches [1 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e Phone) do(r string, m modeTypePhone, bt []statePhone) ([2]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*19 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]         // fast reset dynamic backtracking state
	c := [2]int{-1, -1} // captures
	var bc [2]int       // captures for the longest match so far
	matched := false    // succesful match flag
	i := si             // current byte index
	c[0] = i            // start of match
	goto inst60         // initial instruction

	// inst0 unreacheable

	goto unreachable
	goto inst1
inst1: // string "+" -> 3
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "+" {
			i += 1
			goto inst3
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		}
	}
	goto fail

	goto unreachable
	goto inst2
inst2: // alt -> 1, 3
	{
		idx := i*19 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 2, 0})
	goto inst1
inst2_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst3
	}
	goto unreachable

	goto unreachable
	goto inst3
inst3: // rune "09" -> 7
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst7
		}
	}
	goto inst3_fail
	goto unreachable
	goto inst3_fail
inst3_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 10:
			goto inst10_alt
		}
	}
	goto fail

	goto unreachable
	goto inst7
inst7: // alt -> 4, 9
	{
		idx := i*19 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 7, 0})
	goto inst4
inst7_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst9
	}
	goto unreachable

	goto unreachable
	goto inst4
inst4: // rune "09" -> 6
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst6
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 7:
			goto inst7_alt
		}
	}
	goto fail

	goto unreachable
	goto inst6
inst6: // alt -> 5, 9
	{
		idx := i*19 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 6, 0})
	goto inst5
inst6_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst9
	}
	goto unreachable

	goto unreachable
	goto inst5
inst5: // rune "09" -> 9
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst9
		}
	}
	goto inst5_fail
	goto unreachable
	goto inst5_fail
inst5_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		}
	}
	goto fail

	goto unreachable
	goto inst9
inst9: // alt -> 8, 20
	{
		idx := i*19 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 9, 0})
	goto inst8
inst9_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst20
	}
	goto unreachable

	goto unreachable
	goto inst8
inst8: // rune "\t\n\f\r  **-." -> 20
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst20
			}
			goto inst8_fail
		}
	}
	goto inst8_fail
	goto unreachable
	goto inst8_fail
inst8_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 9:
			goto inst9_alt
		}
	}
	goto fail

	goto unreachable
	goto inst10
inst10: // alt -> 2, 20
	{
		idx := i*19 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 10, 0})
	goto inst2
inst10_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst20
	}
	goto unreachable

	goto unreachable
	goto inst20
inst20: // alt -> 12, 21
	{
		idx := i*19 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 20, 0})
	goto inst12
inst20_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst21
	}
	goto unreachable

	goto unreachable
	goto inst12
inst12: // alt -> 11, 13
	{
		idx := i*19 + 6
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 12, 0})
	goto inst11
inst12_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst13
	}
	goto unreachable

	goto unreachable
	goto inst11
inst11: // string "(" -> 13
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "(" {
			i += 1
			goto inst13
		}
	}
	goto inst11_fail
	goto unreachable
	goto inst11_fail
inst11_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 12:
			goto inst12_alt
		}
	}
	goto fail

	goto unreachable
	goto inst13
inst13: // rune "09" -> 14
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst14
		}
	}
	goto inst13_fail
	goto unreachable
	goto inst13_fail
inst13_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 12:
			goto inst12_alt
		case 20:
			goto inst20_alt
		}
	}
	goto fail

	goto unreachable
	goto inst14
inst14: // rune "09" -> 15
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst15
		}
	}
	goto inst14_fail
	goto unreachable
	goto inst14_fail
inst14_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 12:
			goto inst12_alt
		case 20:
			goto inst20_alt
		}
	}
	goto fail

	goto unreachable
	goto inst15
inst15: // rune "09" -> 17
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst17
		}
	}
	goto inst15_fail
	goto unreachable
	goto inst15_fail
inst15_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 12:
			goto inst12_alt
		case 20:
			goto inst20_alt
		}
	}
	goto fail

	goto unreachable
	goto inst17
inst17: // alt -> 16, 19
	{
		idx := i*19 + 7
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 17, 0})
	goto inst16
inst17_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst19
	}
	goto unreachable

	goto unreachable
	goto inst16
inst16: // string ")" -> 19
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ")" {
			i += 1
			goto inst19
		}
	}
	goto inst16_fail
	goto unreachable
	goto inst16_fail
inst16_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 17:
			goto inst17_alt
		}
	}
	goto fail

	goto unreachable
	goto inst19
inst19: // alt -> 18, 21
	{
		idx := i*19 + 8
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 19, 0})
	goto inst18
inst19_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst21
	}
	goto unreachable

	goto unreachable
	goto inst18
inst18: // rune "\t\n\f\r  **-." -> 21
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst21
			}
			goto inst18_fail
		}
	}
	goto inst18_fail
	goto unreachable
	goto inst18_fail
inst18_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 19:
			goto inst19_alt
		}
	}
	goto fail

	goto unreachable
	goto inst21
inst21: // rune "09" -> 22
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst22
		}
	}
	goto inst21_fail
	goto unreachable
	goto inst21_fail
inst21_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 12:
			goto inst12_alt
		case 17:
			goto inst17_alt
		case 19:
			goto inst19_alt
		case 20:
			goto inst20_alt
		case 60:
			goto inst60_alt
		}
	}
	goto fail

	goto unreachable
	goto inst22
inst22: // rune "09" -> 23
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst23
		}
	}
	goto inst22_fail
	goto unreachable
	goto inst22_fail
inst22_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 12:
			goto inst12_alt
		case 17:
			goto inst17_alt
		case 19:
			goto inst19_alt
		case 20:
			goto inst20_alt
		case 60:
			goto inst60_alt
		}
	}
	goto fail

	goto unreachable
	goto inst23
inst23: // rune "09" -> 25
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst25
		}
	}
	goto inst23_fail
	goto unreachable
	goto inst23_fail
inst23_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 12:
			goto inst12_alt
		case 17:
			goto inst17_alt
		case 19:
			goto inst19_alt
		case 20:
			goto inst20_alt
		case 60:
			goto inst60_alt
		}
	}
	goto fail

	goto unreachable
	goto inst25
inst25: // alt -> 24, 26
	{
		idx := i*19 + 9
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 25, 0})
	goto inst24
inst25_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst26
	}
	goto unreachable

	goto unreachable
	goto inst24
inst24: // rune "\t\n\f\r  **-." -> 26
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst26
			}
			goto inst24_fail
		}
	}
	goto inst24_fail
	goto unreachable
	goto inst24_fail
inst24_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 25:
			goto inst25_alt
		}
	}
	goto fail

	goto unreachable
	goto inst26
inst26: // rune "09" -> 27
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst27
		}
	}
	goto inst26_fail
	goto unreachable
	goto inst26_fail
inst26_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 12:
			goto inst12_alt
		case 17:
			goto inst17_alt
		case 19:
			goto inst19_alt
		case 20:
			goto inst20_alt
		case 25:
			goto inst25_alt
		case 60:
			goto inst60_alt
		}
	}
	goto fail

	goto unreachable
	goto inst27
inst27: // rune "09" -> 28
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst28
		}
	}
	goto inst27_fail
	goto unreachable
	goto inst27_fail
inst27_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 12:
			goto inst12_alt
		case 17:
			goto inst17_alt
		case 19:
			goto inst19_alt
		case 20:
			goto inst20_alt
		case 25:
			goto inst25_alt
		case 60:
			goto inst60_alt
		}
	}
	goto fail

	goto unreachable
	goto inst28
inst28: // rune "09" -> 29
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst29
		}
	}
	goto inst28_fail
	goto unreachable
	goto inst28_fail
inst28_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 12:
			goto inst12_alt
		case 17:
			goto inst17_alt
		case 19:
			goto inst19_alt
		case 20:
			goto inst20_alt
		case 25:
			goto inst25_alt
		case 60:
			goto inst60_alt
		}
	}
	goto fail

	goto unreachable
	goto inst29
inst29: // rune "09" -> 33
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst33
		}
	}
	goto inst29_fail
	goto unreachable
	goto inst29_fail
inst29_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 12:
			goto inst12_alt
		case 17:
			goto inst17_alt
		case 19:
			goto inst19_alt
		case 20:
			goto inst20_alt
		case 25:
			goto inst25_alt
		case 60:
			goto inst60_alt
		}
	}
	goto fail

	goto unreachable
	goto inst30
inst30: // rune "09" -> 32
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst32
		}
	}
	goto inst30_fail
	goto unreachable
	goto inst30_fail
inst30_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 33:
			goto inst33_alt
		}
	}
	goto fail

	goto unreachable
	goto inst33
inst33: // alt -> 30, 61
	{
		idx := i*19 + 10
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 33, 0})
	goto inst30
inst33_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst61
	}
	goto unreachable

	goto unreachable
	goto inst60
inst60: // alt -> 10, 44
	{
		idx := i*19 + 11
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 60, 0})
	goto inst10
inst60_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst44
	}
	goto unreachable

	goto unreachable
	goto inst44
inst44: // alt -> 34, 41
	{
		idx := i*19 + 12
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 44, 0})
	goto inst34
inst44_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst41
	}
	goto unreachable

	goto unreachable
	goto inst34
inst34: // string "(" -> 36
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "(" {
			i += 1
			goto inst36
		}
	}
	goto inst34_fail
	goto unreachable
	goto inst34_fail
inst34_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst35
inst35: // string "+" -> 37
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "+" {
			i += 1
			goto inst37
		}
	}
	goto inst35_fail
	goto unreachable
	goto inst35_fail
inst35_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		}
	}
	goto fail

	goto unreachable
	goto inst36
inst36: // alt -> 35, 37
	{
		idx := i*19 + 13
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 36, 0})
	goto inst35
inst36_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst37
	}
	goto unreachable

	goto unreachable
	goto inst37
inst37: // rune "09" -> 38
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst38
		}
	}
	goto inst37_fail
	goto unreachable
	goto inst37_fail
inst37_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst38
inst38: // rune "09" -> 39
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst39
		}
	}
	goto inst38_fail
	goto unreachable
	goto inst38_fail
inst38_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst39
inst39: // string ")" -> 46
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ")" {
			i += 1
			goto inst46
		}
	}
	goto inst39_fail
	goto unreachable
	goto inst39_fail
inst39_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst40
inst40: // string "+" -> 42
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "+" {
			i += 1
			goto inst42
		}
	}
	goto inst40_fail
	goto unreachable
	goto inst40_fail
inst40_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 41:
			goto inst41_alt
		}
	}
	goto fail

	goto unreachable
	goto inst41
inst41: // alt -> 40, 42
	{
		idx := i*19 + 14
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 41, 0})
	goto inst40
inst41_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst42
	}
	goto unreachable

	goto unreachable
	goto inst42
inst42: // rune "09" -> 43
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst43
		}
	}
	goto inst42_fail
	goto unreachable
	goto inst42_fail
inst42_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 41:
			goto inst41_alt
		}
	}
	goto fail

	goto unreachable
	goto inst43
inst43: // rune "09" -> 46
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst46
		}
	}
	goto inst43_fail
	goto unreachable
	goto inst43_fail
inst43_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 41:
			goto inst41_alt
		}
	}
	goto fail

	goto unreachable
	goto inst46
inst46: // alt -> 45, 47
	{
		idx := i*19 + 15
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 46 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst45
		}
	}
	bt = append(bt, statePhone{c, i, 46, 0})
	goto inst45
inst46_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst47
	}
	goto unreachable

	goto unreachable
	goto inst45
inst45: // rune "\t\n\f\r  " -> 46
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst46
			}
			goto inst45_fail
		}
	}
	goto inst45_fail
	goto unreachable
	goto inst45_fail
inst45_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 46:
			goto inst46_alt
		}
	}
	goto fail

	goto unreachable
	goto inst47
inst47: // rune "09" -> 48
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst48
		}
	}
	goto inst47_fail
	goto unreachable
	goto inst47_fail
inst47_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		case 41:
			goto inst41_alt
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst48
inst48: // rune "09" -> 50
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst50
		}
	}
	goto inst48_fail
	goto unreachable
	goto inst48_fail
inst48_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		case 41:
			goto inst41_alt
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst32
inst32: // alt -> 31, 61
	{
		idx := i*19 + 16
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhone{c, i, 32, 0})
	goto inst31
inst32_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst61
	}
	goto unreachable

	goto unreachable
	goto inst49
inst49: // rune "\t\n\f\r  " -> 50
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst50
			}
			goto inst49_fail
		}
	}
	goto inst49_fail
	goto unreachable
	goto inst49_fail
inst49_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 50:
			goto inst50_alt
		}
	}
	goto fail

	goto unreachable
	goto inst50
inst50: // alt -> 49, 51
	{
		idx := i*19 + 17
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 50 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst49
		}
	}
	bt = append(bt, statePhone{c, i, 50, 0})
	goto inst49
inst50_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst51
	}
	goto unreachable

	goto unreachable
	goto inst51
inst51: // rune "09" -> 52
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst52
		}
	}
	goto inst51_fail
	goto unreachable
	goto inst51_fail
inst51_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		case 41:
			goto inst41_alt
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst52
inst52: // rune "09" -> 53
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst53
		}
	}
	goto inst52_fail
	goto unreachable
	goto inst52_fail
inst52_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		case 41:
			goto inst41_alt
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst53
inst53: // rune "09" -> 55
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst55
		}
	}
	goto inst53_fail
	goto unreachable
	goto inst53_fail
inst53_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		case 41:
			goto inst41_alt
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst54
inst54: // rune "\t\n\f\r  " -> 55
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst55
			}
			goto inst54_fail
		}
	}
	goto inst54_fail
	goto unreachable
	goto inst54_fail
inst54_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 55:
			goto inst55_alt
		}
	}
	goto fail

	goto unreachable
	goto inst55
inst55: // alt -> 54, 56
	{
		idx := i*19 + 18
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 55 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst54
		}
	}
	bt = append(bt, statePhone{c, i, 55, 0})
	goto inst54
inst55_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst56
	}
	goto unreachable

	goto unreachable
	goto inst56
inst56: // rune "09" -> 57
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst57
		}
	}
	goto inst56_fail
	goto unreachable
	goto inst56_fail
inst56_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		case 41:
			goto inst41_alt
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst57
inst57: // rune "09" -> 58
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst58
		}
	}
	goto inst57_fail
	goto unreachable
	goto inst57_fail
inst57_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		case 41:
			goto inst41_alt
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst58
inst58: // rune "09" -> 59
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst59
		}
	}
	goto inst58_fail
	goto unreachable
	goto inst58_fail
inst58_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		case 41:
			goto inst41_alt
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst59
inst59: // rune "09" -> 61
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst61
		}
	}
	goto inst59_fail
	goto unreachable
	goto inst59_fail
inst59_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		case 41:
			goto inst41_alt
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst31
inst31: // rune "09" -> 61
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst61
		}
	}
	goto inst31_fail
	goto unreachable
	goto inst31_fail
inst31_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 32:
			goto inst32_alt
		}
	}
	goto fail

	goto unreachable
	goto inst61
inst61: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 2:
				goto inst2_alt
			case 7:
				goto inst7_alt
			case 6:
				goto inst6_alt
			case 9:
				goto inst9_alt
			case 10:
				goto inst10_alt
			case 20:
				goto inst20_alt
			case 12:
				goto inst12_alt
			case 17:
				goto inst17_alt
			case 19:
				goto inst19_alt
			case 25:
				goto inst25_alt
			case 33:
				goto inst33_alt
			case 60:
				goto inst60_alt
			case 44:
				goto inst44_alt
			case 36:
				goto inst36_alt
			case 41:
				goto inst41_alt
			case 46:
				goto inst46_alt
			case 32:
				goto inst32_alt
			case 50:
				goto inst50_alt
			case 55:
				goto inst55_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchPhone || m == modeFirstPhone {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
