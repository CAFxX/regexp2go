// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="HexColor" -pool=true "(?:#?([0-9a-fA-F]{6}|[0-9a-fA-F]{3}))"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const HexColorRegexp = "(?:#?([0-9a-fA-F]{6}|[0-9a-fA-F]{3}))"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeHexColor uint8

const (
	modeMatchHexColor modeTypeHexColor = iota
	modeFirstHexColor
	modeLongestHexColor
)

// HexColor implements the regular expression
// (?:#?([0-9a-fA-F]{6}|[0-9a-fA-F]{3}))
// with flags 212.
type HexColor struct{}
type stateHexColor struct {
	c   [4]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e HexColor) FindString(r string) (matches [2]string, pos int, ok bool) {
	var bt [2]stateHexColor // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstHexColor, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e HexColor) FindLongestString(r string) (matches [2]string, pos int, ok bool) {
	var bt [2]stateHexColor // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestHexColor, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e HexColor) Find(s []byte) (matches [2][]byte, pos int, ok bool) {
	var bt [2]stateHexColor // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstHexColor, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e HexColor) FindLongest(s []byte) (matches [2][]byte, pos int, ok bool) {
	var bt [2]stateHexColor // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestHexColor, bt[:0])
	return
}

func (e HexColor) doByteSlice(s []byte, m modeTypeHexColor, bt []stateHexColor) (matches [2][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [2 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e HexColor) doString(s string, m modeTypeHexColor, bt []stateHexColor) (matches [2]string, pos int, ok bool) {
	var pmatches [2 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e HexColor) do(r string, m modeTypeHexColor, bt []stateHexColor) ([4]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*2 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]                 // fast reset dynamic backtracking state
	c := [4]int{-1, -1, -1, -1} // captures
	var bc [4]int               // captures for the longest match so far
	matched := false            // succesful match flag
	i := si                     // current byte index
	c[0] = i                    // start of match
	goto inst2                  // initial instruction

	goto unreachable
	goto inst1
inst1: // string "#" -> 3
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "#" {
			i += 1
			goto inst3
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		}
	}
	goto fail

	goto unreachable
	goto inst2
inst2: // alt -> 1, 3
	{
		idx := i*2 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateHexColor{c, i, 2, 0})
	goto inst1
inst2_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst3
	}
	goto unreachable

	goto unreachable
	goto inst3
inst3: // cap 2 -> 13
	c[2] = i
	goto inst13

	goto unreachable
	goto inst13
inst13: // alt -> 4, 10
	{
		idx := i*2 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateHexColor{c, i, 13, 0})
	goto inst4
inst13_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst10
	}
	goto unreachable

	goto unreachable
	goto inst4
inst4: // rune "09AFaf" -> 5
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst5
			}
			goto inst4_fail
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 13:
			goto inst13_alt
		}
	}
	goto fail

	goto unreachable
	goto inst5
inst5: // rune "09AFaf" -> 6
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst6
			}
			goto inst5_fail
		}
	}
	goto inst5_fail
	goto unreachable
	goto inst5_fail
inst5_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 13:
			goto inst13_alt
		}
	}
	goto fail

	goto unreachable
	goto inst6
inst6: // rune "09AFaf" -> 7
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst7
			}
			goto inst6_fail
		}
	}
	goto inst6_fail
	goto unreachable
	goto inst6_fail
inst6_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 13:
			goto inst13_alt
		}
	}
	goto fail

	goto unreachable
	goto inst7
inst7: // rune "09AFaf" -> 8
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst8
			}
			goto inst7_fail
		}
	}
	goto inst7_fail
	goto unreachable
	goto inst7_fail
inst7_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 13:
			goto inst13_alt
		}
	}
	goto fail

	goto unreachable
	goto inst8
inst8: // rune "09AFaf" -> 9
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst9
			}
			goto inst8_fail
		}
	}
	goto inst8_fail
	goto unreachable
	goto inst8_fail
inst8_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 13:
			goto inst13_alt
		}
	}
	goto fail

	goto unreachable
	goto inst9
inst9: // rune "09AFaf" -> 14
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst14
			}
			goto inst9_fail
		}
	}
	goto inst9_fail
	goto unreachable
	goto inst9_fail
inst9_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 13:
			goto inst13_alt
		}
	}
	goto fail

	goto unreachable
	goto inst10
inst10: // rune "09AFaf" -> 11
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst11
			}
			goto inst10_fail
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		}
	}
	goto fail

	goto unreachable
	goto inst11
inst11: // rune "09AFaf" -> 12
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst12
			}
			goto inst11_fail
		}
	}
	goto inst11_fail
	goto unreachable
	goto inst11_fail
inst11_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		}
	}
	goto fail

	goto unreachable
	goto inst12
inst12: // rune "09AFaf" -> 14
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst14
			}
			goto inst12_fail
		}
	}
	goto inst12_fail
	goto unreachable
	goto inst12_fail
inst12_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		}
	}
	goto fail

	goto unreachable
	goto inst14
inst14: // cap 3 -> 15
	c[3] = i
	goto inst15

	// inst0 unreacheable

	goto unreachable
	goto inst15
inst15: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 2:
				goto inst2_alt
			case 13:
				goto inst13_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchHexColor || m == modeFirstHexColor {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
