// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="Time" -pool=true "(?i)\\d{1,2}:\\d{2} ?(?:[ap]\\.?m\\.?)?|\\d[ap]\\.?m\\.?"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const TimeRegexp = "(?i)\\d{1,2}:\\d{2} ?(?:[ap]\\.?m\\.?)?|\\d[ap]\\.?m\\.?"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeTime uint8

const (
	modeMatchTime modeTypeTime = iota
	modeFirstTime
	modeLongestTime
)

// Time implements the regular expression
// (?i)\d{1,2}:\d{2} ?(?:[ap]\.?m\.?)?|\d[ap]\.?m\.?
// with flags 212.
type Time struct{}
type stateTime struct {
	c   [2]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e Time) FindString(r string) (matches [1]string, pos int, ok bool) {
	var bt [8]stateTime // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstTime, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e Time) FindLongestString(r string) (matches [1]string, pos int, ok bool) {
	var bt [8]stateTime // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestTime, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e Time) Find(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [8]stateTime // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstTime, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e Time) FindLongest(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [8]stateTime // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestTime, bt[:0])
	return
}

func (e Time) doByteSlice(s []byte, m modeTypeTime, bt []stateTime) (matches [1][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [1 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e Time) doString(s string, m modeTypeTime, bt []stateTime) (matches [1]string, pos int, ok bool) {
	var pmatches [1 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e Time) do(r string, m modeTypeTime, bt []stateTime) ([2]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*8 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]         // fast reset dynamic backtracking state
	c := [2]int{-1, -1} // captures
	var bc [2]int       // captures for the longest match so far
	matched := false    // succesful match flag
	i := si             // current byte index
	c[0] = i            // start of match
	goto inst23         // initial instruction

	// inst0 unreacheable

	goto unreachable
	goto inst1
inst1: // rune "09" -> 3
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst3
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 23:
			goto inst23_alt
		}
	}
	goto fail

	goto unreachable
	goto inst3
inst3: // alt -> 2, 4
	{
		idx := i*8 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateTime{c, i, 3, 0})
	goto inst2
inst3_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst4
	}
	goto unreachable

	goto unreachable
	goto inst2
inst2: // rune "09" -> 4
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst4
		}
	}
	goto inst2_fail
	goto unreachable
	goto inst2_fail
inst2_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 3:
			goto inst3_alt
		}
	}
	goto fail

	goto unreachable
	goto inst4
inst4: // string ":" -> 5
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst5
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 3:
			goto inst3_alt
		case 23:
			goto inst23_alt
		}
	}
	goto fail

	goto unreachable
	goto inst5
inst5: // rune "09" -> 6
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst6
		}
	}
	goto inst5_fail
	goto unreachable
	goto inst5_fail
inst5_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 3:
			goto inst3_alt
		case 23:
			goto inst23_alt
		}
	}
	goto fail

	goto unreachable
	goto inst6
inst6: // rune "09" -> 8
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst8
		}
	}
	goto inst6_fail
	goto unreachable
	goto inst6_fail
inst6_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 3:
			goto inst3_alt
		case 23:
			goto inst23_alt
		}
	}
	goto fail

	goto unreachable
	goto inst8
inst8: // alt -> 7, 15
	{
		idx := i*8 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateTime{c, i, 8, 0})
	goto inst7
inst8_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst15
	}
	goto unreachable

	goto unreachable
	goto inst7
inst7: // string " " -> 15
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == " " {
			i += 1
			goto inst15
		}
	}
	goto inst7_fail
	goto unreachable
	goto inst7_fail
inst7_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst15
inst15: // alt -> 9, 24
	{
		idx := i*8 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateTime{c, i, 15, 0})
	goto inst9
inst15_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst24
	}
	goto unreachable

	goto unreachable
	goto inst23
inst23: // alt -> 1, 16
	{
		idx := i*8 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateTime{c, i, 23, 0})
	goto inst1
inst23_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst16
	}
	goto unreachable

	goto unreachable
	goto inst9
inst9: // rune "AAPPaapp" -> 11
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x01\x00\x02\x00\x01\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst11
			}
			goto inst9_fail
		}
	}
	goto inst9_fail
	goto unreachable
	goto inst9_fail
inst9_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 15:
			goto inst15_alt
		}
	}
	goto fail

	goto unreachable
	goto inst11
inst11: // alt -> 10, 12
	{
		idx := i*8 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateTime{c, i, 11, 0})
	goto inst10
inst11_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst12
	}
	goto unreachable

	goto unreachable
	goto inst10
inst10: // string "." -> 12
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst12
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 11:
			goto inst11_alt
		}
	}
	goto fail

	goto unreachable
	goto inst12
inst12: // rune "M"/i -> 14
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 77 || cr == 109 {
			i += sz
			goto inst14
		}
	}
	goto inst12_fail
	goto unreachable
	goto inst12_fail
inst12_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 11:
			goto inst11_alt
		case 15:
			goto inst15_alt
		}
	}
	goto fail

	goto unreachable
	goto inst17
inst17: // rune "AAPPaapp" -> 19
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x01\x00\x02\x00\x01\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst19
			}
			goto inst17_fail
		}
	}
	goto inst17_fail
	goto unreachable
	goto inst17_fail
inst17_fail:
	goto fail

	goto unreachable
	goto inst16
inst16: // rune "09" -> 17
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst17
		}
	}
	goto inst16_fail
	goto unreachable
	goto inst16_fail
inst16_fail:
	goto fail

	goto unreachable
	goto inst19
inst19: // alt -> 18, 20
	{
		idx := i*8 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateTime{c, i, 19, 0})
	goto inst18
inst19_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst20
	}
	goto unreachable

	goto unreachable
	goto inst18
inst18: // string "." -> 20
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst20
		}
	}
	goto inst18_fail
	goto unreachable
	goto inst18_fail
inst18_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 19:
			goto inst19_alt
		}
	}
	goto fail

	goto unreachable
	goto inst21
inst21: // string "." -> 24
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst24
		}
	}
	goto inst21_fail
	goto unreachable
	goto inst21_fail
inst21_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 22:
			goto inst22_alt
		}
	}
	goto fail

	goto unreachable
	goto inst20
inst20: // rune "M"/i -> 22
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 77 || cr == 109 {
			i += sz
			goto inst22
		}
	}
	goto inst20_fail
	goto unreachable
	goto inst20_fail
inst20_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 19:
			goto inst19_alt
		}
	}
	goto fail

	goto unreachable
	goto inst22
inst22: // alt -> 21, 24
	{
		idx := i*8 + 6
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateTime{c, i, 22, 0})
	goto inst21
inst22_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst24
	}
	goto unreachable

	goto unreachable
	goto inst24
inst24: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto inst14
inst14: // alt -> 13, 24
	{
		idx := i*8 + 7
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateTime{c, i, 14, 0})
	goto inst13
inst14_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst24
	}
	goto unreachable

	goto unreachable
	goto inst13
inst13: // string "." -> 24
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst24
		}
	}
	goto inst13_fail
	goto unreachable
	goto inst13_fail
inst13_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 14:
			goto inst14_alt
		}
	}
	goto fail

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 3:
				goto inst3_alt
			case 8:
				goto inst8_alt
			case 15:
				goto inst15_alt
			case 23:
				goto inst23_alt
			case 11:
				goto inst11_alt
			case 19:
				goto inst19_alt
			case 22:
				goto inst22_alt
			case 14:
				goto inst14_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchTime || m == modeFirstTime {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
