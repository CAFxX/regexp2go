// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="Date" -pool=true "(?i)(?:[0-3]?\\d(?:st|nd|rd|th)?\\s+(?:of\\s+)?(?:jan\\.?|january|feb\\.?|february|mar\\.?|march|apr\\.?|april|may|jun\\.?|june|jul\\.?|july|aug\\.?|august|sep\\.?|september|oct\\.?|october|nov\\.?|november|dec\\.?|december)|(?:jan\\.?|january|feb\\.?|february|mar\\.?|march|apr\\.?|april|may|jun\\.?|june|jul\\.?|july|aug\\.?|august|sep\\.?|september|oct\\.?|october|nov\\.?|november|dec\\.?|december)\\s+[0-3]?\\d(?:st|nd|rd|th)?)(?:\\,)?\\s*(?:\\d{4})?|[0-3]?\\d[-\\./][0-3]?\\d[-\\./]\\d{2,4}"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const DateRegexp = "(?i)(?:[0-3]?\\d(?:st|nd|rd|th)?\\s+(?:of\\s+)?(?:jan\\.?|january|feb\\.?|february|mar\\.?|march|apr\\.?|april|may|jun\\.?|june|jul\\.?|july|aug\\.?|august|sep\\.?|september|oct\\.?|october|nov\\.?|november|dec\\.?|december)|(?:jan\\.?|january|feb\\.?|february|mar\\.?|march|apr\\.?|april|may|jun\\.?|june|jul\\.?|july|aug\\.?|august|sep\\.?|september|oct\\.?|october|nov\\.?|november|dec\\.?|december)\\s+[0-3]?\\d(?:st|nd|rd|th)?)(?:\\,)?\\s*(?:\\d{4})?|[0-3]?\\d[-\\./][0-3]?\\d[-\\./]\\d{2,4}"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeDate uint8

const (
	modeMatchDate modeTypeDate = iota
	modeFirstDate
	modeLongestDate
)

// Date implements the regular expression
// (?i)(?:[0-3]?\d(?:st|nd|rd|th)?\s+(?:of\s+)?(?:jan\.?|january|feb\.?|february|mar\.?|march|apr\.?|april|may|jun\.?|june|jul\.?|july|aug\.?|august|sep\.?|september|oct\.?|october|nov\.?|november|dec\.?|december)|(?:jan\.?|january|feb\.?|february|mar\.?|march|apr\.?|april|may|jun\.?|june|jul\.?|july|aug\.?|august|sep\.?|september|oct\.?|october|nov\.?|november|dec\.?|december)\s+[0-3]?\d(?:st|nd|rd|th)?)(?:\,)?\s*(?:\d{4})?|[0-3]?\d[-\./][0-3]?\d[-\./]\d{2,4}
// with flags 212.
type Date struct{}
type stateDate struct {
	c   [2]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e Date) FindString(r string) (matches [1]string, pos int, ok bool) {
	var bt [89]stateDate // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstDate, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e Date) FindLongestString(r string) (matches [1]string, pos int, ok bool) {
	var bt [89]stateDate // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestDate, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e Date) Find(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [89]stateDate // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstDate, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e Date) FindLongest(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [89]stateDate // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestDate, bt[:0])
	return
}

func (e Date) doByteSlice(s []byte, m modeTypeDate, bt []stateDate) (matches [1][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [1 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e Date) doString(s string, m modeTypeDate, bt []stateDate) (matches [1]string, pos int, ok bool) {
	var pmatches [1 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e Date) do(r string, m modeTypeDate, bt []stateDate) ([2]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*89 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]         // fast reset dynamic backtracking state
	c := [2]int{-1, -1} // captures
	var bc [2]int       // captures for the longest match so far
	matched := false    // succesful match flag
	i := si             // current byte index
	c[0] = i            // start of match
	goto inst296        // initial instruction

	goto unreachable
	goto inst1
inst1: // rune "03" -> 3
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 51 {
			i += sz
			goto inst3
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		}
	}
	goto fail

	goto unreachable
	goto inst2
inst2: // alt -> 1, 3
	{
		idx := i*89 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 2, 0})
	goto inst1
inst2_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst3
	}
	goto unreachable

	goto unreachable
	goto inst3
inst3: // rune "09" -> 15
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst15
		}
	}
	goto inst3_fail
	goto unreachable
	goto inst3_fail
inst3_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 272:
			goto inst272_alt
		}
	}
	goto fail

	goto unreachable
	goto inst4
inst4: // rune "S"/i -> 5
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\b\x00\x00\x00\b\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst5
			}
			goto inst4_fail
		}
		if cr == 383 {
			i += sz
			goto inst5
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst5
inst5: // rune "T"/i -> 16
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 84 || cr == 116 {
			i += sz
			goto inst16
		}
	}
	goto inst5_fail
	goto unreachable
	goto inst5_fail
inst5_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst8
inst8: // alt -> 4, 6
	{
		idx := i*89 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 8, 0})
	goto inst4
inst8_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst6
	}
	goto unreachable

	goto unreachable
	goto inst6
inst6: // rune "N"/i -> 7
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 78 || cr == 110 {
			i += sz
			goto inst7
		}
	}
	goto inst6_fail
	goto unreachable
	goto inst6_fail
inst6_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 11:
			goto inst11_alt
		}
	}
	goto fail

	goto unreachable
	goto inst7
inst7: // rune "D"/i -> 16
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 68 || cr == 100 {
			i += sz
			goto inst16
		}
	}
	goto inst7_fail
	goto unreachable
	goto inst7_fail
inst7_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 11:
			goto inst11_alt
		}
	}
	goto fail

	goto unreachable
	goto inst11
inst11: // alt -> 8, 9
	{
		idx := i*89 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 11, 0})
	goto inst8
inst11_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst9
	}
	goto unreachable

	goto unreachable
	goto inst9
inst9: // rune "R"/i -> 10
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst10
		}
	}
	goto inst9_fail
	goto unreachable
	goto inst9_fail
inst9_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 14:
			goto inst14_alt
		}
	}
	goto fail

	goto unreachable
	goto inst15
inst15: // alt -> 14, 16
	{
		idx := i*89 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 15, 0})
	goto inst14
inst15_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst16
	}
	goto unreachable

	goto unreachable
	goto inst14
inst14: // alt -> 11, 12
	{
		idx := i*89 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 14, 0})
	goto inst11
inst14_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst12
	}
	goto unreachable

	goto unreachable
	goto inst12
inst12: // rune "T"/i -> 13
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 84 || cr == 116 {
			i += sz
			goto inst13
		}
	}
	goto inst12_fail
	goto unreachable
	goto inst12_fail
inst12_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 15:
			goto inst15_alt
		}
	}
	goto fail

	goto unreachable
	goto inst13
inst13: // rune "H"/i -> 16
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 72 || cr == 104 {
			i += sz
			goto inst16
		}
	}
	goto inst13_fail
	goto unreachable
	goto inst13_fail
inst13_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 15:
			goto inst15_alt
		}
	}
	goto fail

	goto unreachable
	goto inst16
inst16: // rune "\t\n\f\r  " -> 17
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst17
			}
			goto inst16_fail
		}
	}
	goto inst16_fail
	goto unreachable
	goto inst16_fail
inst16_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 272:
			goto inst272_alt
		}
	}
	goto fail

	goto unreachable
	goto inst10
inst10: // rune "D"/i -> 16
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 68 || cr == 100 {
			i += sz
			goto inst16
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 14:
			goto inst14_alt
		}
	}
	goto fail

	goto unreachable
	goto inst17
inst17: // alt -> 16, 22
	{
		idx := i*89 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 17 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst16
		}
	}
	bt = append(bt, stateDate{c, i, 17, 0})
	goto inst16
inst17_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst22
	}
	goto unreachable

	goto unreachable
	goto inst18
inst18: // rune "O"/i -> 19
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 79 || cr == 111 {
			i += sz
			goto inst19
		}
	}
	goto inst18_fail
	goto unreachable
	goto inst18_fail
inst18_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 22:
			goto inst22_alt
		}
	}
	goto fail

	goto unreachable
	goto inst19
inst19: // rune "F"/i -> 20
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 70 || cr == 102 {
			i += sz
			goto inst20
		}
	}
	goto inst19_fail
	goto unreachable
	goto inst19_fail
inst19_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 22:
			goto inst22_alt
		}
	}
	goto fail

	goto unreachable
	goto inst20
inst20: // rune "\t\n\f\r  " -> 21
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst21
			}
			goto inst20_fail
		}
	}
	goto inst20_fail
	goto unreachable
	goto inst20_fail
inst20_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 22:
			goto inst22_alt
		}
	}
	goto fail

	goto unreachable
	goto inst21
inst21: // alt -> 20, 138
	{
		idx := i*89 + 6
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 21 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst20
		}
	}
	bt = append(bt, stateDate{c, i, 21, 0})
	goto inst20
inst21_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst138
	}
	goto unreachable

	goto unreachable
	goto inst22
inst22: // alt -> 18, 138
	{
		idx := i*89 + 7
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 22, 0})
	goto inst18
inst22_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst138
	}
	goto unreachable

	goto unreachable
	goto inst25
inst25: // rune "N"/i -> 32
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 78 || cr == 110 {
			i += sz
			goto inst32
		}
	}
	goto inst25_fail
	goto unreachable
	goto inst25_fail
inst25_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst24
inst24: // rune "A"/i -> 25
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 65 || cr == 97 {
			i += sz
			goto inst25
		}
	}
	goto inst24_fail
	goto unreachable
	goto inst24_fail
inst24_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst23
inst23: // rune "J"/i -> 24
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 74 || cr == 106 {
			i += sz
			goto inst24
		}
	}
	goto inst23_fail
	goto unreachable
	goto inst23_fail
inst23_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst32
inst32: // alt -> 27, 28
	{
		idx := i*89 + 8
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 32, 0})
	goto inst27
inst32_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst28
	}
	goto unreachable

	goto unreachable
	goto inst28
inst28: // rune "U"/i -> 29
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 85 || cr == 117 {
			i += sz
			goto inst29
		}
	}
	goto inst28_fail
	goto unreachable
	goto inst28_fail
inst28_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst29
inst29: // rune "A"/i -> 30
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 65 || cr == 97 {
			i += sz
			goto inst30
		}
	}
	goto inst29_fail
	goto unreachable
	goto inst29_fail
inst29_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst30
inst30: // rune "R"/i -> 31
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst31
		}
	}
	goto inst30_fail
	goto unreachable
	goto inst30_fail
inst30_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst40
inst40: // rune "A"/i -> 41
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 65 || cr == 97 {
			i += sz
			goto inst41
		}
	}
	goto inst40_fail
	goto unreachable
	goto inst40_fail
inst40_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 53:
			goto inst53_alt
		}
	}
	goto fail

	goto unreachable
	goto inst39
inst39: // rune "U"/i -> 40
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 85 || cr == 117 {
			i += sz
			goto inst40
		}
	}
	goto inst39_fail
	goto unreachable
	goto inst39_fail
inst39_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 53:
			goto inst53_alt
		}
	}
	goto fail

	goto unreachable
	goto inst38
inst38: // rune "R"/i -> 39
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst39
		}
	}
	goto inst38_fail
	goto unreachable
	goto inst38_fail
inst38_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 53:
			goto inst53_alt
		}
	}
	goto fail

	goto unreachable
	goto inst41
inst41: // rune "R"/i -> 42
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst42
		}
	}
	goto inst41_fail
	goto unreachable
	goto inst41_fail
inst41_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 53:
			goto inst53_alt
		}
	}
	goto fail

	goto unreachable
	goto inst31
inst31: // rune "Y"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 89 || cr == 121 {
			i += sz
			goto inst274
		}
	}
	goto inst31_fail
	goto unreachable
	goto inst31_fail
inst31_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 44:
			goto inst44_alt
		}
	}
	goto fail

	goto unreachable
	goto inst44
inst44: // alt -> 23, 33
	{
		idx := i*89 + 9
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 44, 0})
	goto inst23
inst44_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst33
	}
	goto unreachable

	goto unreachable
	goto inst33
inst33: // rune "F"/i -> 34
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 70 || cr == 102 {
			i += sz
			goto inst34
		}
	}
	goto inst33_fail
	goto unreachable
	goto inst33_fail
inst33_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 53:
			goto inst53_alt
		}
	}
	goto fail

	goto unreachable
	goto inst34
inst34: // rune "E"/i -> 35
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst35
		}
	}
	goto inst34_fail
	goto unreachable
	goto inst34_fail
inst34_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 53:
			goto inst53_alt
		}
	}
	goto fail

	goto unreachable
	goto inst35
inst35: // rune "B"/i -> 43
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 66 || cr == 98 {
			i += sz
			goto inst43
		}
	}
	goto inst35_fail
	goto unreachable
	goto inst35_fail
inst35_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 53:
			goto inst53_alt
		}
	}
	goto fail

	goto unreachable
	goto inst43
inst43: // alt -> 37, 38
	{
		idx := i*89 + 10
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 43, 0})
	goto inst37
inst43_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst38
	}
	goto unreachable

	goto unreachable
	goto inst42
inst42: // rune "Y"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 89 || cr == 121 {
			i += sz
			goto inst274
		}
	}
	goto inst42_fail
	goto unreachable
	goto inst42_fail
inst42_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 53:
			goto inst53_alt
		}
	}
	goto fail

	goto unreachable
	goto inst27
inst27: // alt -> 26, 274
	{
		idx := i*89 + 11
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 27, 0})
	goto inst26
inst27_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst274
	}
	goto unreachable

	goto unreachable
	goto inst37
inst37: // alt -> 36, 274
	{
		idx := i*89 + 12
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 37, 0})
	goto inst36
inst37_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst274
	}
	goto unreachable

	goto unreachable
	goto inst36
inst36: // string "." -> 274
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst274
		}
	}
	goto inst36_fail
	goto unreachable
	goto inst36_fail
inst36_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 37:
			goto inst37_alt
		}
	}
	goto fail

	goto unreachable
	goto inst26
inst26: // string "." -> 274
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst274
		}
	}
	goto inst26_fail
	goto unreachable
	goto inst26_fail
inst26_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 27:
			goto inst27_alt
		}
	}
	goto fail

	goto unreachable
	goto inst48
inst48: // string "." -> 274
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst274
		}
	}
	goto inst48_fail
	goto unreachable
	goto inst48_fail
inst48_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 49:
			goto inst49_alt
		}
	}
	goto fail

	goto unreachable
	goto inst49
inst49: // alt -> 48, 274
	{
		idx := i*89 + 13
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 49, 0})
	goto inst48
inst49_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst274
	}
	goto unreachable

	goto unreachable
	goto inst52
inst52: // alt -> 49, 50
	{
		idx := i*89 + 14
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 52, 0})
	goto inst49
inst52_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst50
	}
	goto unreachable

	goto unreachable
	goto inst50
inst50: // rune "C"/i -> 51
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 67 || cr == 99 {
			i += sz
			goto inst51
		}
	}
	goto inst50_fail
	goto unreachable
	goto inst50_fail
inst50_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 62:
			goto inst62_alt
		}
	}
	goto fail

	goto unreachable
	goto inst47
inst47: // rune "R"/i -> 52
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst52
		}
	}
	goto inst47_fail
	goto unreachable
	goto inst47_fail
inst47_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 62:
			goto inst62_alt
		}
	}
	goto fail

	goto unreachable
	goto inst46
inst46: // rune "A"/i -> 47
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 65 || cr == 97 {
			i += sz
			goto inst47
		}
	}
	goto inst46_fail
	goto unreachable
	goto inst46_fail
inst46_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 62:
			goto inst62_alt
		}
	}
	goto fail

	goto unreachable
	goto inst45
inst45: // rune "M"/i -> 46
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 77 || cr == 109 {
			i += sz
			goto inst46
		}
	}
	goto inst45_fail
	goto unreachable
	goto inst45_fail
inst45_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 62:
			goto inst62_alt
		}
	}
	goto fail

	goto unreachable
	goto inst53
inst53: // alt -> 44, 45
	{
		idx := i*89 + 15
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 53, 0})
	goto inst44
inst53_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst45
	}
	goto unreachable

	goto unreachable
	goto inst51
inst51: // rune "H"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 72 || cr == 104 {
			i += sz
			goto inst274
		}
	}
	goto inst51_fail
	goto unreachable
	goto inst51_fail
inst51_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 62:
			goto inst62_alt
		}
	}
	goto fail

	goto unreachable
	goto inst56
inst56: // rune "R"/i -> 61
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst61
		}
	}
	goto inst56_fail
	goto unreachable
	goto inst56_fail
inst56_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 66:
			goto inst66_alt
		}
	}
	goto fail

	goto unreachable
	goto inst55
inst55: // rune "P"/i -> 56
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 80 || cr == 112 {
			i += sz
			goto inst56
		}
	}
	goto inst55_fail
	goto unreachable
	goto inst55_fail
inst55_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 66:
			goto inst66_alt
		}
	}
	goto fail

	goto unreachable
	goto inst61
inst61: // alt -> 58, 59
	{
		idx := i*89 + 16
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 61, 0})
	goto inst58
inst61_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst59
	}
	goto unreachable

	goto unreachable
	goto inst59
inst59: // rune "I"/i -> 60
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 73 || cr == 105 {
			i += sz
			goto inst60
		}
	}
	goto inst59_fail
	goto unreachable
	goto inst59_fail
inst59_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 66:
			goto inst66_alt
		}
	}
	goto fail

	goto unreachable
	goto inst54
inst54: // rune "A"/i -> 55
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 65 || cr == 97 {
			i += sz
			goto inst55
		}
	}
	goto inst54_fail
	goto unreachable
	goto inst54_fail
inst54_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 66:
			goto inst66_alt
		}
	}
	goto fail

	goto unreachable
	goto inst62
inst62: // alt -> 53, 54
	{
		idx := i*89 + 17
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 62, 0})
	goto inst53
inst62_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst54
	}
	goto unreachable

	goto unreachable
	goto inst60
inst60: // rune "L"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 76 || cr == 108 {
			i += sz
			goto inst274
		}
	}
	goto inst60_fail
	goto unreachable
	goto inst60_fail
inst60_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 66:
			goto inst66_alt
		}
	}
	goto fail

	goto unreachable
	goto inst58
inst58: // alt -> 57, 274
	{
		idx := i*89 + 18
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 58, 0})
	goto inst57
inst58_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst274
	}
	goto unreachable

	goto unreachable
	goto inst57
inst57: // string "." -> 274
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst274
		}
	}
	goto inst57_fail
	goto unreachable
	goto inst57_fail
inst57_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 58:
			goto inst58_alt
		}
	}
	goto fail

	goto unreachable
	goto inst66
inst66: // alt -> 62, 63
	{
		idx := i*89 + 19
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 66, 0})
	goto inst62
inst66_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst63
	}
	goto unreachable

	goto unreachable
	goto inst63
inst63: // rune "M"/i -> 64
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 77 || cr == 109 {
			i += sz
			goto inst64
		}
	}
	goto inst63_fail
	goto unreachable
	goto inst63_fail
inst63_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 80:
			goto inst80_alt
		}
	}
	goto fail

	goto unreachable
	goto inst64
inst64: // rune "A"/i -> 65
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 65 || cr == 97 {
			i += sz
			goto inst65
		}
	}
	goto inst64_fail
	goto unreachable
	goto inst64_fail
inst64_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 80:
			goto inst80_alt
		}
	}
	goto fail

	goto unreachable
	goto inst80
inst80: // alt -> 66, 67
	{
		idx := i*89 + 20
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 80, 0})
	goto inst66
inst80_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst67
	}
	goto unreachable

	goto unreachable
	goto inst67
inst67: // rune "J"/i -> 68
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 74 || cr == 106 {
			i += sz
			goto inst68
		}
	}
	goto inst67_fail
	goto unreachable
	goto inst67_fail
inst67_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 90:
			goto inst90_alt
		}
	}
	goto fail

	goto unreachable
	goto inst68
inst68: // rune "U"/i -> 79
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 85 || cr == 117 {
			i += sz
			goto inst79
		}
	}
	goto inst68_fail
	goto unreachable
	goto inst68_fail
inst68_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 90:
			goto inst90_alt
		}
	}
	goto fail

	goto unreachable
	goto inst65
inst65: // rune "Y"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 89 || cr == 121 {
			i += sz
			goto inst274
		}
	}
	goto inst65_fail
	goto unreachable
	goto inst65_fail
inst65_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 80:
			goto inst80_alt
		}
	}
	goto fail

	goto unreachable
	goto inst79
inst79: // alt -> 69, 74
	{
		idx := i*89 + 21
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 79, 0})
	goto inst69
inst79_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst74
	}
	goto unreachable

	goto unreachable
	goto inst74
inst74: // rune "L"/i -> 78
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 76 || cr == 108 {
			i += sz
			goto inst78
		}
	}
	goto inst74_fail
	goto unreachable
	goto inst74_fail
inst74_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 90:
			goto inst90_alt
		}
	}
	goto fail

	goto unreachable
	goto inst69
inst69: // rune "N"/i -> 73
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 78 || cr == 110 {
			i += sz
			goto inst73
		}
	}
	goto inst69_fail
	goto unreachable
	goto inst69_fail
inst69_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 79:
			goto inst79_alt
		}
	}
	goto fail

	goto unreachable
	goto inst78
inst78: // alt -> 76, 77
	{
		idx := i*89 + 22
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 78, 0})
	goto inst76
inst78_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst77
	}
	goto unreachable

	goto unreachable
	goto inst77
inst77: // rune "Y"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 89 || cr == 121 {
			i += sz
			goto inst274
		}
	}
	goto inst77_fail
	goto unreachable
	goto inst77_fail
inst77_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 90:
			goto inst90_alt
		}
	}
	goto fail

	goto unreachable
	goto inst73
inst73: // alt -> 71, 72
	{
		idx := i*89 + 23
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 73, 0})
	goto inst71
inst73_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst72
	}
	goto unreachable

	goto unreachable
	goto inst71
inst71: // alt -> 70, 274
	{
		idx := i*89 + 24
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 71, 0})
	goto inst70
inst71_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst274
	}
	goto unreachable

	goto unreachable
	goto inst70
inst70: // string "." -> 274
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst274
		}
	}
	goto inst70_fail
	goto unreachable
	goto inst70_fail
inst70_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 71:
			goto inst71_alt
		}
	}
	goto fail

	goto unreachable
	goto inst72
inst72: // rune "E"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst274
		}
	}
	goto inst72_fail
	goto unreachable
	goto inst72_fail
inst72_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 79:
			goto inst79_alt
		}
	}
	goto fail

	goto unreachable
	goto inst76
inst76: // alt -> 75, 274
	{
		idx := i*89 + 25
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 76, 0})
	goto inst75
inst76_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst274
	}
	goto unreachable

	goto unreachable
	goto inst75
inst75: // string "." -> 274
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst274
		}
	}
	goto inst75_fail
	goto unreachable
	goto inst75_fail
inst75_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 76:
			goto inst76_alt
		}
	}
	goto fail

	goto unreachable
	goto inst274
inst274: // alt -> 273, 276
	{
		idx := i*89 + 26
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 274, 0})
	goto inst273
inst274_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst276
	}
	goto unreachable

	goto unreachable
	goto inst84
inst84: // string "." -> 274
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst274
		}
	}
	goto inst84_fail
	goto unreachable
	goto inst84_fail
inst84_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 85:
			goto inst85_alt
		}
	}
	goto fail

	goto unreachable
	goto inst85
inst85: // alt -> 84, 274
	{
		idx := i*89 + 27
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 85, 0})
	goto inst84
inst85_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst274
	}
	goto unreachable

	goto unreachable
	goto inst88
inst88: // rune "T"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 84 || cr == 116 {
			i += sz
			goto inst274
		}
	}
	goto inst88_fail
	goto unreachable
	goto inst88_fail
inst88_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 103:
			goto inst103_alt
		}
	}
	goto fail

	goto unreachable
	goto inst87
inst87: // rune "S"/i -> 88
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\b\x00\x00\x00\b\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst88
			}
			goto inst87_fail
		}
		if cr == 383 {
			i += sz
			goto inst88
		}
	}
	goto inst87_fail
	goto unreachable
	goto inst87_fail
inst87_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 103:
			goto inst103_alt
		}
	}
	goto fail

	goto unreachable
	goto inst86
inst86: // rune "U"/i -> 87
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 85 || cr == 117 {
			i += sz
			goto inst87
		}
	}
	goto inst86_fail
	goto unreachable
	goto inst86_fail
inst86_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 103:
			goto inst103_alt
		}
	}
	goto fail

	goto unreachable
	goto inst89
inst89: // alt -> 85, 86
	{
		idx := i*89 + 28
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 89, 0})
	goto inst85
inst89_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst86
	}
	goto unreachable

	goto unreachable
	goto inst83
inst83: // rune "G"/i -> 89
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 71 || cr == 103 {
			i += sz
			goto inst89
		}
	}
	goto inst83_fail
	goto unreachable
	goto inst83_fail
inst83_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 103:
			goto inst103_alt
		}
	}
	goto fail

	goto unreachable
	goto inst82
inst82: // rune "U"/i -> 83
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 85 || cr == 117 {
			i += sz
			goto inst83
		}
	}
	goto inst82_fail
	goto unreachable
	goto inst82_fail
inst82_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 103:
			goto inst103_alt
		}
	}
	goto fail

	goto unreachable
	goto inst81
inst81: // rune "A"/i -> 82
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 65 || cr == 97 {
			i += sz
			goto inst82
		}
	}
	goto inst81_fail
	goto unreachable
	goto inst81_fail
inst81_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 103:
			goto inst103_alt
		}
	}
	goto fail

	goto unreachable
	goto inst90
inst90: // alt -> 80, 81
	{
		idx := i*89 + 29
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 90, 0})
	goto inst80
inst90_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst81
	}
	goto unreachable

	goto unreachable
	goto inst94
inst94: // string "." -> 274
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst274
		}
	}
	goto inst94_fail
	goto unreachable
	goto inst94_fail
inst94_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 95:
			goto inst95_alt
		}
	}
	goto fail

	goto unreachable
	goto inst95
inst95: // alt -> 94, 274
	{
		idx := i*89 + 30
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 95, 0})
	goto inst94
inst95_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst274
	}
	goto unreachable

	goto unreachable
	goto inst107
inst107: // string "." -> 274
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst274
		}
	}
	goto inst107_fail
	goto unreachable
	goto inst107_fail
inst107_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 108:
			goto inst108_alt
		}
	}
	goto fail

	goto unreachable
	goto inst108
inst108: // alt -> 107, 274
	{
		idx := i*89 + 31
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 108, 0})
	goto inst107
inst108_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst274
	}
	goto unreachable

	goto unreachable
	goto inst112
inst112: // rune "R"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst274
		}
	}
	goto inst112_fail
	goto unreachable
	goto inst112_fail
inst112_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 126:
			goto inst126_alt
		}
	}
	goto fail

	goto unreachable
	goto inst118
inst118: // string "." -> 274
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst274
		}
	}
	goto inst118_fail
	goto unreachable
	goto inst118_fail
inst118_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 119:
			goto inst119_alt
		}
	}
	goto fail

	goto unreachable
	goto inst119
inst119: // alt -> 118, 274
	{
		idx := i*89 + 32
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 119, 0})
	goto inst118
inst119_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst274
	}
	goto unreachable

	goto unreachable
	goto inst102
inst102: // alt -> 95, 96
	{
		idx := i*89 + 33
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 102, 0})
	goto inst95
inst102_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst96
	}
	goto unreachable

	goto unreachable
	goto inst96
inst96: // rune "T"/i -> 97
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 84 || cr == 116 {
			i += sz
			goto inst97
		}
	}
	goto inst96_fail
	goto unreachable
	goto inst96_fail
inst96_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 114:
			goto inst114_alt
		}
	}
	goto fail

	goto unreachable
	goto inst101
inst101: // rune "R"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst274
		}
	}
	goto inst101_fail
	goto unreachable
	goto inst101_fail
inst101_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 114:
			goto inst114_alt
		}
	}
	goto fail

	goto unreachable
	goto inst100
inst100: // rune "E"/i -> 101
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst101
		}
	}
	goto inst100_fail
	goto unreachable
	goto inst100_fail
inst100_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 114:
			goto inst114_alt
		}
	}
	goto fail

	goto unreachable
	goto inst97
inst97: // rune "E"/i -> 98
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst98
		}
	}
	goto inst97_fail
	goto unreachable
	goto inst97_fail
inst97_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 114:
			goto inst114_alt
		}
	}
	goto fail

	goto unreachable
	goto inst98
inst98: // rune "M"/i -> 99
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 77 || cr == 109 {
			i += sz
			goto inst99
		}
	}
	goto inst98_fail
	goto unreachable
	goto inst98_fail
inst98_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 114:
			goto inst114_alt
		}
	}
	goto fail

	goto unreachable
	goto inst99
inst99: // rune "B"/i -> 100
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 66 || cr == 98 {
			i += sz
			goto inst100
		}
	}
	goto inst99_fail
	goto unreachable
	goto inst99_fail
inst99_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 114:
			goto inst114_alt
		}
	}
	goto fail

	goto unreachable
	goto inst93
inst93: // rune "P"/i -> 102
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 80 || cr == 112 {
			i += sz
			goto inst102
		}
	}
	goto inst93_fail
	goto unreachable
	goto inst93_fail
inst93_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 114:
			goto inst114_alt
		}
	}
	goto fail

	goto unreachable
	goto inst111
inst111: // rune "E"/i -> 112
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst112
		}
	}
	goto inst111_fail
	goto unreachable
	goto inst111_fail
inst111_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 126:
			goto inst126_alt
		}
	}
	goto fail

	goto unreachable
	goto inst110
inst110: // rune "B"/i -> 111
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 66 || cr == 98 {
			i += sz
			goto inst111
		}
	}
	goto inst110_fail
	goto unreachable
	goto inst110_fail
inst110_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 126:
			goto inst126_alt
		}
	}
	goto fail

	goto unreachable
	goto inst109
inst109: // rune "O"/i -> 110
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 79 || cr == 111 {
			i += sz
			goto inst110
		}
	}
	goto inst109_fail
	goto unreachable
	goto inst109_fail
inst109_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 126:
			goto inst126_alt
		}
	}
	goto fail

	goto unreachable
	goto inst113
inst113: // alt -> 108, 109
	{
		idx := i*89 + 34
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 113, 0})
	goto inst108
inst113_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst109
	}
	goto unreachable

	goto unreachable
	goto inst138
inst138: // alt -> 126, 127
	{
		idx := i*89 + 35
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 138, 0})
	goto inst126
inst138_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst127
	}
	goto unreachable

	goto unreachable
	goto inst106
inst106: // rune "T"/i -> 113
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 84 || cr == 116 {
			i += sz
			goto inst113
		}
	}
	goto inst106_fail
	goto unreachable
	goto inst106_fail
inst106_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 126:
			goto inst126_alt
		}
	}
	goto fail

	goto unreachable
	goto inst105
inst105: // rune "C"/i -> 106
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 67 || cr == 99 {
			i += sz
			goto inst106
		}
	}
	goto inst105_fail
	goto unreachable
	goto inst105_fail
inst105_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 126:
			goto inst126_alt
		}
	}
	goto fail

	goto unreachable
	goto inst104
inst104: // rune "O"/i -> 105
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 79 || cr == 111 {
			i += sz
			goto inst105
		}
	}
	goto inst104_fail
	goto unreachable
	goto inst104_fail
inst104_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 126:
			goto inst126_alt
		}
	}
	goto fail

	goto unreachable
	goto inst126
inst126: // alt -> 114, 115
	{
		idx := i*89 + 36
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 126, 0})
	goto inst114
inst126_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst115
	}
	goto unreachable

	goto unreachable
	goto inst114
inst114: // alt -> 103, 104
	{
		idx := i*89 + 37
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 114, 0})
	goto inst103
inst114_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst104
	}
	goto unreachable

	goto unreachable
	goto inst103
inst103: // alt -> 90, 91
	{
		idx := i*89 + 38
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 103, 0})
	goto inst90
inst103_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst91
	}
	goto unreachable

	goto unreachable
	goto inst115
inst115: // rune "N"/i -> 116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 78 || cr == 110 {
			i += sz
			goto inst116
		}
	}
	goto inst115_fail
	goto unreachable
	goto inst115_fail
inst115_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 138:
			goto inst138_alt
		}
	}
	goto fail

	goto unreachable
	goto inst116
inst116: // rune "O"/i -> 117
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 79 || cr == 111 {
			i += sz
			goto inst117
		}
	}
	goto inst116_fail
	goto unreachable
	goto inst116_fail
inst116_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 138:
			goto inst138_alt
		}
	}
	goto fail

	goto unreachable
	goto inst117
inst117: // rune "V"/i -> 125
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 86 || cr == 118 {
			i += sz
			goto inst125
		}
	}
	goto inst117_fail
	goto unreachable
	goto inst117_fail
inst117_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 138:
			goto inst138_alt
		}
	}
	goto fail

	goto unreachable
	goto inst125
inst125: // alt -> 119, 120
	{
		idx := i*89 + 39
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 125, 0})
	goto inst119
inst125_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst120
	}
	goto unreachable

	goto unreachable
	goto inst124
inst124: // rune "R"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst274
		}
	}
	goto inst124_fail
	goto unreachable
	goto inst124_fail
inst124_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 138:
			goto inst138_alt
		}
	}
	goto fail

	goto unreachable
	goto inst123
inst123: // rune "E"/i -> 124
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst124
		}
	}
	goto inst123_fail
	goto unreachable
	goto inst123_fail
inst123_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 138:
			goto inst138_alt
		}
	}
	goto fail

	goto unreachable
	goto inst122
inst122: // rune "B"/i -> 123
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 66 || cr == 98 {
			i += sz
			goto inst123
		}
	}
	goto inst122_fail
	goto unreachable
	goto inst122_fail
inst122_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 138:
			goto inst138_alt
		}
	}
	goto fail

	goto unreachable
	goto inst120
inst120: // rune "E"/i -> 121
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst121
		}
	}
	goto inst120_fail
	goto unreachable
	goto inst120_fail
inst120_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 138:
			goto inst138_alt
		}
	}
	goto fail

	goto unreachable
	goto inst121
inst121: // rune "M"/i -> 122
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 77 || cr == 109 {
			i += sz
			goto inst122
		}
	}
	goto inst121_fail
	goto unreachable
	goto inst121_fail
inst121_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 138:
			goto inst138_alt
		}
	}
	goto fail

	goto unreachable
	goto inst127
inst127: // rune "D"/i -> 128
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 68 || cr == 100 {
			i += sz
			goto inst128
		}
	}
	goto inst127_fail
	goto unreachable
	goto inst127_fail
inst127_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 22:
			goto inst22_alt
		case 272:
			goto inst272_alt
		}
	}
	goto fail

	goto unreachable
	goto inst128
inst128: // rune "E"/i -> 129
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst129
		}
	}
	goto inst128_fail
	goto unreachable
	goto inst128_fail
inst128_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 22:
			goto inst22_alt
		case 272:
			goto inst272_alt
		}
	}
	goto fail

	goto unreachable
	goto inst129
inst129: // rune "C"/i -> 137
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 67 || cr == 99 {
			i += sz
			goto inst137
		}
	}
	goto inst129_fail
	goto unreachable
	goto inst129_fail
inst129_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 22:
			goto inst22_alt
		case 272:
			goto inst272_alt
		}
	}
	goto fail

	goto unreachable
	goto inst130
inst130: // string "." -> 274
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst274
		}
	}
	goto inst130_fail
	goto unreachable
	goto inst130_fail
inst130_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 131:
			goto inst131_alt
		}
	}
	goto fail

	goto unreachable
	goto inst131
inst131: // alt -> 130, 274
	{
		idx := i*89 + 40
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 131, 0})
	goto inst130
inst131_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst274
	}
	goto unreachable

	goto unreachable
	goto inst137
inst137: // alt -> 131, 132
	{
		idx := i*89 + 41
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 137, 0})
	goto inst131
inst137_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst132
	}
	goto unreachable

	goto unreachable
	goto inst132
inst132: // rune "E"/i -> 133
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst133
		}
	}
	goto inst132_fail
	goto unreachable
	goto inst132_fail
inst132_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 22:
			goto inst22_alt
		case 272:
			goto inst272_alt
		}
	}
	goto fail

	goto unreachable
	goto inst133
inst133: // rune "M"/i -> 134
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 77 || cr == 109 {
			i += sz
			goto inst134
		}
	}
	goto inst133_fail
	goto unreachable
	goto inst133_fail
inst133_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 22:
			goto inst22_alt
		case 272:
			goto inst272_alt
		}
	}
	goto fail

	goto unreachable
	goto inst134
inst134: // rune "B"/i -> 135
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 66 || cr == 98 {
			i += sz
			goto inst135
		}
	}
	goto inst134_fail
	goto unreachable
	goto inst134_fail
inst134_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 22:
			goto inst22_alt
		case 272:
			goto inst272_alt
		}
	}
	goto fail

	goto unreachable
	goto inst136
inst136: // rune "R"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst274
		}
	}
	goto inst136_fail
	goto unreachable
	goto inst136_fail
inst136_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 22:
			goto inst22_alt
		case 272:
			goto inst272_alt
		}
	}
	goto fail

	goto unreachable
	goto inst135
inst135: // rune "E"/i -> 136
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst136
		}
	}
	goto inst135_fail
	goto unreachable
	goto inst135_fail
inst135_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 22:
			goto inst22_alt
		case 272:
			goto inst272_alt
		}
	}
	goto fail

	goto unreachable
	goto inst91
inst91: // rune "S"/i -> 92
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\b\x00\x00\x00\b\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst92
			}
			goto inst91_fail
		}
		if cr == 383 {
			i += sz
			goto inst92
		}
	}
	goto inst91_fail
	goto unreachable
	goto inst91_fail
inst91_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 114:
			goto inst114_alt
		}
	}
	goto fail

	goto unreachable
	goto inst92
inst92: // rune "E"/i -> 93
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst93
		}
	}
	goto inst92_fail
	goto unreachable
	goto inst92_fail
inst92_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 114:
			goto inst114_alt
		}
	}
	goto fail

	goto unreachable
	goto inst141
inst141: // rune "N"/i -> 148
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 78 || cr == 110 {
			i += sz
			goto inst148
		}
	}
	goto inst141_fail
	goto unreachable
	goto inst141_fail
inst141_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 160:
			goto inst160_alt
		}
	}
	goto fail

	goto unreachable
	goto inst148
inst148: // alt -> 143, 144
	{
		idx := i*89 + 42
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 148, 0})
	goto inst143
inst148_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst144
	}
	goto unreachable

	goto unreachable
	goto inst144
inst144: // rune "U"/i -> 145
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 85 || cr == 117 {
			i += sz
			goto inst145
		}
	}
	goto inst144_fail
	goto unreachable
	goto inst144_fail
inst144_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 160:
			goto inst160_alt
		}
	}
	goto fail

	goto unreachable
	goto inst163
inst163: // rune "R"/i -> 168
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst168
		}
	}
	goto inst163_fail
	goto unreachable
	goto inst163_fail
inst163_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		}
	}
	goto fail

	goto unreachable
	goto inst145
inst145: // rune "A"/i -> 146
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 65 || cr == 97 {
			i += sz
			goto inst146
		}
	}
	goto inst145_fail
	goto unreachable
	goto inst145_fail
inst145_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 160:
			goto inst160_alt
		}
	}
	goto fail

	goto unreachable
	goto inst146
inst146: // rune "R"/i -> 147
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst147
		}
	}
	goto inst146_fail
	goto unreachable
	goto inst146_fail
inst146_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 160:
			goto inst160_alt
		}
	}
	goto fail

	goto unreachable
	goto inst147
inst147: // rune "Y"/i -> 255
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 89 || cr == 121 {
			i += sz
			goto inst255
		}
	}
	goto inst147_fail
	goto unreachable
	goto inst147_fail
inst147_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 160:
			goto inst160_alt
		}
	}
	goto fail

	goto unreachable
	goto inst140
inst140: // rune "A"/i -> 141
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 65 || cr == 97 {
			i += sz
			goto inst141
		}
	}
	goto inst140_fail
	goto unreachable
	goto inst140_fail
inst140_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 160:
			goto inst160_alt
		}
	}
	goto fail

	goto unreachable
	goto inst143
inst143: // alt -> 142, 255
	{
		idx := i*89 + 43
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 143, 0})
	goto inst142
inst143_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst255
	}
	goto unreachable

	goto unreachable
	goto inst142
inst142: // string "." -> 255
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst255
		}
	}
	goto inst142_fail
	goto unreachable
	goto inst142_fail
inst142_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 143:
			goto inst143_alt
		}
	}
	goto fail

	goto unreachable
	goto inst139
inst139: // rune "J"/i -> 140
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 74 || cr == 106 {
			i += sz
			goto inst140
		}
	}
	goto inst139_fail
	goto unreachable
	goto inst139_fail
inst139_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 160:
			goto inst160_alt
		}
	}
	goto fail

	goto unreachable
	goto inst150
inst150: // rune "E"/i -> 151
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst151
		}
	}
	goto inst150_fail
	goto unreachable
	goto inst150_fail
inst150_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 169:
			goto inst169_alt
		}
	}
	goto fail

	goto unreachable
	goto inst151
inst151: // rune "B"/i -> 159
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 66 || cr == 98 {
			i += sz
			goto inst159
		}
	}
	goto inst151_fail
	goto unreachable
	goto inst151_fail
inst151_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 169:
			goto inst169_alt
		}
	}
	goto fail

	goto unreachable
	goto inst149
inst149: // rune "F"/i -> 150
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 70 || cr == 102 {
			i += sz
			goto inst150
		}
	}
	goto inst149_fail
	goto unreachable
	goto inst149_fail
inst149_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 169:
			goto inst169_alt
		}
	}
	goto fail

	goto unreachable
	goto inst216
inst216: // rune "E"/i -> 217
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst217
		}
	}
	goto inst216_fail
	goto unreachable
	goto inst216_fail
inst216_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 230:
			goto inst230_alt
		}
	}
	goto fail

	goto unreachable
	goto inst154
inst154: // rune "R"/i -> 155
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst155
		}
	}
	goto inst154_fail
	goto unreachable
	goto inst154_fail
inst154_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 169:
			goto inst169_alt
		}
	}
	goto fail

	goto unreachable
	goto inst155
inst155: // rune "U"/i -> 156
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 85 || cr == 117 {
			i += sz
			goto inst156
		}
	}
	goto inst155_fail
	goto unreachable
	goto inst155_fail
inst155_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 169:
			goto inst169_alt
		}
	}
	goto fail

	goto unreachable
	goto inst156
inst156: // rune "A"/i -> 157
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 65 || cr == 97 {
			i += sz
			goto inst157
		}
	}
	goto inst156_fail
	goto unreachable
	goto inst156_fail
inst156_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 169:
			goto inst169_alt
		}
	}
	goto fail

	goto unreachable
	goto inst157
inst157: // rune "R"/i -> 158
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst158
		}
	}
	goto inst157_fail
	goto unreachable
	goto inst157_fail
inst157_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 169:
			goto inst169_alt
		}
	}
	goto fail

	goto unreachable
	goto inst158
inst158: // rune "Y"/i -> 255
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 89 || cr == 121 {
			i += sz
			goto inst255
		}
	}
	goto inst158_fail
	goto unreachable
	goto inst158_fail
inst158_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 169:
			goto inst169_alt
		}
	}
	goto fail

	goto unreachable
	goto inst159
inst159: // alt -> 153, 154
	{
		idx := i*89 + 44
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 159, 0})
	goto inst153
inst159_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst154
	}
	goto unreachable

	goto unreachable
	goto inst160
inst160: // alt -> 139, 149
	{
		idx := i*89 + 45
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 160, 0})
	goto inst139
inst160_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst149
	}
	goto unreachable

	goto unreachable
	goto inst161
inst161: // rune "M"/i -> 162
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 77 || cr == 109 {
			i += sz
			goto inst162
		}
	}
	goto inst161_fail
	goto unreachable
	goto inst161_fail
inst161_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		}
	}
	goto fail

	goto unreachable
	goto inst162
inst162: // rune "A"/i -> 163
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 65 || cr == 97 {
			i += sz
			goto inst163
		}
	}
	goto inst162_fail
	goto unreachable
	goto inst162_fail
inst162_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		}
	}
	goto fail

	goto unreachable
	goto inst217
inst217: // rune "R"/i -> 255
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst255
		}
	}
	goto inst217_fail
	goto unreachable
	goto inst217_fail
inst217_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 230:
			goto inst230_alt
		}
	}
	goto fail

	goto unreachable
	goto inst166
inst166: // rune "C"/i -> 167
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 67 || cr == 99 {
			i += sz
			goto inst167
		}
	}
	goto inst166_fail
	goto unreachable
	goto inst166_fail
inst166_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		}
	}
	goto fail

	goto unreachable
	goto inst165
inst165: // alt -> 164, 255
	{
		idx := i*89 + 46
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 165, 0})
	goto inst164
inst165_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst255
	}
	goto unreachable

	goto unreachable
	goto inst169
inst169: // alt -> 160, 161
	{
		idx := i*89 + 47
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 169, 0})
	goto inst160
inst169_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst161
	}
	goto unreachable

	goto unreachable
	goto inst167
inst167: // rune "H"/i -> 255
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 72 || cr == 104 {
			i += sz
			goto inst255
		}
	}
	goto inst167_fail
	goto unreachable
	goto inst167_fail
inst167_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		}
	}
	goto fail

	goto unreachable
	goto inst168
inst168: // alt -> 165, 166
	{
		idx := i*89 + 48
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 168, 0})
	goto inst165
inst168_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst166
	}
	goto unreachable

	goto unreachable
	goto inst178
inst178: // alt -> 169, 170
	{
		idx := i*89 + 49
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 178, 0})
	goto inst169
inst178_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst170
	}
	goto unreachable

	goto unreachable
	goto inst170
inst170: // rune "A"/i -> 171
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 65 || cr == 97 {
			i += sz
			goto inst171
		}
	}
	goto inst170_fail
	goto unreachable
	goto inst170_fail
inst170_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 182:
			goto inst182_alt
		}
	}
	goto fail

	goto unreachable
	goto inst171
inst171: // rune "P"/i -> 172
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 80 || cr == 112 {
			i += sz
			goto inst172
		}
	}
	goto inst171_fail
	goto unreachable
	goto inst171_fail
inst171_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 182:
			goto inst182_alt
		}
	}
	goto fail

	goto unreachable
	goto inst172
inst172: // rune "R"/i -> 177
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst177
		}
	}
	goto inst172_fail
	goto unreachable
	goto inst172_fail
inst172_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 182:
			goto inst182_alt
		}
	}
	goto fail

	goto unreachable
	goto inst173
inst173: // string "." -> 255
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst255
		}
	}
	goto inst173_fail
	goto unreachable
	goto inst173_fail
inst173_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 174:
			goto inst174_alt
		}
	}
	goto fail

	goto unreachable
	goto inst174
inst174: // alt -> 173, 255
	{
		idx := i*89 + 50
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 174, 0})
	goto inst173
inst174_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst255
	}
	goto unreachable

	goto unreachable
	goto inst175
inst175: // rune "I"/i -> 176
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 73 || cr == 105 {
			i += sz
			goto inst176
		}
	}
	goto inst175_fail
	goto unreachable
	goto inst175_fail
inst175_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 182:
			goto inst182_alt
		}
	}
	goto fail

	goto unreachable
	goto inst176
inst176: // rune "L"/i -> 255
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 76 || cr == 108 {
			i += sz
			goto inst255
		}
	}
	goto inst176_fail
	goto unreachable
	goto inst176_fail
inst176_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 182:
			goto inst182_alt
		}
	}
	goto fail

	goto unreachable
	goto inst177
inst177: // alt -> 174, 175
	{
		idx := i*89 + 51
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 177, 0})
	goto inst174
inst177_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst175
	}
	goto unreachable

	goto unreachable
	goto inst153
inst153: // alt -> 152, 255
	{
		idx := i*89 + 52
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 153, 0})
	goto inst152
inst153_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst255
	}
	goto unreachable

	goto unreachable
	goto inst179
inst179: // rune "M"/i -> 180
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 77 || cr == 109 {
			i += sz
			goto inst180
		}
	}
	goto inst179_fail
	goto unreachable
	goto inst179_fail
inst179_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 196:
			goto inst196_alt
		}
	}
	goto fail

	goto unreachable
	goto inst164
inst164: // string "." -> 255
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst255
		}
	}
	goto inst164_fail
	goto unreachable
	goto inst164_fail
inst164_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 165:
			goto inst165_alt
		}
	}
	goto fail

	goto unreachable
	goto inst152
inst152: // string "." -> 255
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst255
		}
	}
	goto inst152_fail
	goto unreachable
	goto inst152_fail
inst152_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 153:
			goto inst153_alt
		}
	}
	goto fail

	goto unreachable
	goto inst182
inst182: // alt -> 178, 179
	{
		idx := i*89 + 53
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 182, 0})
	goto inst178
inst182_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst179
	}
	goto unreachable

	goto unreachable
	goto inst180
inst180: // rune "A"/i -> 181
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 65 || cr == 97 {
			i += sz
			goto inst181
		}
	}
	goto inst180_fail
	goto unreachable
	goto inst180_fail
inst180_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 196:
			goto inst196_alt
		}
	}
	goto fail

	goto unreachable
	goto inst183
inst183: // rune "J"/i -> 184
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 74 || cr == 106 {
			i += sz
			goto inst184
		}
	}
	goto inst183_fail
	goto unreachable
	goto inst183_fail
inst183_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 206:
			goto inst206_alt
		}
	}
	goto fail

	goto unreachable
	goto inst187
inst187: // alt -> 186, 255
	{
		idx := i*89 + 54
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 187, 0})
	goto inst186
inst187_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst255
	}
	goto unreachable

	goto unreachable
	goto inst186
inst186: // string "." -> 255
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst255
		}
	}
	goto inst186_fail
	goto unreachable
	goto inst186_fail
inst186_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 187:
			goto inst187_alt
		}
	}
	goto fail

	goto unreachable
	goto inst190
inst190: // rune "L"/i -> 194
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 76 || cr == 108 {
			i += sz
			goto inst194
		}
	}
	goto inst190_fail
	goto unreachable
	goto inst190_fail
inst190_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 206:
			goto inst206_alt
		}
	}
	goto fail

	goto unreachable
	goto inst181
inst181: // rune "Y"/i -> 255
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 89 || cr == 121 {
			i += sz
			goto inst255
		}
	}
	goto inst181_fail
	goto unreachable
	goto inst181_fail
inst181_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 196:
			goto inst196_alt
		}
	}
	goto fail

	goto unreachable
	goto inst189
inst189: // alt -> 187, 188
	{
		idx := i*89 + 55
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 189, 0})
	goto inst187
inst189_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst188
	}
	goto unreachable

	goto unreachable
	goto inst193
inst193: // rune "Y"/i -> 255
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 89 || cr == 121 {
			i += sz
			goto inst255
		}
	}
	goto inst193_fail
	goto unreachable
	goto inst193_fail
inst193_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 206:
			goto inst206_alt
		}
	}
	goto fail

	goto unreachable
	goto inst191
inst191: // string "." -> 255
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst255
		}
	}
	goto inst191_fail
	goto unreachable
	goto inst191_fail
inst191_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 192:
			goto inst192_alt
		}
	}
	goto fail

	goto unreachable
	goto inst192
inst192: // alt -> 191, 255
	{
		idx := i*89 + 56
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 192, 0})
	goto inst191
inst192_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst255
	}
	goto unreachable

	goto unreachable
	goto inst255
inst255: // rune "\t\n\f\r  " -> 256
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst256
			}
			goto inst255_fail
		}
	}
	goto inst255_fail
	goto unreachable
	goto inst255_fail
inst255_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 143:
			goto inst143_alt
		case 148:
			goto inst148_alt
		case 153:
			goto inst153_alt
		case 159:
			goto inst159_alt
		case 160:
			goto inst160_alt
		case 165:
			goto inst165_alt
		case 168:
			goto inst168_alt
		case 169:
			goto inst169_alt
		case 174:
			goto inst174_alt
		case 177:
			goto inst177_alt
		case 178:
			goto inst178_alt
		case 182:
			goto inst182_alt
		case 187:
			goto inst187_alt
		case 189:
			goto inst189_alt
		case 192:
			goto inst192_alt
		case 194:
			goto inst194_alt
		case 195:
			goto inst195_alt
		case 196:
			goto inst196_alt
		case 201:
			goto inst201_alt
		case 205:
			goto inst205_alt
		case 206:
			goto inst206_alt
		case 211:
			goto inst211_alt
		case 218:
			goto inst218_alt
		case 219:
			goto inst219_alt
		case 224:
			goto inst224_alt
		case 229:
			goto inst229_alt
		case 230:
			goto inst230_alt
		case 235:
			goto inst235_alt
		case 241:
			goto inst241_alt
		case 242:
			goto inst242_alt
		case 247:
			goto inst247_alt
		case 253:
			goto inst253_alt
		case 254:
			goto inst254_alt
		case 296:
			goto inst296_alt
		}
	}
	goto fail

	goto unreachable
	goto inst194
inst194: // alt -> 192, 193
	{
		idx := i*89 + 57
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 194, 0})
	goto inst192
inst194_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst193
	}
	goto unreachable

	goto unreachable
	goto inst206
inst206: // alt -> 196, 197
	{
		idx := i*89 + 58
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 206, 0})
	goto inst196
inst206_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst197
	}
	goto unreachable

	goto unreachable
	goto inst196
inst196: // alt -> 182, 183
	{
		idx := i*89 + 59
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 196, 0})
	goto inst182
inst196_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst183
	}
	goto unreachable

	goto unreachable
	goto inst197
inst197: // rune "A"/i -> 198
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 65 || cr == 97 {
			i += sz
			goto inst198
		}
	}
	goto inst197_fail
	goto unreachable
	goto inst197_fail
inst197_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 219:
			goto inst219_alt
		}
	}
	goto fail

	goto unreachable
	goto inst198
inst198: // rune "U"/i -> 199
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 85 || cr == 117 {
			i += sz
			goto inst199
		}
	}
	goto inst198_fail
	goto unreachable
	goto inst198_fail
inst198_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 219:
			goto inst219_alt
		}
	}
	goto fail

	goto unreachable
	goto inst200
inst200: // string "." -> 255
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst255
		}
	}
	goto inst200_fail
	goto unreachable
	goto inst200_fail
inst200_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 201:
			goto inst201_alt
		}
	}
	goto fail

	goto unreachable
	goto inst201
inst201: // alt -> 200, 255
	{
		idx := i*89 + 60
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 201, 0})
	goto inst200
inst201_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst255
	}
	goto unreachable

	goto unreachable
	goto inst185
inst185: // rune "N"/i -> 189
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 78 || cr == 110 {
			i += sz
			goto inst189
		}
	}
	goto inst185_fail
	goto unreachable
	goto inst185_fail
inst185_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 195:
			goto inst195_alt
		}
	}
	goto fail

	goto unreachable
	goto inst188
inst188: // rune "E"/i -> 255
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst255
		}
	}
	goto inst188_fail
	goto unreachable
	goto inst188_fail
inst188_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 195:
			goto inst195_alt
		}
	}
	goto fail

	goto unreachable
	goto inst208
inst208: // rune "E"/i -> 209
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst209
		}
	}
	goto inst208_fail
	goto unreachable
	goto inst208_fail
inst208_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 230:
			goto inst230_alt
		}
	}
	goto fail

	goto unreachable
	goto inst204
inst204: // rune "T"/i -> 255
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 84 || cr == 116 {
			i += sz
			goto inst255
		}
	}
	goto inst204_fail
	goto unreachable
	goto inst204_fail
inst204_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 219:
			goto inst219_alt
		}
	}
	goto fail

	goto unreachable
	goto inst205
inst205: // alt -> 201, 202
	{
		idx := i*89 + 61
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 205, 0})
	goto inst201
inst205_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst202
	}
	goto unreachable

	goto unreachable
	goto inst199
inst199: // rune "G"/i -> 205
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 71 || cr == 103 {
			i += sz
			goto inst205
		}
	}
	goto inst199_fail
	goto unreachable
	goto inst199_fail
inst199_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 219:
			goto inst219_alt
		}
	}
	goto fail

	goto unreachable
	goto inst207
inst207: // rune "S"/i -> 208
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\b\x00\x00\x00\b\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst208
			}
			goto inst207_fail
		}
		if cr == 383 {
			i += sz
			goto inst208
		}
	}
	goto inst207_fail
	goto unreachable
	goto inst207_fail
inst207_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 230:
			goto inst230_alt
		}
	}
	goto fail

	goto unreachable
	goto inst202
inst202: // rune "U"/i -> 203
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 85 || cr == 117 {
			i += sz
			goto inst203
		}
	}
	goto inst202_fail
	goto unreachable
	goto inst202_fail
inst202_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 219:
			goto inst219_alt
		}
	}
	goto fail

	goto unreachable
	goto inst195
inst195: // alt -> 185, 190
	{
		idx := i*89 + 62
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 195, 0})
	goto inst185
inst195_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst190
	}
	goto unreachable

	goto unreachable
	goto inst210
inst210: // string "." -> 255
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst255
		}
	}
	goto inst210_fail
	goto unreachable
	goto inst210_fail
inst210_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 211:
			goto inst211_alt
		}
	}
	goto fail

	goto unreachable
	goto inst209
inst209: // rune "P"/i -> 218
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 80 || cr == 112 {
			i += sz
			goto inst218
		}
	}
	goto inst209_fail
	goto unreachable
	goto inst209_fail
inst209_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 230:
			goto inst230_alt
		}
	}
	goto fail

	goto unreachable
	goto inst223
inst223: // string "." -> 255
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst255
		}
	}
	goto inst223_fail
	goto unreachable
	goto inst223_fail
inst223_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 224:
			goto inst224_alt
		}
	}
	goto fail

	goto unreachable
	goto inst211
inst211: // alt -> 210, 255
	{
		idx := i*89 + 63
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 211, 0})
	goto inst210
inst211_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst255
	}
	goto unreachable

	goto unreachable
	goto inst214
inst214: // rune "M"/i -> 215
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 77 || cr == 109 {
			i += sz
			goto inst215
		}
	}
	goto inst214_fail
	goto unreachable
	goto inst214_fail
inst214_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 230:
			goto inst230_alt
		}
	}
	goto fail

	goto unreachable
	goto inst203
inst203: // rune "S"/i -> 204
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\b\x00\x00\x00\b\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst204
			}
			goto inst203_fail
		}
		if cr == 383 {
			i += sz
			goto inst204
		}
	}
	goto inst203_fail
	goto unreachable
	goto inst203_fail
inst203_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 219:
			goto inst219_alt
		}
	}
	goto fail

	goto unreachable
	goto inst184
inst184: // rune "U"/i -> 195
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 85 || cr == 117 {
			i += sz
			goto inst195
		}
	}
	goto inst184_fail
	goto unreachable
	goto inst184_fail
inst184_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 206:
			goto inst206_alt
		}
	}
	goto fail

	goto unreachable
	goto inst215
inst215: // rune "B"/i -> 216
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 66 || cr == 98 {
			i += sz
			goto inst216
		}
	}
	goto inst215_fail
	goto unreachable
	goto inst215_fail
inst215_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 230:
			goto inst230_alt
		}
	}
	goto fail

	goto unreachable
	goto inst218
inst218: // alt -> 211, 212
	{
		idx := i*89 + 64
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 218, 0})
	goto inst211
inst218_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst212
	}
	goto unreachable

	goto unreachable
	goto inst219
inst219: // alt -> 206, 207
	{
		idx := i*89 + 65
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 219, 0})
	goto inst206
inst219_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst207
	}
	goto unreachable

	goto unreachable
	goto inst220
inst220: // rune "O"/i -> 221
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 79 || cr == 111 {
			i += sz
			goto inst221
		}
	}
	goto inst220_fail
	goto unreachable
	goto inst220_fail
inst220_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 242:
			goto inst242_alt
		}
	}
	goto fail

	goto unreachable
	goto inst224
inst224: // alt -> 223, 255
	{
		idx := i*89 + 66
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 224, 0})
	goto inst223
inst224_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst255
	}
	goto unreachable

	goto unreachable
	goto inst222
inst222: // rune "T"/i -> 229
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 84 || cr == 116 {
			i += sz
			goto inst229
		}
	}
	goto inst222_fail
	goto unreachable
	goto inst222_fail
inst222_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 242:
			goto inst242_alt
		}
	}
	goto fail

	goto unreachable
	goto inst221
inst221: // rune "C"/i -> 222
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 67 || cr == 99 {
			i += sz
			goto inst222
		}
	}
	goto inst221_fail
	goto unreachable
	goto inst221_fail
inst221_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 242:
			goto inst242_alt
		}
	}
	goto fail

	goto unreachable
	goto inst228
inst228: // rune "R"/i -> 255
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst255
		}
	}
	goto inst228_fail
	goto unreachable
	goto inst228_fail
inst228_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 242:
			goto inst242_alt
		}
	}
	goto fail

	goto unreachable
	goto inst225
inst225: // rune "O"/i -> 226
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 79 || cr == 111 {
			i += sz
			goto inst226
		}
	}
	goto inst225_fail
	goto unreachable
	goto inst225_fail
inst225_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 242:
			goto inst242_alt
		}
	}
	goto fail

	goto unreachable
	goto inst226
inst226: // rune "B"/i -> 227
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 66 || cr == 98 {
			i += sz
			goto inst227
		}
	}
	goto inst226_fail
	goto unreachable
	goto inst226_fail
inst226_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 242:
			goto inst242_alt
		}
	}
	goto fail

	goto unreachable
	goto inst227
inst227: // rune "E"/i -> 228
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst228
		}
	}
	goto inst227_fail
	goto unreachable
	goto inst227_fail
inst227_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 242:
			goto inst242_alt
		}
	}
	goto fail

	goto unreachable
	goto inst212
inst212: // rune "T"/i -> 213
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 84 || cr == 116 {
			i += sz
			goto inst213
		}
	}
	goto inst212_fail
	goto unreachable
	goto inst212_fail
inst212_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 230:
			goto inst230_alt
		}
	}
	goto fail

	goto unreachable
	goto inst229
inst229: // alt -> 224, 225
	{
		idx := i*89 + 67
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 229, 0})
	goto inst224
inst229_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst225
	}
	goto unreachable

	goto unreachable
	goto inst230
inst230: // alt -> 219, 220
	{
		idx := i*89 + 68
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 230, 0})
	goto inst219
inst230_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst220
	}
	goto unreachable

	goto unreachable
	goto inst231
inst231: // rune "N"/i -> 232
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 78 || cr == 110 {
			i += sz
			goto inst232
		}
	}
	goto inst231_fail
	goto unreachable
	goto inst231_fail
inst231_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 254:
			goto inst254_alt
		}
	}
	goto fail

	goto unreachable
	goto inst232
inst232: // rune "O"/i -> 233
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 79 || cr == 111 {
			i += sz
			goto inst233
		}
	}
	goto inst232_fail
	goto unreachable
	goto inst232_fail
inst232_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 254:
			goto inst254_alt
		}
	}
	goto fail

	goto unreachable
	goto inst233
inst233: // rune "V"/i -> 241
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 86 || cr == 118 {
			i += sz
			goto inst241
		}
	}
	goto inst233_fail
	goto unreachable
	goto inst233_fail
inst233_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 254:
			goto inst254_alt
		}
	}
	goto fail

	goto unreachable
	goto inst234
inst234: // string "." -> 255
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst255
		}
	}
	goto inst234_fail
	goto unreachable
	goto inst234_fail
inst234_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst213
inst213: // rune "E"/i -> 214
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst214
		}
	}
	goto inst213_fail
	goto unreachable
	goto inst213_fail
inst213_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 230:
			goto inst230_alt
		}
	}
	goto fail

	goto unreachable
	goto inst236
inst236: // rune "E"/i -> 237
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst237
		}
	}
	goto inst236_fail
	goto unreachable
	goto inst236_fail
inst236_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 254:
			goto inst254_alt
		}
	}
	goto fail

	goto unreachable
	goto inst237
inst237: // rune "M"/i -> 238
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 77 || cr == 109 {
			i += sz
			goto inst238
		}
	}
	goto inst237_fail
	goto unreachable
	goto inst237_fail
inst237_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 254:
			goto inst254_alt
		}
	}
	goto fail

	goto unreachable
	goto inst238
inst238: // rune "B"/i -> 239
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 66 || cr == 98 {
			i += sz
			goto inst239
		}
	}
	goto inst238_fail
	goto unreachable
	goto inst238_fail
inst238_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 254:
			goto inst254_alt
		}
	}
	goto fail

	goto unreachable
	goto inst239
inst239: // rune "E"/i -> 240
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst240
		}
	}
	goto inst239_fail
	goto unreachable
	goto inst239_fail
inst239_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 254:
			goto inst254_alt
		}
	}
	goto fail

	goto unreachable
	goto inst240
inst240: // rune "R"/i -> 255
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst255
		}
	}
	goto inst240_fail
	goto unreachable
	goto inst240_fail
inst240_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 254:
			goto inst254_alt
		}
	}
	goto fail

	goto unreachable
	goto inst241
inst241: // alt -> 235, 236
	{
		idx := i*89 + 69
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 241, 0})
	goto inst235
inst241_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst236
	}
	goto unreachable

	goto unreachable
	goto inst242
inst242: // alt -> 230, 231
	{
		idx := i*89 + 70
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 242, 0})
	goto inst230
inst242_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst231
	}
	goto unreachable

	goto unreachable
	goto inst253
inst253: // alt -> 247, 248
	{
		idx := i*89 + 71
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 253, 0})
	goto inst247
inst253_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst248
	}
	goto unreachable

	goto unreachable
	goto inst247
inst247: // alt -> 246, 255
	{
		idx := i*89 + 72
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 247, 0})
	goto inst246
inst247_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst255
	}
	goto unreachable

	goto unreachable
	goto inst235
inst235: // alt -> 234, 255
	{
		idx := i*89 + 73
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 235, 0})
	goto inst234
inst235_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst255
	}
	goto unreachable

	goto unreachable
	goto inst246
inst246: // string "." -> 255
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst255
		}
	}
	goto inst246_fail
	goto unreachable
	goto inst246_fail
inst246_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 247:
			goto inst247_alt
		}
	}
	goto fail

	goto unreachable
	goto inst245
inst245: // rune "C"/i -> 253
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 67 || cr == 99 {
			i += sz
			goto inst253
		}
	}
	goto inst245_fail
	goto unreachable
	goto inst245_fail
inst245_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 296:
			goto inst296_alt
		}
	}
	goto fail

	goto unreachable
	goto inst248
inst248: // rune "E"/i -> 249
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst249
		}
	}
	goto inst248_fail
	goto unreachable
	goto inst248_fail
inst248_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 296:
			goto inst296_alt
		}
	}
	goto fail

	goto unreachable
	goto inst243
inst243: // rune "D"/i -> 244
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 68 || cr == 100 {
			i += sz
			goto inst244
		}
	}
	goto inst243_fail
	goto unreachable
	goto inst243_fail
inst243_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 296:
			goto inst296_alt
		}
	}
	goto fail

	goto unreachable
	goto inst250
inst250: // rune "B"/i -> 251
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 66 || cr == 98 {
			i += sz
			goto inst251
		}
	}
	goto inst250_fail
	goto unreachable
	goto inst250_fail
inst250_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 296:
			goto inst296_alt
		}
	}
	goto fail

	goto unreachable
	goto inst251
inst251: // rune "E"/i -> 252
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst252
		}
	}
	goto inst251_fail
	goto unreachable
	goto inst251_fail
inst251_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 296:
			goto inst296_alt
		}
	}
	goto fail

	goto unreachable
	goto inst252
inst252: // rune "R"/i -> 255
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst255
		}
	}
	goto inst252_fail
	goto unreachable
	goto inst252_fail
inst252_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 296:
			goto inst296_alt
		}
	}
	goto fail

	goto unreachable
	goto inst249
inst249: // rune "M"/i -> 250
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 77 || cr == 109 {
			i += sz
			goto inst250
		}
	}
	goto inst249_fail
	goto unreachable
	goto inst249_fail
inst249_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 296:
			goto inst296_alt
		}
	}
	goto fail

	goto unreachable
	goto inst254
inst254: // alt -> 242, 243
	{
		idx := i*89 + 74
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 254, 0})
	goto inst242
inst254_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst243
	}
	goto unreachable

	goto unreachable
	goto inst244
inst244: // rune "E"/i -> 245
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst245
		}
	}
	goto inst244_fail
	goto unreachable
	goto inst244_fail
inst244_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 296:
			goto inst296_alt
		}
	}
	goto fail

	goto unreachable
	goto inst256
inst256: // alt -> 255, 258
	{
		idx := i*89 + 75
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 256 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst255
		}
	}
	bt = append(bt, stateDate{c, i, 256, 0})
	goto inst255
inst256_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst258
	}
	goto unreachable

	goto unreachable
	goto inst257
inst257: // rune "03" -> 259
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 51 {
			i += sz
			goto inst259
		}
	}
	goto inst257_fail
	goto unreachable
	goto inst257_fail
inst257_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 258:
			goto inst258_alt
		}
	}
	goto fail

	goto unreachable
	goto inst258
inst258: // alt -> 257, 259
	{
		idx := i*89 + 76
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 258, 0})
	goto inst257
inst258_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst259
	}
	goto unreachable

	goto unreachable
	goto inst259
inst259: // rune "09" -> 271
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst271
		}
	}
	goto inst259_fail
	goto unreachable
	goto inst259_fail
inst259_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 143:
			goto inst143_alt
		case 148:
			goto inst148_alt
		case 153:
			goto inst153_alt
		case 159:
			goto inst159_alt
		case 160:
			goto inst160_alt
		case 165:
			goto inst165_alt
		case 168:
			goto inst168_alt
		case 169:
			goto inst169_alt
		case 174:
			goto inst174_alt
		case 177:
			goto inst177_alt
		case 178:
			goto inst178_alt
		case 182:
			goto inst182_alt
		case 187:
			goto inst187_alt
		case 189:
			goto inst189_alt
		case 192:
			goto inst192_alt
		case 194:
			goto inst194_alt
		case 195:
			goto inst195_alt
		case 196:
			goto inst196_alt
		case 201:
			goto inst201_alt
		case 205:
			goto inst205_alt
		case 206:
			goto inst206_alt
		case 211:
			goto inst211_alt
		case 218:
			goto inst218_alt
		case 219:
			goto inst219_alt
		case 224:
			goto inst224_alt
		case 229:
			goto inst229_alt
		case 230:
			goto inst230_alt
		case 235:
			goto inst235_alt
		case 241:
			goto inst241_alt
		case 242:
			goto inst242_alt
		case 247:
			goto inst247_alt
		case 253:
			goto inst253_alt
		case 254:
			goto inst254_alt
		case 258:
			goto inst258_alt
		case 296:
			goto inst296_alt
		}
	}
	goto fail

	goto unreachable
	goto inst260
inst260: // rune "S"/i -> 261
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\b\x00\x00\x00\b\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst261
			}
			goto inst260_fail
		}
		if cr == 383 {
			i += sz
			goto inst261
		}
	}
	goto inst260_fail
	goto unreachable
	goto inst260_fail
inst260_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 264:
			goto inst264_alt
		}
	}
	goto fail

	goto unreachable
	goto inst261
inst261: // rune "T"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 84 || cr == 116 {
			i += sz
			goto inst274
		}
	}
	goto inst261_fail
	goto unreachable
	goto inst261_fail
inst261_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 264:
			goto inst264_alt
		}
	}
	goto fail

	goto unreachable
	goto inst262
inst262: // rune "N"/i -> 263
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 78 || cr == 110 {
			i += sz
			goto inst263
		}
	}
	goto inst262_fail
	goto unreachable
	goto inst262_fail
inst262_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 267:
			goto inst267_alt
		}
	}
	goto fail

	goto unreachable
	goto inst263
inst263: // rune "D"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 68 || cr == 100 {
			i += sz
			goto inst274
		}
	}
	goto inst263_fail
	goto unreachable
	goto inst263_fail
inst263_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 267:
			goto inst267_alt
		}
	}
	goto fail

	goto unreachable
	goto inst264
inst264: // alt -> 260, 262
	{
		idx := i*89 + 77
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 264, 0})
	goto inst260
inst264_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst262
	}
	goto unreachable

	goto unreachable
	goto inst265
inst265: // rune "R"/i -> 266
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 82 || cr == 114 {
			i += sz
			goto inst266
		}
	}
	goto inst265_fail
	goto unreachable
	goto inst265_fail
inst265_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 270:
			goto inst270_alt
		}
	}
	goto fail

	goto unreachable
	goto inst266
inst266: // rune "D"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 68 || cr == 100 {
			i += sz
			goto inst274
		}
	}
	goto inst266_fail
	goto unreachable
	goto inst266_fail
inst266_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 270:
			goto inst270_alt
		}
	}
	goto fail

	goto unreachable
	goto inst267
inst267: // alt -> 264, 265
	{
		idx := i*89 + 78
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 267, 0})
	goto inst264
inst267_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst265
	}
	goto unreachable

	goto unreachable
	goto inst268
inst268: // rune "T"/i -> 269
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 84 || cr == 116 {
			i += sz
			goto inst269
		}
	}
	goto inst268_fail
	goto unreachable
	goto inst268_fail
inst268_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 271:
			goto inst271_alt
		}
	}
	goto fail

	goto unreachable
	goto inst269
inst269: // rune "H"/i -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 72 || cr == 104 {
			i += sz
			goto inst274
		}
	}
	goto inst269_fail
	goto unreachable
	goto inst269_fail
inst269_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 271:
			goto inst271_alt
		}
	}
	goto fail

	goto unreachable
	goto inst270
inst270: // alt -> 267, 268
	{
		idx := i*89 + 79
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 270, 0})
	goto inst267
inst270_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst268
	}
	goto unreachable

	goto unreachable
	goto inst271
inst271: // alt -> 270, 274
	{
		idx := i*89 + 80
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 271, 0})
	goto inst270
inst271_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst274
	}
	goto unreachable

	goto unreachable
	goto inst272
inst272: // alt -> 2, 254
	{
		idx := i*89 + 81
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 272, 0})
	goto inst2
inst272_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst254
	}
	goto unreachable

	goto unreachable
	goto inst273
inst273: // string "," -> 276
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "," {
			i += 1
			goto inst276
		}
	}
	goto inst273_fail
	goto unreachable
	goto inst273_fail
inst273_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 274:
			goto inst274_alt
		}
	}
	goto fail

	goto unreachable
	goto inst276
inst276: // alt -> 275, 281
	{
		idx := i*89 + 82
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 276 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst275
		}
	}
	bt = append(bt, stateDate{c, i, 276, 0})
	goto inst275
inst276_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst281
	}
	goto unreachable

	goto unreachable
	goto inst275
inst275: // rune "\t\n\f\r  " -> 276
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst276
			}
			goto inst275_fail
		}
	}
	goto inst275_fail
	goto unreachable
	goto inst275_fail
inst275_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 276:
			goto inst276_alt
		}
	}
	goto fail

	goto unreachable
	goto inst281
inst281: // alt -> 277, 297
	{
		idx := i*89 + 83
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 281, 0})
	goto inst277
inst281_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst297
	}
	goto unreachable

	goto unreachable
	goto inst277
inst277: // rune "09" -> 278
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst278
		}
	}
	goto inst277_fail
	goto unreachable
	goto inst277_fail
inst277_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 281:
			goto inst281_alt
		}
	}
	goto fail

	goto unreachable
	goto inst278
inst278: // rune "09" -> 279
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst279
		}
	}
	goto inst278_fail
	goto unreachable
	goto inst278_fail
inst278_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 281:
			goto inst281_alt
		}
	}
	goto fail

	goto unreachable
	goto inst279
inst279: // rune "09" -> 280
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst280
		}
	}
	goto inst279_fail
	goto unreachable
	goto inst279_fail
inst279_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 281:
			goto inst281_alt
		}
	}
	goto fail

	goto unreachable
	goto inst280
inst280: // rune "09" -> 297
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst297
		}
	}
	goto inst280_fail
	goto unreachable
	goto inst280_fail
inst280_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 281:
			goto inst281_alt
		}
	}
	goto fail

	goto unreachable
	goto inst296
inst296: // alt -> 272, 283
	{
		idx := i*89 + 84
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 296, 0})
	goto inst272
inst296_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst283
	}
	goto unreachable

	goto unreachable
	goto inst282
inst282: // rune "03" -> 284
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 51 {
			i += sz
			goto inst284
		}
	}
	goto inst282_fail
	goto unreachable
	goto inst282_fail
inst282_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 283:
			goto inst283_alt
		}
	}
	goto fail

	goto unreachable
	goto inst283
inst283: // alt -> 282, 284
	{
		idx := i*89 + 85
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 283, 0})
	goto inst282
inst283_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst284
	}
	goto unreachable

	goto unreachable
	goto inst284
inst284: // rune "09" -> 285
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst285
		}
	}
	goto inst284_fail
	goto unreachable
	goto inst284_fail
inst284_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 283:
			goto inst283_alt
		}
	}
	goto fail

	goto unreachable
	goto inst285
inst285: // rune "-/" -> 287
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 45 && cr <= 47 {
			i += sz
			goto inst287
		}
	}
	goto inst285_fail
	goto unreachable
	goto inst285_fail
inst285_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 283:
			goto inst283_alt
		}
	}
	goto fail

	goto unreachable
	goto inst286
inst286: // rune "03" -> 288
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 51 {
			i += sz
			goto inst288
		}
	}
	goto inst286_fail
	goto unreachable
	goto inst286_fail
inst286_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 287:
			goto inst287_alt
		}
	}
	goto fail

	goto unreachable
	goto inst287
inst287: // alt -> 286, 288
	{
		idx := i*89 + 86
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 287, 0})
	goto inst286
inst287_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst288
	}
	goto unreachable

	goto unreachable
	goto inst288
inst288: // rune "09" -> 289
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst289
		}
	}
	goto inst288_fail
	goto unreachable
	goto inst288_fail
inst288_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 283:
			goto inst283_alt
		case 287:
			goto inst287_alt
		}
	}
	goto fail

	goto unreachable
	goto inst289
inst289: // rune "-/" -> 290
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 45 && cr <= 47 {
			i += sz
			goto inst290
		}
	}
	goto inst289_fail
	goto unreachable
	goto inst289_fail
inst289_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 283:
			goto inst283_alt
		case 287:
			goto inst287_alt
		}
	}
	goto fail

	goto unreachable
	goto inst290
inst290: // rune "09" -> 291
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst291
		}
	}
	goto inst290_fail
	goto unreachable
	goto inst290_fail
inst290_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 283:
			goto inst283_alt
		case 287:
			goto inst287_alt
		}
	}
	goto fail

	goto unreachable
	goto inst291
inst291: // rune "09" -> 295
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst295
		}
	}
	goto inst291_fail
	goto unreachable
	goto inst291_fail
inst291_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 283:
			goto inst283_alt
		case 287:
			goto inst287_alt
		}
	}
	goto fail

	// inst0 unreacheable

	goto unreachable
	goto inst293
inst293: // rune "09" -> 297
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst297
		}
	}
	goto inst293_fail
	goto unreachable
	goto inst293_fail
inst293_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 294:
			goto inst294_alt
		}
	}
	goto fail

	goto unreachable
	goto inst294
inst294: // alt -> 293, 297
	{
		idx := i*89 + 87
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 294, 0})
	goto inst293
inst294_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst297
	}
	goto unreachable

	goto unreachable
	goto inst295
inst295: // alt -> 292, 297
	{
		idx := i*89 + 88
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateDate{c, i, 295, 0})
	goto inst292
inst295_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst297
	}
	goto unreachable

	goto unreachable
	goto inst292
inst292: // rune "09" -> 294
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst294
		}
	}
	goto inst292_fail
	goto unreachable
	goto inst292_fail
inst292_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 295:
			goto inst295_alt
		}
	}
	goto fail

	goto unreachable
	goto inst297
inst297: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 2:
				goto inst2_alt
			case 8:
				goto inst8_alt
			case 11:
				goto inst11_alt
			case 15:
				goto inst15_alt
			case 14:
				goto inst14_alt
			case 17:
				goto inst17_alt
			case 21:
				goto inst21_alt
			case 22:
				goto inst22_alt
			case 32:
				goto inst32_alt
			case 44:
				goto inst44_alt
			case 43:
				goto inst43_alt
			case 27:
				goto inst27_alt
			case 37:
				goto inst37_alt
			case 49:
				goto inst49_alt
			case 52:
				goto inst52_alt
			case 53:
				goto inst53_alt
			case 61:
				goto inst61_alt
			case 62:
				goto inst62_alt
			case 58:
				goto inst58_alt
			case 66:
				goto inst66_alt
			case 80:
				goto inst80_alt
			case 79:
				goto inst79_alt
			case 78:
				goto inst78_alt
			case 73:
				goto inst73_alt
			case 71:
				goto inst71_alt
			case 76:
				goto inst76_alt
			case 274:
				goto inst274_alt
			case 85:
				goto inst85_alt
			case 89:
				goto inst89_alt
			case 90:
				goto inst90_alt
			case 95:
				goto inst95_alt
			case 108:
				goto inst108_alt
			case 119:
				goto inst119_alt
			case 102:
				goto inst102_alt
			case 113:
				goto inst113_alt
			case 138:
				goto inst138_alt
			case 126:
				goto inst126_alt
			case 114:
				goto inst114_alt
			case 103:
				goto inst103_alt
			case 125:
				goto inst125_alt
			case 131:
				goto inst131_alt
			case 137:
				goto inst137_alt
			case 148:
				goto inst148_alt
			case 143:
				goto inst143_alt
			case 159:
				goto inst159_alt
			case 160:
				goto inst160_alt
			case 165:
				goto inst165_alt
			case 169:
				goto inst169_alt
			case 168:
				goto inst168_alt
			case 178:
				goto inst178_alt
			case 174:
				goto inst174_alt
			case 177:
				goto inst177_alt
			case 153:
				goto inst153_alt
			case 182:
				goto inst182_alt
			case 187:
				goto inst187_alt
			case 189:
				goto inst189_alt
			case 192:
				goto inst192_alt
			case 194:
				goto inst194_alt
			case 206:
				goto inst206_alt
			case 196:
				goto inst196_alt
			case 201:
				goto inst201_alt
			case 205:
				goto inst205_alt
			case 195:
				goto inst195_alt
			case 211:
				goto inst211_alt
			case 218:
				goto inst218_alt
			case 219:
				goto inst219_alt
			case 224:
				goto inst224_alt
			case 229:
				goto inst229_alt
			case 230:
				goto inst230_alt
			case 241:
				goto inst241_alt
			case 242:
				goto inst242_alt
			case 253:
				goto inst253_alt
			case 247:
				goto inst247_alt
			case 235:
				goto inst235_alt
			case 254:
				goto inst254_alt
			case 256:
				goto inst256_alt
			case 258:
				goto inst258_alt
			case 264:
				goto inst264_alt
			case 267:
				goto inst267_alt
			case 270:
				goto inst270_alt
			case 271:
				goto inst271_alt
			case 272:
				goto inst272_alt
			case 276:
				goto inst276_alt
			case 281:
				goto inst281_alt
			case 296:
				goto inst296_alt
			case 283:
				goto inst283_alt
			case 287:
				goto inst287_alt
			case 294:
				goto inst294_alt
			case 295:
				goto inst295_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchDate || m == modeFirstDate {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
