// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="MACAddress" -pool=true "(([a-fA-F0-9]{2}[:-]){5}([a-fA-F0-9]{2}))"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const MACAddressRegexp = "(([a-fA-F0-9]{2}[:-]){5}([a-fA-F0-9]{2}))"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeMACAddress uint8

const (
	modeMatchMACAddress modeTypeMACAddress = iota
	modeFirstMACAddress
	modeLongestMACAddress
)

// MACAddress implements the regular expression
// (([a-fA-F0-9]{2}[:-]){5}([a-fA-F0-9]{2}))
// with flags 212.
type MACAddress struct{}
type stateMACAddress struct {
	c   [8]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e MACAddress) FindString(r string) (matches [4]string, pos int, ok bool) {
	var bt [0]stateMACAddress // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstMACAddress, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e MACAddress) FindLongestString(r string) (matches [4]string, pos int, ok bool) {
	var bt [0]stateMACAddress // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestMACAddress, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e MACAddress) Find(s []byte) (matches [4][]byte, pos int, ok bool) {
	var bt [0]stateMACAddress // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstMACAddress, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e MACAddress) FindLongest(s []byte) (matches [4][]byte, pos int, ok bool) {
	var bt [0]stateMACAddress // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestMACAddress, bt[:0])
	return
}

func (e MACAddress) doByteSlice(s []byte, m modeTypeMACAddress, bt []stateMACAddress) (matches [4][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [4 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e MACAddress) doString(s string, m modeTypeMACAddress, bt []stateMACAddress) (matches [4]string, pos int, ok bool) {
	var pmatches [4 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e MACAddress) do(r string, m modeTypeMACAddress, bt []stateMACAddress) ([8]int, bool) {
	si := 0 // starting byte index
restart:
	bt = bt[:0]                                 // fast reset dynamic backtracking state
	c := [8]int{-1, -1, -1, -1, -1, -1, -1, -1} // captures
	var bc [8]int                               // captures for the longest match so far
	matched := false                            // succesful match flag
	i := si                                     // current byte index
	c[0] = i                                    // start of match
	goto inst1                                  // initial instruction

	// inst0 unreacheable

	goto unreachable
	goto inst1
inst1: // cap 2 -> 2
	c[2] = i
	goto inst2

	goto unreachable
	goto inst2
inst2: // cap 4 -> 3
	c[4] = i
	goto inst3

	goto unreachable
	goto inst3
inst3: // rune "09AFaf" -> 4
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst4
			}
			goto inst3_fail
		}
	}
	goto inst3_fail
	goto unreachable
	goto inst3_fail
inst3_fail:
	goto fail

	goto unreachable
	goto inst4
inst4: // rune "09AFaf" -> 5
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst5
			}
			goto inst4_fail
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	goto fail

	goto unreachable
	goto inst5
inst5: // rune "--::" -> 6
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 45 || cr == 58 {
			i += sz
			goto inst6
		}
	}
	goto inst5_fail
	goto unreachable
	goto inst5_fail
inst5_fail:
	goto fail

	goto unreachable
	goto inst6
inst6: // cap 5 -> 7
	c[5] = i
	goto inst7

	goto unreachable
	goto inst7
inst7: // cap 4 -> 8
	c[4] = i
	goto inst8

	goto unreachable
	goto inst8
inst8: // rune "09AFaf" -> 9
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst9
			}
			goto inst8_fail
		}
	}
	goto inst8_fail
	goto unreachable
	goto inst8_fail
inst8_fail:
	goto fail

	goto unreachable
	goto inst9
inst9: // rune "09AFaf" -> 10
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst10
			}
			goto inst9_fail
		}
	}
	goto inst9_fail
	goto unreachable
	goto inst9_fail
inst9_fail:
	goto fail

	goto unreachable
	goto inst10
inst10: // rune "--::" -> 11
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 45 || cr == 58 {
			i += sz
			goto inst11
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	goto fail

	goto unreachable
	goto inst11
inst11: // cap 5 -> 12
	c[5] = i
	goto inst12

	goto unreachable
	goto inst12
inst12: // cap 4 -> 13
	c[4] = i
	goto inst13

	goto unreachable
	goto inst13
inst13: // rune "09AFaf" -> 14
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst14
			}
			goto inst13_fail
		}
	}
	goto inst13_fail
	goto unreachable
	goto inst13_fail
inst13_fail:
	goto fail

	goto unreachable
	goto inst14
inst14: // rune "09AFaf" -> 15
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst15
			}
			goto inst14_fail
		}
	}
	goto inst14_fail
	goto unreachable
	goto inst14_fail
inst14_fail:
	goto fail

	goto unreachable
	goto inst15
inst15: // rune "--::" -> 16
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 45 || cr == 58 {
			i += sz
			goto inst16
		}
	}
	goto inst15_fail
	goto unreachable
	goto inst15_fail
inst15_fail:
	goto fail

	goto unreachable
	goto inst16
inst16: // cap 5 -> 17
	c[5] = i
	goto inst17

	goto unreachable
	goto inst17
inst17: // cap 4 -> 18
	c[4] = i
	goto inst18

	goto unreachable
	goto inst18
inst18: // rune "09AFaf" -> 19
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst19
			}
			goto inst18_fail
		}
	}
	goto inst18_fail
	goto unreachable
	goto inst18_fail
inst18_fail:
	goto fail

	goto unreachable
	goto inst19
inst19: // rune "09AFaf" -> 20
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst20
			}
			goto inst19_fail
		}
	}
	goto inst19_fail
	goto unreachable
	goto inst19_fail
inst19_fail:
	goto fail

	goto unreachable
	goto inst20
inst20: // rune "--::" -> 21
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 45 || cr == 58 {
			i += sz
			goto inst21
		}
	}
	goto inst20_fail
	goto unreachable
	goto inst20_fail
inst20_fail:
	goto fail

	goto unreachable
	goto inst21
inst21: // cap 5 -> 22
	c[5] = i
	goto inst22

	goto unreachable
	goto inst22
inst22: // cap 4 -> 23
	c[4] = i
	goto inst23

	goto unreachable
	goto inst23
inst23: // rune "09AFaf" -> 24
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst24
			}
			goto inst23_fail
		}
	}
	goto inst23_fail
	goto unreachable
	goto inst23_fail
inst23_fail:
	goto fail

	goto unreachable
	goto inst24
inst24: // rune "09AFaf" -> 25
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst25
			}
			goto inst24_fail
		}
	}
	goto inst24_fail
	goto unreachable
	goto inst24_fail
inst24_fail:
	goto fail

	goto unreachable
	goto inst25
inst25: // rune "--::" -> 26
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 45 || cr == 58 {
			i += sz
			goto inst26
		}
	}
	goto inst25_fail
	goto unreachable
	goto inst25_fail
inst25_fail:
	goto fail

	goto unreachable
	goto inst26
inst26: // cap 5 -> 27
	c[5] = i
	goto inst27

	goto unreachable
	goto inst27
inst27: // cap 6 -> 28
	c[6] = i
	goto inst28

	goto unreachable
	goto inst28
inst28: // rune "09AFaf" -> 29
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst29
			}
			goto inst28_fail
		}
	}
	goto inst28_fail
	goto unreachable
	goto inst28_fail
inst28_fail:
	goto fail

	goto unreachable
	goto inst29
inst29: // rune "09AFaf" -> 30
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst30
			}
			goto inst29_fail
		}
	}
	goto inst29_fail
	goto unreachable
	goto inst29_fail
inst29_fail:
	goto fail

	goto unreachable
	goto inst30
inst30: // cap 7 -> 31
	c[7] = i
	goto inst31

	goto unreachable
	goto inst31
inst31: // cap 3 -> 32
	c[3] = i
	goto inst32

	goto unreachable
	goto inst32
inst32: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchMACAddress || m == modeFirstMACAddress {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
