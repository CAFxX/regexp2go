// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="IPv6" -pool=true "(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const IPv6Regexp = "(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeIPv6 uint8

const (
	modeMatchIPv6 modeTypeIPv6 = iota
	modeFirstIPv6
	modeLongestIPv6
)

// IPv6 implements the regular expression
// (?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*
// with flags 212.
type IPv6 struct{}
type stateIPv6 struct {
	c   [2]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e IPv6) FindString(r string) (matches [1]string, pos int, ok bool) {
	var bt [389]stateIPv6 // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstIPv6, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e IPv6) FindLongestString(r string) (matches [1]string, pos int, ok bool) {
	var bt [389]stateIPv6 // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestIPv6, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e IPv6) Find(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [389]stateIPv6 // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstIPv6, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e IPv6) FindLongest(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [389]stateIPv6 // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestIPv6, bt[:0])
	return
}

func (e IPv6) doByteSlice(s []byte, m modeTypeIPv6, bt []stateIPv6) (matches [1][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [1 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e IPv6) doString(s string, m modeTypeIPv6, bt []stateIPv6) (matches [1]string, pos int, ok bool) {
	var pmatches [1 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e IPv6) do(r string, m modeTypeIPv6, bt []stateIPv6) ([2]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*389 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]         // fast reset dynamic backtracking state
	c := [2]int{-1, -1} // captures
	var bc [2]int       // captures for the longest match so far
	matched := false    // succesful match flag
	i := si             // current byte index
	c[0] = i            // start of match
	goto inst1061       // initial instruction

	goto unreachable
	goto inst1
inst1: // rune "09AFaf" -> 7
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst7
			}
			goto inst1_fail
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst7
inst7: // alt -> 2, 8
	{
		idx := i*389 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 7, 0})
	goto inst2
inst7_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst8
	}
	goto unreachable

	goto unreachable
	goto inst2
inst2: // rune "09AFaf" -> 6
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst6
			}
			goto inst2_fail
		}
	}
	goto inst2_fail
	goto unreachable
	goto inst2_fail
inst2_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 7:
			goto inst7_alt
		}
	}
	goto fail

	goto unreachable
	goto inst6
inst6: // alt -> 3, 8
	{
		idx := i*389 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 6, 0})
	goto inst3
inst6_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst8
	}
	goto unreachable

	goto unreachable
	goto inst3
inst3: // rune "09AFaf" -> 5
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst5
			}
			goto inst3_fail
		}
	}
	goto inst3_fail
	goto unreachable
	goto inst3_fail
inst3_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		}
	}
	goto fail

	goto unreachable
	goto inst5
inst5: // alt -> 4, 8
	{
		idx := i*389 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 5, 0})
	goto inst4
inst5_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst8
	}
	goto unreachable

	goto unreachable
	goto inst8
inst8: // string ":" -> 9
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst9
		}
	}
	goto inst8_fail
	goto unreachable
	goto inst8_fail
inst8_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst4
inst4: // rune "09AFaf" -> 8
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst8
			}
			goto inst4_fail
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		}
	}
	goto fail

	goto unreachable
	goto inst9
inst9: // rune "09AFaf" -> 15
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst15
			}
			goto inst9_fail
		}
	}
	goto inst9_fail
	goto unreachable
	goto inst9_fail
inst9_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst15
inst15: // alt -> 10, 16
	{
		idx := i*389 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 15, 0})
	goto inst10
inst15_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst16
	}
	goto unreachable

	goto unreachable
	goto inst10
inst10: // rune "09AFaf" -> 14
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst14
			}
			goto inst10_fail
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 15:
			goto inst15_alt
		}
	}
	goto fail

	goto unreachable
	goto inst14
inst14: // alt -> 11, 16
	{
		idx := i*389 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 14, 0})
	goto inst11
inst14_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst16
	}
	goto unreachable

	goto unreachable
	goto inst11
inst11: // rune "09AFaf" -> 13
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst13
			}
			goto inst11_fail
		}
	}
	goto inst11_fail
	goto unreachable
	goto inst11_fail
inst11_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 14:
			goto inst14_alt
		}
	}
	goto fail

	goto unreachable
	goto inst13
inst13: // alt -> 12, 16
	{
		idx := i*389 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 13, 0})
	goto inst12
inst13_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst16
	}
	goto unreachable

	goto unreachable
	goto inst16
inst16: // string ":" -> 17
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst17
		}
	}
	goto inst16_fail
	goto unreachable
	goto inst16_fail
inst16_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst12
inst12: // rune "09AFaf" -> 16
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst16
			}
			goto inst12_fail
		}
	}
	goto inst12_fail
	goto unreachable
	goto inst12_fail
inst12_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 13:
			goto inst13_alt
		}
	}
	goto fail

	goto unreachable
	goto inst17
inst17: // rune "09AFaf" -> 23
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst23
			}
			goto inst17_fail
		}
	}
	goto inst17_fail
	goto unreachable
	goto inst17_fail
inst17_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst23
inst23: // alt -> 18, 24
	{
		idx := i*389 + 6
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 23, 0})
	goto inst18
inst23_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst24
	}
	goto unreachable

	goto unreachable
	goto inst18
inst18: // rune "09AFaf" -> 22
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst22
			}
			goto inst18_fail
		}
	}
	goto inst18_fail
	goto unreachable
	goto inst18_fail
inst18_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 23:
			goto inst23_alt
		}
	}
	goto fail

	goto unreachable
	goto inst22
inst22: // alt -> 19, 24
	{
		idx := i*389 + 7
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 22, 0})
	goto inst19
inst22_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst24
	}
	goto unreachable

	goto unreachable
	goto inst19
inst19: // rune "09AFaf" -> 21
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst21
			}
			goto inst19_fail
		}
	}
	goto inst19_fail
	goto unreachable
	goto inst19_fail
inst19_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 22:
			goto inst22_alt
		}
	}
	goto fail

	goto unreachable
	goto inst21
inst21: // alt -> 20, 24
	{
		idx := i*389 + 8
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 21, 0})
	goto inst20
inst21_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst24
	}
	goto unreachable

	goto unreachable
	goto inst24
inst24: // string ":" -> 25
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst25
		}
	}
	goto inst24_fail
	goto unreachable
	goto inst24_fail
inst24_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst20
inst20: // rune "09AFaf" -> 24
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst24
			}
			goto inst20_fail
		}
	}
	goto inst20_fail
	goto unreachable
	goto inst20_fail
inst20_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 21:
			goto inst21_alt
		}
	}
	goto fail

	goto unreachable
	goto inst25
inst25: // rune "09AFaf" -> 31
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst31
			}
			goto inst25_fail
		}
	}
	goto inst25_fail
	goto unreachable
	goto inst25_fail
inst25_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst31
inst31: // alt -> 26, 32
	{
		idx := i*389 + 9
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 31, 0})
	goto inst26
inst31_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst32
	}
	goto unreachable

	goto unreachable
	goto inst26
inst26: // rune "09AFaf" -> 30
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst30
			}
			goto inst26_fail
		}
	}
	goto inst26_fail
	goto unreachable
	goto inst26_fail
inst26_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 31:
			goto inst31_alt
		}
	}
	goto fail

	goto unreachable
	goto inst30
inst30: // alt -> 27, 32
	{
		idx := i*389 + 10
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 30, 0})
	goto inst27
inst30_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst32
	}
	goto unreachable

	goto unreachable
	goto inst27
inst27: // rune "09AFaf" -> 29
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst29
			}
			goto inst27_fail
		}
	}
	goto inst27_fail
	goto unreachable
	goto inst27_fail
inst27_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 30:
			goto inst30_alt
		}
	}
	goto fail

	goto unreachable
	goto inst29
inst29: // alt -> 28, 32
	{
		idx := i*389 + 11
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 29, 0})
	goto inst28
inst29_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst32
	}
	goto unreachable

	goto unreachable
	goto inst32
inst32: // string ":" -> 33
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst33
		}
	}
	goto inst32_fail
	goto unreachable
	goto inst32_fail
inst32_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst28
inst28: // rune "09AFaf" -> 32
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst32
			}
			goto inst28_fail
		}
	}
	goto inst28_fail
	goto unreachable
	goto inst28_fail
inst28_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 29:
			goto inst29_alt
		}
	}
	goto fail

	goto unreachable
	goto inst33
inst33: // rune "09AFaf" -> 39
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst39
			}
			goto inst33_fail
		}
	}
	goto inst33_fail
	goto unreachable
	goto inst33_fail
inst33_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst39
inst39: // alt -> 34, 40
	{
		idx := i*389 + 12
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 39, 0})
	goto inst34
inst39_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst40
	}
	goto unreachable

	goto unreachable
	goto inst34
inst34: // rune "09AFaf" -> 38
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst38
			}
			goto inst34_fail
		}
	}
	goto inst34_fail
	goto unreachable
	goto inst34_fail
inst34_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 39:
			goto inst39_alt
		}
	}
	goto fail

	goto unreachable
	goto inst38
inst38: // alt -> 35, 40
	{
		idx := i*389 + 13
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 38, 0})
	goto inst35
inst38_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst40
	}
	goto unreachable

	goto unreachable
	goto inst35
inst35: // rune "09AFaf" -> 37
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst37
			}
			goto inst35_fail
		}
	}
	goto inst35_fail
	goto unreachable
	goto inst35_fail
inst35_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 38:
			goto inst38_alt
		}
	}
	goto fail

	goto unreachable
	goto inst37
inst37: // alt -> 36, 40
	{
		idx := i*389 + 14
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 37, 0})
	goto inst36
inst37_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst40
	}
	goto unreachable

	goto unreachable
	goto inst40
inst40: // string ":" -> 41
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst41
		}
	}
	goto inst40_fail
	goto unreachable
	goto inst40_fail
inst40_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 39:
			goto inst39_alt
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst36
inst36: // rune "09AFaf" -> 40
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst40
			}
			goto inst36_fail
		}
	}
	goto inst36_fail
	goto unreachable
	goto inst36_fail
inst36_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 37:
			goto inst37_alt
		}
	}
	goto fail

	goto unreachable
	goto inst41
inst41: // rune "09AFaf" -> 47
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst47
			}
			goto inst41_fail
		}
	}
	goto inst41_fail
	goto unreachable
	goto inst41_fail
inst41_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 39:
			goto inst39_alt
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst47
inst47: // alt -> 42, 48
	{
		idx := i*389 + 15
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 47, 0})
	goto inst42
inst47_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst48
	}
	goto unreachable

	goto unreachable
	goto inst42
inst42: // rune "09AFaf" -> 46
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst46
			}
			goto inst42_fail
		}
	}
	goto inst42_fail
	goto unreachable
	goto inst42_fail
inst42_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 47:
			goto inst47_alt
		}
	}
	goto fail

	goto unreachable
	goto inst46
inst46: // alt -> 43, 48
	{
		idx := i*389 + 16
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 46, 0})
	goto inst43
inst46_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst48
	}
	goto unreachable

	goto unreachable
	goto inst43
inst43: // rune "09AFaf" -> 45
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst45
			}
			goto inst43_fail
		}
	}
	goto inst43_fail
	goto unreachable
	goto inst43_fail
inst43_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 46:
			goto inst46_alt
		}
	}
	goto fail

	goto unreachable
	goto inst45
inst45: // alt -> 44, 48
	{
		idx := i*389 + 17
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 45, 0})
	goto inst44
inst45_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst48
	}
	goto unreachable

	goto unreachable
	goto inst48
inst48: // string ":" -> 49
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst49
		}
	}
	goto inst48_fail
	goto unreachable
	goto inst48_fail
inst48_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 39:
			goto inst39_alt
		case 45:
			goto inst45_alt
		case 46:
			goto inst46_alt
		case 47:
			goto inst47_alt
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst44
inst44: // rune "09AFaf" -> 48
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst48
			}
			goto inst44_fail
		}
	}
	goto inst44_fail
	goto unreachable
	goto inst44_fail
inst44_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 45:
			goto inst45_alt
		}
	}
	goto fail

	goto unreachable
	goto inst49
inst49: // rune "09AFaf" -> 55
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst55
			}
			goto inst49_fail
		}
	}
	goto inst49_fail
	goto unreachable
	goto inst49_fail
inst49_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 39:
			goto inst39_alt
		case 45:
			goto inst45_alt
		case 46:
			goto inst46_alt
		case 47:
			goto inst47_alt
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst55
inst55: // alt -> 50, 56
	{
		idx := i*389 + 18
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 55, 0})
	goto inst50
inst55_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst56
	}
	goto unreachable

	goto unreachable
	goto inst50
inst50: // rune "09AFaf" -> 54
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst54
			}
			goto inst50_fail
		}
	}
	goto inst50_fail
	goto unreachable
	goto inst50_fail
inst50_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 55:
			goto inst55_alt
		}
	}
	goto fail

	goto unreachable
	goto inst54
inst54: // alt -> 51, 56
	{
		idx := i*389 + 19
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 54, 0})
	goto inst51
inst54_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst56
	}
	goto unreachable

	goto unreachable
	goto inst51
inst51: // rune "09AFaf" -> 53
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst53
			}
			goto inst51_fail
		}
	}
	goto inst51_fail
	goto unreachable
	goto inst51_fail
inst51_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 54:
			goto inst54_alt
		}
	}
	goto fail

	goto unreachable
	goto inst53
inst53: // alt -> 52, 56
	{
		idx := i*389 + 20
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 53, 0})
	goto inst52
inst53_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst56
	}
	goto unreachable

	goto unreachable
	goto inst56
inst56: // string ":" -> 65
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst65
		}
	}
	goto inst56_fail
	goto unreachable
	goto inst56_fail
inst56_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 39:
			goto inst39_alt
		case 45:
			goto inst45_alt
		case 46:
			goto inst46_alt
		case 47:
			goto inst47_alt
		case 53:
			goto inst53_alt
		case 54:
			goto inst54_alt
		case 55:
			goto inst55_alt
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst52
inst52: // rune "09AFaf" -> 56
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst56
			}
			goto inst52_fail
		}
	}
	goto inst52_fail
	goto unreachable
	goto inst52_fail
inst52_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 53:
			goto inst53_alt
		}
	}
	goto fail

	goto unreachable
	goto inst65
inst65: // alt -> 57, 64
	{
		idx := i*389 + 21
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 65, 0})
	goto inst57
inst65_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst64
	}
	goto unreachable

	goto unreachable
	goto inst57
inst57: // rune "09AFaf" -> 63
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst63
			}
			goto inst57_fail
		}
	}
	goto inst57_fail
	goto unreachable
	goto inst57_fail
inst57_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 65:
			goto inst65_alt
		}
	}
	goto fail

	goto unreachable
	goto inst63
inst63: // alt -> 58, 1065
	{
		idx := i*389 + 22
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 63, 0})
	goto inst58
inst63_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst58
inst58: // rune "09AFaf" -> 62
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst62
			}
			goto inst58_fail
		}
	}
	goto inst58_fail
	goto unreachable
	goto inst58_fail
inst58_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 63:
			goto inst63_alt
		}
	}
	goto fail

	goto unreachable
	goto inst64
inst64: // string ":" -> 1065
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1065
		}
	}
	goto inst64_fail
	goto unreachable
	goto inst64_fail
inst64_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		case 6:
			goto inst6_alt
		case 7:
			goto inst7_alt
		case 13:
			goto inst13_alt
		case 14:
			goto inst14_alt
		case 15:
			goto inst15_alt
		case 21:
			goto inst21_alt
		case 22:
			goto inst22_alt
		case 23:
			goto inst23_alt
		case 29:
			goto inst29_alt
		case 30:
			goto inst30_alt
		case 31:
			goto inst31_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 39:
			goto inst39_alt
		case 45:
			goto inst45_alt
		case 46:
			goto inst46_alt
		case 47:
			goto inst47_alt
		case 53:
			goto inst53_alt
		case 54:
			goto inst54_alt
		case 55:
			goto inst55_alt
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst62
inst62: // alt -> 59, 1065
	{
		idx := i*389 + 23
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 62, 0})
	goto inst59
inst62_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst59
inst59: // rune "09AFaf" -> 61
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst61
			}
			goto inst59_fail
		}
	}
	goto inst59_fail
	goto unreachable
	goto inst59_fail
inst59_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 62:
			goto inst62_alt
		}
	}
	goto fail

	goto unreachable
	goto inst184
inst184: // alt -> 1, 66
	{
		idx := i*389 + 24
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 184, 0})
	goto inst1
inst184_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst66
	}
	goto unreachable

	goto unreachable
	goto inst66
inst66: // rune "09AFaf" -> 72
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst72
			}
			goto inst66_fail
		}
	}
	goto inst66_fail
	goto unreachable
	goto inst66_fail
inst66_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 305:
			goto inst305_alt
		}
	}
	goto fail

	goto unreachable
	goto inst72
inst72: // alt -> 67, 73
	{
		idx := i*389 + 25
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 72, 0})
	goto inst67
inst72_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst73
	}
	goto unreachable

	goto unreachable
	goto inst67
inst67: // rune "09AFaf" -> 71
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst71
			}
			goto inst67_fail
		}
	}
	goto inst67_fail
	goto unreachable
	goto inst67_fail
inst67_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 72:
			goto inst72_alt
		}
	}
	goto fail

	goto unreachable
	goto inst71
inst71: // alt -> 68, 73
	{
		idx := i*389 + 26
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 71, 0})
	goto inst68
inst71_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst73
	}
	goto unreachable

	goto unreachable
	goto inst68
inst68: // rune "09AFaf" -> 70
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst70
			}
			goto inst68_fail
		}
	}
	goto inst68_fail
	goto unreachable
	goto inst68_fail
inst68_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 71:
			goto inst71_alt
		}
	}
	goto fail

	goto unreachable
	goto inst70
inst70: // alt -> 69, 73
	{
		idx := i*389 + 27
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 70, 0})
	goto inst69
inst70_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst73
	}
	goto unreachable

	goto unreachable
	goto inst73
inst73: // string ":" -> 74
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst74
		}
	}
	goto inst73_fail
	goto unreachable
	goto inst73_fail
inst73_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		case 71:
			goto inst71_alt
		case 72:
			goto inst72_alt
		case 305:
			goto inst305_alt
		}
	}
	goto fail

	goto unreachable
	goto inst69
inst69: // rune "09AFaf" -> 73
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst73
			}
			goto inst69_fail
		}
	}
	goto inst69_fail
	goto unreachable
	goto inst69_fail
inst69_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		}
	}
	goto fail

	goto unreachable
	goto inst74
inst74: // rune "09AFaf" -> 80
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst80
			}
			goto inst74_fail
		}
	}
	goto inst74_fail
	goto unreachable
	goto inst74_fail
inst74_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		case 71:
			goto inst71_alt
		case 72:
			goto inst72_alt
		case 305:
			goto inst305_alt
		}
	}
	goto fail

	goto unreachable
	goto inst80
inst80: // alt -> 75, 81
	{
		idx := i*389 + 28
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 80, 0})
	goto inst75
inst80_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst81
	}
	goto unreachable

	goto unreachable
	goto inst75
inst75: // rune "09AFaf" -> 79
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst79
			}
			goto inst75_fail
		}
	}
	goto inst75_fail
	goto unreachable
	goto inst75_fail
inst75_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 80:
			goto inst80_alt
		}
	}
	goto fail

	goto unreachable
	goto inst79
inst79: // alt -> 76, 81
	{
		idx := i*389 + 29
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 79, 0})
	goto inst76
inst79_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst81
	}
	goto unreachable

	goto unreachable
	goto inst76
inst76: // rune "09AFaf" -> 78
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst78
			}
			goto inst76_fail
		}
	}
	goto inst76_fail
	goto unreachable
	goto inst76_fail
inst76_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 79:
			goto inst79_alt
		}
	}
	goto fail

	goto unreachable
	goto inst78
inst78: // alt -> 77, 81
	{
		idx := i*389 + 30
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 78, 0})
	goto inst77
inst78_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst81
	}
	goto unreachable

	goto unreachable
	goto inst81
inst81: // string ":" -> 82
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst82
		}
	}
	goto inst81_fail
	goto unreachable
	goto inst81_fail
inst81_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		case 71:
			goto inst71_alt
		case 72:
			goto inst72_alt
		case 78:
			goto inst78_alt
		case 79:
			goto inst79_alt
		case 80:
			goto inst80_alt
		case 305:
			goto inst305_alt
		}
	}
	goto fail

	goto unreachable
	goto inst77
inst77: // rune "09AFaf" -> 81
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst81
			}
			goto inst77_fail
		}
	}
	goto inst77_fail
	goto unreachable
	goto inst77_fail
inst77_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 78:
			goto inst78_alt
		}
	}
	goto fail

	goto unreachable
	goto inst82
inst82: // rune "09AFaf" -> 88
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst88
			}
			goto inst82_fail
		}
	}
	goto inst82_fail
	goto unreachable
	goto inst82_fail
inst82_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		case 71:
			goto inst71_alt
		case 72:
			goto inst72_alt
		case 78:
			goto inst78_alt
		case 79:
			goto inst79_alt
		case 80:
			goto inst80_alt
		case 305:
			goto inst305_alt
		}
	}
	goto fail

	goto unreachable
	goto inst88
inst88: // alt -> 83, 89
	{
		idx := i*389 + 31
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 88, 0})
	goto inst83
inst88_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst89
	}
	goto unreachable

	goto unreachable
	goto inst83
inst83: // rune "09AFaf" -> 87
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst87
			}
			goto inst83_fail
		}
	}
	goto inst83_fail
	goto unreachable
	goto inst83_fail
inst83_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 88:
			goto inst88_alt
		}
	}
	goto fail

	goto unreachable
	goto inst87
inst87: // alt -> 84, 89
	{
		idx := i*389 + 32
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 87, 0})
	goto inst84
inst87_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst89
	}
	goto unreachable

	goto unreachable
	goto inst84
inst84: // rune "09AFaf" -> 86
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst86
			}
			goto inst84_fail
		}
	}
	goto inst84_fail
	goto unreachable
	goto inst84_fail
inst84_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 87:
			goto inst87_alt
		}
	}
	goto fail

	goto unreachable
	goto inst86
inst86: // alt -> 85, 89
	{
		idx := i*389 + 33
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 86, 0})
	goto inst85
inst86_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst89
	}
	goto unreachable

	goto unreachable
	goto inst89
inst89: // string ":" -> 90
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst90
		}
	}
	goto inst89_fail
	goto unreachable
	goto inst89_fail
inst89_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		case 71:
			goto inst71_alt
		case 72:
			goto inst72_alt
		case 78:
			goto inst78_alt
		case 79:
			goto inst79_alt
		case 80:
			goto inst80_alt
		case 86:
			goto inst86_alt
		case 87:
			goto inst87_alt
		case 88:
			goto inst88_alt
		case 305:
			goto inst305_alt
		}
	}
	goto fail

	goto unreachable
	goto inst85
inst85: // rune "09AFaf" -> 89
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst89
			}
			goto inst85_fail
		}
	}
	goto inst85_fail
	goto unreachable
	goto inst85_fail
inst85_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 86:
			goto inst86_alt
		}
	}
	goto fail

	goto unreachable
	goto inst90
inst90: // rune "09AFaf" -> 96
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst96
			}
			goto inst90_fail
		}
	}
	goto inst90_fail
	goto unreachable
	goto inst90_fail
inst90_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		case 71:
			goto inst71_alt
		case 72:
			goto inst72_alt
		case 78:
			goto inst78_alt
		case 79:
			goto inst79_alt
		case 80:
			goto inst80_alt
		case 86:
			goto inst86_alt
		case 87:
			goto inst87_alt
		case 88:
			goto inst88_alt
		case 305:
			goto inst305_alt
		}
	}
	goto fail

	goto unreachable
	goto inst96
inst96: // alt -> 91, 97
	{
		idx := i*389 + 34
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 96, 0})
	goto inst91
inst96_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst97
	}
	goto unreachable

	goto unreachable
	goto inst91
inst91: // rune "09AFaf" -> 95
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst95
			}
			goto inst91_fail
		}
	}
	goto inst91_fail
	goto unreachable
	goto inst91_fail
inst91_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 96:
			goto inst96_alt
		}
	}
	goto fail

	goto unreachable
	goto inst95
inst95: // alt -> 92, 97
	{
		idx := i*389 + 35
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 95, 0})
	goto inst92
inst95_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst97
	}
	goto unreachable

	goto unreachable
	goto inst92
inst92: // rune "09AFaf" -> 94
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst94
			}
			goto inst92_fail
		}
	}
	goto inst92_fail
	goto unreachable
	goto inst92_fail
inst92_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 95:
			goto inst95_alt
		}
	}
	goto fail

	goto unreachable
	goto inst94
inst94: // alt -> 93, 97
	{
		idx := i*389 + 36
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 94, 0})
	goto inst93
inst94_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst97
	}
	goto unreachable

	goto unreachable
	goto inst97
inst97: // string ":" -> 98
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst98
		}
	}
	goto inst97_fail
	goto unreachable
	goto inst97_fail
inst97_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		case 71:
			goto inst71_alt
		case 72:
			goto inst72_alt
		case 78:
			goto inst78_alt
		case 79:
			goto inst79_alt
		case 80:
			goto inst80_alt
		case 86:
			goto inst86_alt
		case 87:
			goto inst87_alt
		case 88:
			goto inst88_alt
		case 94:
			goto inst94_alt
		case 95:
			goto inst95_alt
		case 96:
			goto inst96_alt
		case 305:
			goto inst305_alt
		}
	}
	goto fail

	goto unreachable
	goto inst93
inst93: // rune "09AFaf" -> 97
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst97
			}
			goto inst93_fail
		}
	}
	goto inst93_fail
	goto unreachable
	goto inst93_fail
inst93_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 94:
			goto inst94_alt
		}
	}
	goto fail

	goto unreachable
	goto inst98
inst98: // rune "09AFaf" -> 104
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst104
			}
			goto inst98_fail
		}
	}
	goto inst98_fail
	goto unreachable
	goto inst98_fail
inst98_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		case 71:
			goto inst71_alt
		case 72:
			goto inst72_alt
		case 78:
			goto inst78_alt
		case 79:
			goto inst79_alt
		case 80:
			goto inst80_alt
		case 86:
			goto inst86_alt
		case 87:
			goto inst87_alt
		case 88:
			goto inst88_alt
		case 94:
			goto inst94_alt
		case 95:
			goto inst95_alt
		case 96:
			goto inst96_alt
		case 305:
			goto inst305_alt
		}
	}
	goto fail

	goto unreachable
	goto inst104
inst104: // alt -> 99, 105
	{
		idx := i*389 + 37
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 104, 0})
	goto inst99
inst104_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst105
	}
	goto unreachable

	goto unreachable
	goto inst99
inst99: // rune "09AFaf" -> 103
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst103
			}
			goto inst99_fail
		}
	}
	goto inst99_fail
	goto unreachable
	goto inst99_fail
inst99_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 104:
			goto inst104_alt
		}
	}
	goto fail

	goto unreachable
	goto inst103
inst103: // alt -> 100, 105
	{
		idx := i*389 + 38
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 103, 0})
	goto inst100
inst103_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst105
	}
	goto unreachable

	goto unreachable
	goto inst100
inst100: // rune "09AFaf" -> 102
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst102
			}
			goto inst100_fail
		}
	}
	goto inst100_fail
	goto unreachable
	goto inst100_fail
inst100_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 103:
			goto inst103_alt
		}
	}
	goto fail

	goto unreachable
	goto inst102
inst102: // alt -> 101, 105
	{
		idx := i*389 + 39
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 102, 0})
	goto inst101
inst102_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst105
	}
	goto unreachable

	goto unreachable
	goto inst105
inst105: // string ":" -> 106
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst106
		}
	}
	goto inst105_fail
	goto unreachable
	goto inst105_fail
inst105_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		case 71:
			goto inst71_alt
		case 72:
			goto inst72_alt
		case 78:
			goto inst78_alt
		case 79:
			goto inst79_alt
		case 80:
			goto inst80_alt
		case 86:
			goto inst86_alt
		case 87:
			goto inst87_alt
		case 88:
			goto inst88_alt
		case 94:
			goto inst94_alt
		case 95:
			goto inst95_alt
		case 96:
			goto inst96_alt
		case 102:
			goto inst102_alt
		case 103:
			goto inst103_alt
		case 104:
			goto inst104_alt
		case 305:
			goto inst305_alt
		}
	}
	goto fail

	goto unreachable
	goto inst101
inst101: // rune "09AFaf" -> 105
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst105
			}
			goto inst101_fail
		}
	}
	goto inst101_fail
	goto unreachable
	goto inst101_fail
inst101_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 102:
			goto inst102_alt
		}
	}
	goto fail

	goto unreachable
	goto inst106
inst106: // rune "09AFaf" -> 112
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst112
			}
			goto inst106_fail
		}
	}
	goto inst106_fail
	goto unreachable
	goto inst106_fail
inst106_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		case 71:
			goto inst71_alt
		case 72:
			goto inst72_alt
		case 78:
			goto inst78_alt
		case 79:
			goto inst79_alt
		case 80:
			goto inst80_alt
		case 86:
			goto inst86_alt
		case 87:
			goto inst87_alt
		case 88:
			goto inst88_alt
		case 94:
			goto inst94_alt
		case 95:
			goto inst95_alt
		case 96:
			goto inst96_alt
		case 102:
			goto inst102_alt
		case 103:
			goto inst103_alt
		case 104:
			goto inst104_alt
		case 305:
			goto inst305_alt
		}
	}
	goto fail

	goto unreachable
	goto inst112
inst112: // alt -> 107, 113
	{
		idx := i*389 + 40
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 112, 0})
	goto inst107
inst112_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst113
	}
	goto unreachable

	goto unreachable
	goto inst107
inst107: // rune "09AFaf" -> 111
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst111
			}
			goto inst107_fail
		}
	}
	goto inst107_fail
	goto unreachable
	goto inst107_fail
inst107_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 112:
			goto inst112_alt
		}
	}
	goto fail

	goto unreachable
	goto inst111
inst111: // alt -> 108, 113
	{
		idx := i*389 + 41
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 111, 0})
	goto inst108
inst111_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst113
	}
	goto unreachable

	goto unreachable
	goto inst108
inst108: // rune "09AFaf" -> 110
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst110
			}
			goto inst108_fail
		}
	}
	goto inst108_fail
	goto unreachable
	goto inst108_fail
inst108_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 111:
			goto inst111_alt
		}
	}
	goto fail

	goto unreachable
	goto inst110
inst110: // alt -> 109, 113
	{
		idx := i*389 + 42
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 110, 0})
	goto inst109
inst110_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst113
	}
	goto unreachable

	goto unreachable
	goto inst113
inst113: // string ":" -> 183
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst183
		}
	}
	goto inst113_fail
	goto unreachable
	goto inst113_fail
inst113_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		case 71:
			goto inst71_alt
		case 72:
			goto inst72_alt
		case 78:
			goto inst78_alt
		case 79:
			goto inst79_alt
		case 80:
			goto inst80_alt
		case 86:
			goto inst86_alt
		case 87:
			goto inst87_alt
		case 88:
			goto inst88_alt
		case 94:
			goto inst94_alt
		case 95:
			goto inst95_alt
		case 96:
			goto inst96_alt
		case 102:
			goto inst102_alt
		case 103:
			goto inst103_alt
		case 104:
			goto inst104_alt
		case 110:
			goto inst110_alt
		case 111:
			goto inst111_alt
		case 112:
			goto inst112_alt
		case 305:
			goto inst305_alt
		}
	}
	goto fail

	goto unreachable
	goto inst109
inst109: // rune "09AFaf" -> 113
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst113
			}
			goto inst109_fail
		}
	}
	goto inst109_fail
	goto unreachable
	goto inst109_fail
inst109_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 110:
			goto inst110_alt
		}
	}
	goto fail

	goto unreachable
	goto inst114
inst114: // string ":" -> 115
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst115
		}
	}
	goto inst114_fail
	goto unreachable
	goto inst114_fail
inst114_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 181:
			goto inst181_alt
		}
	}
	goto fail

	goto unreachable
	goto inst115
inst115: // rune "09AFaf" -> 121
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst121
			}
			goto inst115_fail
		}
	}
	goto inst115_fail
	goto unreachable
	goto inst115_fail
inst115_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 181:
			goto inst181_alt
		}
	}
	goto fail

	goto unreachable
	goto inst181
inst181: // alt -> 114, 135
	{
		idx := i*389 + 43
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 181, 0})
	goto inst114
inst181_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst135
	}
	goto unreachable

	goto unreachable
	goto inst183
inst183: // alt -> 181, 182
	{
		idx := i*389 + 44
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 183, 0})
	goto inst181
inst183_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst182
	}
	goto unreachable

	goto unreachable
	goto inst182
inst182: // string ":" -> 1065
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1065
		}
	}
	goto inst182_fail
	goto unreachable
	goto inst182_fail
inst182_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 70:
			goto inst70_alt
		case 71:
			goto inst71_alt
		case 72:
			goto inst72_alt
		case 78:
			goto inst78_alt
		case 79:
			goto inst79_alt
		case 80:
			goto inst80_alt
		case 86:
			goto inst86_alt
		case 87:
			goto inst87_alt
		case 88:
			goto inst88_alt
		case 94:
			goto inst94_alt
		case 95:
			goto inst95_alt
		case 96:
			goto inst96_alt
		case 102:
			goto inst102_alt
		case 103:
			goto inst103_alt
		case 104:
			goto inst104_alt
		case 110:
			goto inst110_alt
		case 111:
			goto inst111_alt
		case 112:
			goto inst112_alt
		case 305:
			goto inst305_alt
		}
	}
	goto fail

	goto unreachable
	goto inst121
inst121: // alt -> 116, 1065
	{
		idx := i*389 + 45
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 121, 0})
	goto inst116
inst121_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst116
inst116: // rune "09AFaf" -> 120
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst120
			}
			goto inst116_fail
		}
	}
	goto inst116_fail
	goto unreachable
	goto inst116_fail
inst116_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		}
	}
	goto fail

	goto unreachable
	goto inst120
inst120: // alt -> 117, 1065
	{
		idx := i*389 + 46
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 120, 0})
	goto inst117
inst120_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst135
inst135: // alt -> 131, 133
	{
		idx := i*389 + 47
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 135, 0})
	goto inst131
inst135_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst133
	}
	goto unreachable

	goto unreachable
	goto inst123
inst123: // string "5" -> 124
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst124
		}
	}
	goto inst123_fail
	goto unreachable
	goto inst123_fail
inst123_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst124
inst124: // rune "05" -> 136
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst136
		}
	}
	goto inst124_fail
	goto unreachable
	goto inst124_fail
inst124_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 127:
			goto inst127_alt
		}
	}
	goto fail

	goto unreachable
	goto inst127
inst127: // alt -> 123, 125
	{
		idx := i*389 + 48
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 127, 0})
	goto inst123
inst127_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst125
	}
	goto unreachable

	goto unreachable
	goto inst125
inst125: // rune "04" -> 126
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst126
		}
	}
	goto inst125_fail
	goto unreachable
	goto inst125_fail
inst125_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 131:
			goto inst131_alt
		}
	}
	goto fail

	goto unreachable
	goto inst122
inst122: // string "2" -> 127
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst127
		}
	}
	goto inst122_fail
	goto unreachable
	goto inst122_fail
inst122_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 131:
			goto inst131_alt
		}
	}
	goto fail

	goto unreachable
	goto inst131
inst131: // alt -> 122, 128
	{
		idx := i*389 + 49
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 131, 0})
	goto inst122
inst131_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst128
	}
	goto unreachable

	goto unreachable
	goto inst126
inst126: // rune "09" -> 136
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst136
		}
	}
	goto inst126_fail
	goto unreachable
	goto inst126_fail
inst126_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 131:
			goto inst131_alt
		}
	}
	goto fail

	goto unreachable
	goto inst128
inst128: // string "1" -> 129
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst129
		}
	}
	goto inst128_fail
	goto unreachable
	goto inst128_fail
inst128_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 135:
			goto inst135_alt
		}
	}
	goto fail

	goto unreachable
	goto inst129
inst129: // rune "09" -> 130
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst130
		}
	}
	goto inst129_fail
	goto unreachable
	goto inst129_fail
inst129_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 135:
			goto inst135_alt
		}
	}
	goto fail

	goto unreachable
	goto inst130
inst130: // rune "09" -> 136
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst136
		}
	}
	goto inst130_fail
	goto unreachable
	goto inst130_fail
inst130_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 135:
			goto inst135_alt
		}
	}
	goto fail

	goto unreachable
	goto inst136
inst136: // string "." -> 150
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst150
		}
	}
	goto inst136_fail
	goto unreachable
	goto inst136_fail
inst136_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 127:
			goto inst127_alt
		case 131:
			goto inst131_alt
		case 133:
			goto inst133_alt
		case 135:
			goto inst135_alt
		case 183:
			goto inst183_alt
		}
	}
	goto fail

	goto unreachable
	goto inst133
inst133: // alt -> 132, 134
	{
		idx := i*389 + 50
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 133, 0})
	goto inst132
inst133_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst134
	}
	goto unreachable

	goto unreachable
	goto inst134
inst134: // rune "09" -> 136
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst136
		}
	}
	goto inst134_fail
	goto unreachable
	goto inst134_fail
inst134_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 133:
			goto inst133_alt
		case 183:
			goto inst183_alt
		}
	}
	goto fail

	goto unreachable
	goto inst132
inst132: // rune "19" -> 134
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst134
		}
	}
	goto inst132_fail
	goto unreachable
	goto inst132_fail
inst132_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 133:
			goto inst133_alt
		}
	}
	goto fail

	goto unreachable
	goto inst117
inst117: // rune "09AFaf" -> 119
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst119
			}
			goto inst117_fail
		}
	}
	goto inst117_fail
	goto unreachable
	goto inst117_fail
inst117_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 120:
			goto inst120_alt
		}
	}
	goto fail

	goto unreachable
	goto inst137
inst137: // string "2" -> 142
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst142
		}
	}
	goto inst137_fail
	goto unreachable
	goto inst137_fail
inst137_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 146:
			goto inst146_alt
		}
	}
	goto fail

	goto unreachable
	goto inst142
inst142: // alt -> 138, 140
	{
		idx := i*389 + 51
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 142, 0})
	goto inst138
inst142_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst140
	}
	goto unreachable

	goto unreachable
	goto inst138
inst138: // string "5" -> 139
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst139
		}
	}
	goto inst138_fail
	goto unreachable
	goto inst138_fail
inst138_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 142:
			goto inst142_alt
		}
	}
	goto fail

	goto unreachable
	goto inst140
inst140: // rune "04" -> 141
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst141
		}
	}
	goto inst140_fail
	goto unreachable
	goto inst140_fail
inst140_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 146:
			goto inst146_alt
		}
	}
	goto fail

	goto unreachable
	goto inst150
inst150: // alt -> 146, 148
	{
		idx := i*389 + 52
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 150, 0})
	goto inst146
inst150_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst148
	}
	goto unreachable

	goto unreachable
	goto inst146
inst146: // alt -> 137, 143
	{
		idx := i*389 + 53
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 146, 0})
	goto inst137
inst146_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst143
	}
	goto unreachable

	goto unreachable
	goto inst139
inst139: // rune "05" -> 151
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst151
		}
	}
	goto inst139_fail
	goto unreachable
	goto inst139_fail
inst139_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 142:
			goto inst142_alt
		}
	}
	goto fail

	goto unreachable
	goto inst143
inst143: // string "1" -> 144
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst144
		}
	}
	goto inst143_fail
	goto unreachable
	goto inst143_fail
inst143_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 150:
			goto inst150_alt
		}
	}
	goto fail

	goto unreachable
	goto inst144
inst144: // rune "09" -> 145
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst145
		}
	}
	goto inst144_fail
	goto unreachable
	goto inst144_fail
inst144_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 150:
			goto inst150_alt
		}
	}
	goto fail

	goto unreachable
	goto inst148
inst148: // alt -> 147, 149
	{
		idx := i*389 + 54
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 148, 0})
	goto inst147
inst148_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst149
	}
	goto unreachable

	goto unreachable
	goto inst147
inst147: // rune "19" -> 149
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst149
		}
	}
	goto inst147_fail
	goto unreachable
	goto inst147_fail
inst147_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 148:
			goto inst148_alt
		}
	}
	goto fail

	goto unreachable
	goto inst149
inst149: // rune "09" -> 151
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst151
		}
	}
	goto inst149_fail
	goto unreachable
	goto inst149_fail
inst149_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 127:
			goto inst127_alt
		case 131:
			goto inst131_alt
		case 133:
			goto inst133_alt
		case 135:
			goto inst135_alt
		case 148:
			goto inst148_alt
		case 183:
			goto inst183_alt
		}
	}
	goto fail

	goto unreachable
	goto inst145
inst145: // rune "09" -> 151
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst151
		}
	}
	goto inst145_fail
	goto unreachable
	goto inst145_fail
inst145_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 150:
			goto inst150_alt
		}
	}
	goto fail

	goto unreachable
	goto inst151
inst151: // string "." -> 165
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst165
		}
	}
	goto inst151_fail
	goto unreachable
	goto inst151_fail
inst151_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 127:
			goto inst127_alt
		case 131:
			goto inst131_alt
		case 133:
			goto inst133_alt
		case 135:
			goto inst135_alt
		case 142:
			goto inst142_alt
		case 146:
			goto inst146_alt
		case 148:
			goto inst148_alt
		case 150:
			goto inst150_alt
		case 183:
			goto inst183_alt
		}
	}
	goto fail

	goto unreachable
	goto inst141
inst141: // rune "09" -> 151
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst151
		}
	}
	goto inst141_fail
	goto unreachable
	goto inst141_fail
inst141_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 146:
			goto inst146_alt
		}
	}
	goto fail

	goto unreachable
	goto inst152
inst152: // string "2" -> 157
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst157
		}
	}
	goto inst152_fail
	goto unreachable
	goto inst152_fail
inst152_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 161:
			goto inst161_alt
		}
	}
	goto fail

	goto unreachable
	goto inst157
inst157: // alt -> 153, 155
	{
		idx := i*389 + 55
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 157, 0})
	goto inst153
inst157_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst155
	}
	goto unreachable

	goto unreachable
	goto inst153
inst153: // string "5" -> 154
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst154
		}
	}
	goto inst153_fail
	goto unreachable
	goto inst153_fail
inst153_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 157:
			goto inst157_alt
		}
	}
	goto fail

	goto unreachable
	goto inst155
inst155: // rune "04" -> 156
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst156
		}
	}
	goto inst155_fail
	goto unreachable
	goto inst155_fail
inst155_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 161:
			goto inst161_alt
		}
	}
	goto fail

	goto unreachable
	goto inst165
inst165: // alt -> 161, 163
	{
		idx := i*389 + 56
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 165, 0})
	goto inst161
inst165_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst163
	}
	goto unreachable

	goto unreachable
	goto inst161
inst161: // alt -> 152, 158
	{
		idx := i*389 + 57
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 161, 0})
	goto inst152
inst161_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst158
	}
	goto unreachable

	goto unreachable
	goto inst154
inst154: // rune "05" -> 166
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst166
		}
	}
	goto inst154_fail
	goto unreachable
	goto inst154_fail
inst154_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 157:
			goto inst157_alt
		}
	}
	goto fail

	goto unreachable
	goto inst158
inst158: // string "1" -> 159
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst159
		}
	}
	goto inst158_fail
	goto unreachable
	goto inst158_fail
inst158_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 165:
			goto inst165_alt
		}
	}
	goto fail

	goto unreachable
	goto inst159
inst159: // rune "09" -> 160
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst160
		}
	}
	goto inst159_fail
	goto unreachable
	goto inst159_fail
inst159_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 165:
			goto inst165_alt
		}
	}
	goto fail

	goto unreachable
	goto inst163
inst163: // alt -> 162, 164
	{
		idx := i*389 + 58
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 163, 0})
	goto inst162
inst163_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst164
	}
	goto unreachable

	goto unreachable
	goto inst162
inst162: // rune "19" -> 164
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst164
		}
	}
	goto inst162_fail
	goto unreachable
	goto inst162_fail
inst162_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 163:
			goto inst163_alt
		}
	}
	goto fail

	goto unreachable
	goto inst164
inst164: // rune "09" -> 166
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst166
		}
	}
	goto inst164_fail
	goto unreachable
	goto inst164_fail
inst164_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 127:
			goto inst127_alt
		case 131:
			goto inst131_alt
		case 133:
			goto inst133_alt
		case 135:
			goto inst135_alt
		case 142:
			goto inst142_alt
		case 146:
			goto inst146_alt
		case 148:
			goto inst148_alt
		case 150:
			goto inst150_alt
		case 163:
			goto inst163_alt
		case 183:
			goto inst183_alt
		}
	}
	goto fail

	goto unreachable
	goto inst160
inst160: // rune "09" -> 166
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst166
		}
	}
	goto inst160_fail
	goto unreachable
	goto inst160_fail
inst160_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 165:
			goto inst165_alt
		}
	}
	goto fail

	goto unreachable
	goto inst166
inst166: // string "." -> 180
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst180
		}
	}
	goto inst166_fail
	goto unreachable
	goto inst166_fail
inst166_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 127:
			goto inst127_alt
		case 131:
			goto inst131_alt
		case 133:
			goto inst133_alt
		case 135:
			goto inst135_alt
		case 142:
			goto inst142_alt
		case 146:
			goto inst146_alt
		case 148:
			goto inst148_alt
		case 150:
			goto inst150_alt
		case 157:
			goto inst157_alt
		case 161:
			goto inst161_alt
		case 163:
			goto inst163_alt
		case 165:
			goto inst165_alt
		case 183:
			goto inst183_alt
		}
	}
	goto fail

	goto unreachable
	goto inst156
inst156: // rune "09" -> 166
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst166
		}
	}
	goto inst156_fail
	goto unreachable
	goto inst156_fail
inst156_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 161:
			goto inst161_alt
		}
	}
	goto fail

	goto unreachable
	goto inst180
inst180: // alt -> 176, 178
	{
		idx := i*389 + 59
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 180, 0})
	goto inst176
inst180_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst178
	}
	goto unreachable

	goto unreachable
	goto inst176
inst176: // alt -> 167, 173
	{
		idx := i*389 + 60
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 176, 0})
	goto inst167
inst176_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst173
	}
	goto unreachable

	goto unreachable
	goto inst167
inst167: // string "2" -> 172
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst172
		}
	}
	goto inst167_fail
	goto unreachable
	goto inst167_fail
inst167_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 176:
			goto inst176_alt
		}
	}
	goto fail

	goto unreachable
	goto inst173
inst173: // string "1" -> 174
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst174
		}
	}
	goto inst173_fail
	goto unreachable
	goto inst173_fail
inst173_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 180:
			goto inst180_alt
		}
	}
	goto fail

	goto unreachable
	goto inst174
inst174: // rune "09" -> 175
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst175
		}
	}
	goto inst174_fail
	goto unreachable
	goto inst174_fail
inst174_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 180:
			goto inst180_alt
		}
	}
	goto fail

	goto unreachable
	goto inst175
inst175: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst175_fail
	goto unreachable
	goto inst175_fail
inst175_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 180:
			goto inst180_alt
		}
	}
	goto fail

	goto unreachable
	goto inst178
inst178: // alt -> 177, 179
	{
		idx := i*389 + 61
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 178, 0})
	goto inst177
inst178_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst179
	}
	goto unreachable

	goto unreachable
	goto inst177
inst177: // rune "19" -> 179
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst179
		}
	}
	goto inst177_fail
	goto unreachable
	goto inst177_fail
inst177_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		}
	}
	goto fail

	goto unreachable
	goto inst179
inst179: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst179_fail
	goto unreachable
	goto inst179_fail
inst179_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 127:
			goto inst127_alt
		case 131:
			goto inst131_alt
		case 133:
			goto inst133_alt
		case 135:
			goto inst135_alt
		case 142:
			goto inst142_alt
		case 146:
			goto inst146_alt
		case 148:
			goto inst148_alt
		case 150:
			goto inst150_alt
		case 157:
			goto inst157_alt
		case 161:
			goto inst161_alt
		case 163:
			goto inst163_alt
		case 165:
			goto inst165_alt
		case 178:
			goto inst178_alt
		case 183:
			goto inst183_alt
		}
	}
	goto fail

	goto unreachable
	goto inst305
inst305: // alt -> 184, 185
	{
		idx := i*389 + 62
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 305, 0})
	goto inst184
inst305_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst185
	}
	goto unreachable

	goto unreachable
	goto inst185
inst185: // rune "09AFaf" -> 191
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst191
			}
			goto inst185_fail
		}
	}
	goto inst185_fail
	goto unreachable
	goto inst185_fail
inst185_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 436:
			goto inst436_alt
		}
	}
	goto fail

	goto unreachable
	goto inst172
inst172: // alt -> 168, 170
	{
		idx := i*389 + 63
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 172, 0})
	goto inst168
inst172_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst170
	}
	goto unreachable

	goto unreachable
	goto inst170
inst170: // rune "04" -> 171
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst171
		}
	}
	goto inst170_fail
	goto unreachable
	goto inst170_fail
inst170_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 176:
			goto inst176_alt
		}
	}
	goto fail

	goto unreachable
	goto inst171
inst171: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst171_fail
	goto unreachable
	goto inst171_fail
inst171_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 176:
			goto inst176_alt
		}
	}
	goto fail

	goto unreachable
	goto inst168
inst168: // string "5" -> 169
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst169
		}
	}
	goto inst168_fail
	goto unreachable
	goto inst168_fail
inst168_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 172:
			goto inst172_alt
		}
	}
	goto fail

	goto unreachable
	goto inst191
inst191: // alt -> 186, 192
	{
		idx := i*389 + 64
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 191, 0})
	goto inst186
inst191_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst192
	}
	goto unreachable

	goto unreachable
	goto inst186
inst186: // rune "09AFaf" -> 190
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst190
			}
			goto inst186_fail
		}
	}
	goto inst186_fail
	goto unreachable
	goto inst186_fail
inst186_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 191:
			goto inst191_alt
		}
	}
	goto fail

	goto unreachable
	goto inst190
inst190: // alt -> 187, 192
	{
		idx := i*389 + 65
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 190, 0})
	goto inst187
inst190_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst192
	}
	goto unreachable

	goto unreachable
	goto inst187
inst187: // rune "09AFaf" -> 189
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst189
			}
			goto inst187_fail
		}
	}
	goto inst187_fail
	goto unreachable
	goto inst187_fail
inst187_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 190:
			goto inst190_alt
		}
	}
	goto fail

	goto unreachable
	goto inst192
inst192: // string ":" -> 193
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst193
		}
	}
	goto inst192_fail
	goto unreachable
	goto inst192_fail
inst192_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 189:
			goto inst189_alt
		case 190:
			goto inst190_alt
		case 191:
			goto inst191_alt
		case 436:
			goto inst436_alt
		}
	}
	goto fail

	goto unreachable
	goto inst189
inst189: // alt -> 188, 192
	{
		idx := i*389 + 66
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 189, 0})
	goto inst188
inst189_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst192
	}
	goto unreachable

	goto unreachable
	goto inst188
inst188: // rune "09AFaf" -> 192
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst192
			}
			goto inst188_fail
		}
	}
	goto inst188_fail
	goto unreachable
	goto inst188_fail
inst188_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 189:
			goto inst189_alt
		}
	}
	goto fail

	goto unreachable
	goto inst193
inst193: // rune "09AFaf" -> 199
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst199
			}
			goto inst193_fail
		}
	}
	goto inst193_fail
	goto unreachable
	goto inst193_fail
inst193_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 189:
			goto inst189_alt
		case 190:
			goto inst190_alt
		case 191:
			goto inst191_alt
		case 436:
			goto inst436_alt
		}
	}
	goto fail

	goto unreachable
	goto inst199
inst199: // alt -> 194, 200
	{
		idx := i*389 + 67
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 199, 0})
	goto inst194
inst199_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst200
	}
	goto unreachable

	goto unreachable
	goto inst194
inst194: // rune "09AFaf" -> 198
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst198
			}
			goto inst194_fail
		}
	}
	goto inst194_fail
	goto unreachable
	goto inst194_fail
inst194_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 199:
			goto inst199_alt
		}
	}
	goto fail

	goto unreachable
	goto inst198
inst198: // alt -> 195, 200
	{
		idx := i*389 + 68
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 198, 0})
	goto inst195
inst198_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst200
	}
	goto unreachable

	goto unreachable
	goto inst195
inst195: // rune "09AFaf" -> 197
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst197
			}
			goto inst195_fail
		}
	}
	goto inst195_fail
	goto unreachable
	goto inst195_fail
inst195_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 198:
			goto inst198_alt
		}
	}
	goto fail

	goto unreachable
	goto inst200
inst200: // string ":" -> 201
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst201
		}
	}
	goto inst200_fail
	goto unreachable
	goto inst200_fail
inst200_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 189:
			goto inst189_alt
		case 190:
			goto inst190_alt
		case 191:
			goto inst191_alt
		case 197:
			goto inst197_alt
		case 198:
			goto inst198_alt
		case 199:
			goto inst199_alt
		case 436:
			goto inst436_alt
		}
	}
	goto fail

	goto unreachable
	goto inst197
inst197: // alt -> 196, 200
	{
		idx := i*389 + 69
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 197, 0})
	goto inst196
inst197_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst200
	}
	goto unreachable

	goto unreachable
	goto inst196
inst196: // rune "09AFaf" -> 200
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst200
			}
			goto inst196_fail
		}
	}
	goto inst196_fail
	goto unreachable
	goto inst196_fail
inst196_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 197:
			goto inst197_alt
		}
	}
	goto fail

	goto unreachable
	goto inst201
inst201: // rune "09AFaf" -> 207
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst207
			}
			goto inst201_fail
		}
	}
	goto inst201_fail
	goto unreachable
	goto inst201_fail
inst201_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 189:
			goto inst189_alt
		case 190:
			goto inst190_alt
		case 191:
			goto inst191_alt
		case 197:
			goto inst197_alt
		case 198:
			goto inst198_alt
		case 199:
			goto inst199_alt
		case 436:
			goto inst436_alt
		}
	}
	goto fail

	goto unreachable
	goto inst169
inst169: // rune "05" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1065
		}
	}
	goto inst169_fail
	goto unreachable
	goto inst169_fail
inst169_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 172:
			goto inst172_alt
		}
	}
	goto fail

	goto unreachable
	goto inst207
inst207: // alt -> 202, 208
	{
		idx := i*389 + 70
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 207, 0})
	goto inst202
inst207_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst208
	}
	goto unreachable

	goto unreachable
	goto inst202
inst202: // rune "09AFaf" -> 206
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst206
			}
			goto inst202_fail
		}
	}
	goto inst202_fail
	goto unreachable
	goto inst202_fail
inst202_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 207:
			goto inst207_alt
		}
	}
	goto fail

	goto unreachable
	goto inst206
inst206: // alt -> 203, 208
	{
		idx := i*389 + 71
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 206, 0})
	goto inst203
inst206_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst208
	}
	goto unreachable

	goto unreachable
	goto inst203
inst203: // rune "09AFaf" -> 205
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst205
			}
			goto inst203_fail
		}
	}
	goto inst203_fail
	goto unreachable
	goto inst203_fail
inst203_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 206:
			goto inst206_alt
		}
	}
	goto fail

	goto unreachable
	goto inst205
inst205: // alt -> 204, 208
	{
		idx := i*389 + 72
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 205, 0})
	goto inst204
inst205_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst208
	}
	goto unreachable

	goto unreachable
	goto inst208
inst208: // string ":" -> 209
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst209
		}
	}
	goto inst208_fail
	goto unreachable
	goto inst208_fail
inst208_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 189:
			goto inst189_alt
		case 190:
			goto inst190_alt
		case 191:
			goto inst191_alt
		case 197:
			goto inst197_alt
		case 198:
			goto inst198_alt
		case 199:
			goto inst199_alt
		case 205:
			goto inst205_alt
		case 206:
			goto inst206_alt
		case 207:
			goto inst207_alt
		case 436:
			goto inst436_alt
		}
	}
	goto fail

	goto unreachable
	goto inst204
inst204: // rune "09AFaf" -> 208
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst208
			}
			goto inst204_fail
		}
	}
	goto inst204_fail
	goto unreachable
	goto inst204_fail
inst204_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 205:
			goto inst205_alt
		}
	}
	goto fail

	goto unreachable
	goto inst209
inst209: // rune "09AFaf" -> 215
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst215
			}
			goto inst209_fail
		}
	}
	goto inst209_fail
	goto unreachable
	goto inst209_fail
inst209_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 189:
			goto inst189_alt
		case 190:
			goto inst190_alt
		case 191:
			goto inst191_alt
		case 197:
			goto inst197_alt
		case 198:
			goto inst198_alt
		case 199:
			goto inst199_alt
		case 205:
			goto inst205_alt
		case 206:
			goto inst206_alt
		case 207:
			goto inst207_alt
		case 436:
			goto inst436_alt
		}
	}
	goto fail

	goto unreachable
	goto inst215
inst215: // alt -> 210, 216
	{
		idx := i*389 + 73
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 215, 0})
	goto inst210
inst215_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst216
	}
	goto unreachable

	goto unreachable
	goto inst210
inst210: // rune "09AFaf" -> 214
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst214
			}
			goto inst210_fail
		}
	}
	goto inst210_fail
	goto unreachable
	goto inst210_fail
inst210_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 215:
			goto inst215_alt
		}
	}
	goto fail

	goto unreachable
	goto inst214
inst214: // alt -> 211, 216
	{
		idx := i*389 + 74
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 214, 0})
	goto inst211
inst214_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst216
	}
	goto unreachable

	goto unreachable
	goto inst211
inst211: // rune "09AFaf" -> 213
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst213
			}
			goto inst211_fail
		}
	}
	goto inst211_fail
	goto unreachable
	goto inst211_fail
inst211_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 214:
			goto inst214_alt
		}
	}
	goto fail

	goto unreachable
	goto inst213
inst213: // alt -> 212, 216
	{
		idx := i*389 + 75
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 213, 0})
	goto inst212
inst213_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst216
	}
	goto unreachable

	goto unreachable
	goto inst216
inst216: // string ":" -> 217
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst217
		}
	}
	goto inst216_fail
	goto unreachable
	goto inst216_fail
inst216_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 189:
			goto inst189_alt
		case 190:
			goto inst190_alt
		case 191:
			goto inst191_alt
		case 197:
			goto inst197_alt
		case 198:
			goto inst198_alt
		case 199:
			goto inst199_alt
		case 205:
			goto inst205_alt
		case 206:
			goto inst206_alt
		case 207:
			goto inst207_alt
		case 213:
			goto inst213_alt
		case 214:
			goto inst214_alt
		case 215:
			goto inst215_alt
		case 436:
			goto inst436_alt
		}
	}
	goto fail

	goto unreachable
	goto inst212
inst212: // rune "09AFaf" -> 216
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst216
			}
			goto inst212_fail
		}
	}
	goto inst212_fail
	goto unreachable
	goto inst212_fail
inst212_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 213:
			goto inst213_alt
		}
	}
	goto fail

	goto unreachable
	goto inst217
inst217: // rune "09AFaf" -> 223
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst223
			}
			goto inst217_fail
		}
	}
	goto inst217_fail
	goto unreachable
	goto inst217_fail
inst217_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 189:
			goto inst189_alt
		case 190:
			goto inst190_alt
		case 191:
			goto inst191_alt
		case 197:
			goto inst197_alt
		case 198:
			goto inst198_alt
		case 199:
			goto inst199_alt
		case 205:
			goto inst205_alt
		case 206:
			goto inst206_alt
		case 207:
			goto inst207_alt
		case 213:
			goto inst213_alt
		case 214:
			goto inst214_alt
		case 215:
			goto inst215_alt
		case 436:
			goto inst436_alt
		}
	}
	goto fail

	goto unreachable
	goto inst223
inst223: // alt -> 218, 224
	{
		idx := i*389 + 76
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 223, 0})
	goto inst218
inst223_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst224
	}
	goto unreachable

	goto unreachable
	goto inst218
inst218: // rune "09AFaf" -> 222
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst222
			}
			goto inst218_fail
		}
	}
	goto inst218_fail
	goto unreachable
	goto inst218_fail
inst218_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 223:
			goto inst223_alt
		}
	}
	goto fail

	goto unreachable
	goto inst222
inst222: // alt -> 219, 224
	{
		idx := i*389 + 77
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 222, 0})
	goto inst219
inst222_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst224
	}
	goto unreachable

	goto unreachable
	goto inst219
inst219: // rune "09AFaf" -> 221
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst221
			}
			goto inst219_fail
		}
	}
	goto inst219_fail
	goto unreachable
	goto inst219_fail
inst219_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 222:
			goto inst222_alt
		}
	}
	goto fail

	goto unreachable
	goto inst221
inst221: // alt -> 220, 224
	{
		idx := i*389 + 78
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 221, 0})
	goto inst220
inst221_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst224
	}
	goto unreachable

	goto unreachable
	goto inst224
inst224: // string ":" -> 304
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst304
		}
	}
	goto inst224_fail
	goto unreachable
	goto inst224_fail
inst224_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 189:
			goto inst189_alt
		case 190:
			goto inst190_alt
		case 191:
			goto inst191_alt
		case 197:
			goto inst197_alt
		case 198:
			goto inst198_alt
		case 199:
			goto inst199_alt
		case 205:
			goto inst205_alt
		case 206:
			goto inst206_alt
		case 207:
			goto inst207_alt
		case 213:
			goto inst213_alt
		case 214:
			goto inst214_alt
		case 215:
			goto inst215_alt
		case 221:
			goto inst221_alt
		case 222:
			goto inst222_alt
		case 223:
			goto inst223_alt
		case 436:
			goto inst436_alt
		}
	}
	goto fail

	goto unreachable
	goto inst220
inst220: // rune "09AFaf" -> 224
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst224
			}
			goto inst220_fail
		}
	}
	goto inst220_fail
	goto unreachable
	goto inst220_fail
inst220_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 221:
			goto inst221_alt
		}
	}
	goto fail

	goto unreachable
	goto inst304
inst304: // alt -> 225, 242
	{
		idx := i*389 + 79
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 304, 0})
	goto inst225
inst304_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst242
	}
	goto unreachable

	goto unreachable
	goto inst225
inst225: // string ":" -> 226
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst226
		}
	}
	goto inst225_fail
	goto unreachable
	goto inst225_fail
inst225_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 304:
			goto inst304_alt
		}
	}
	goto fail

	goto unreachable
	goto inst226
inst226: // rune "09AFaf" -> 232
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst232
			}
			goto inst226_fail
		}
	}
	goto inst226_fail
	goto unreachable
	goto inst226_fail
inst226_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 304:
			goto inst304_alt
		}
	}
	goto fail

	goto unreachable
	goto inst232
inst232: // alt -> 227, 241
	{
		idx := i*389 + 80
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 232, 0})
	goto inst227
inst232_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst241
	}
	goto unreachable

	goto unreachable
	goto inst227
inst227: // rune "09AFaf" -> 231
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst231
			}
			goto inst227_fail
		}
	}
	goto inst227_fail
	goto unreachable
	goto inst227_fail
inst227_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 232:
			goto inst232_alt
		}
	}
	goto fail

	goto unreachable
	goto inst231
inst231: // alt -> 228, 241
	{
		idx := i*389 + 81
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 231, 0})
	goto inst228
inst231_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst241
	}
	goto unreachable

	goto unreachable
	goto inst228
inst228: // rune "09AFaf" -> 230
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst230
			}
			goto inst228_fail
		}
	}
	goto inst228_fail
	goto unreachable
	goto inst228_fail
inst228_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 231:
			goto inst231_alt
		}
	}
	goto fail

	goto unreachable
	goto inst233
inst233: // string ":" -> 234
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst234
		}
	}
	goto inst233_fail
	goto unreachable
	goto inst233_fail
inst233_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 241:
			goto inst241_alt
		}
	}
	goto fail

	goto unreachable
	goto inst234
inst234: // rune "09AFaf" -> 240
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst240
			}
			goto inst234_fail
		}
	}
	goto inst234_fail
	goto unreachable
	goto inst234_fail
inst234_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 241:
			goto inst241_alt
		}
	}
	goto fail

	goto unreachable
	goto inst241
inst241: // alt -> 233, 1065
	{
		idx := i*389 + 82
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 241, 0})
	goto inst233
inst241_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst230
inst230: // alt -> 229, 241
	{
		idx := i*389 + 83
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 230, 0})
	goto inst229
inst230_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst241
	}
	goto unreachable

	goto unreachable
	goto inst229
inst229: // rune "09AFaf" -> 241
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst241
			}
			goto inst229_fail
		}
	}
	goto inst229_fail
	goto unreachable
	goto inst229_fail
inst229_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 230:
			goto inst230_alt
		}
	}
	goto fail

	goto unreachable
	goto inst240
inst240: // alt -> 235, 1065
	{
		idx := i*389 + 84
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 240, 0})
	goto inst235
inst240_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst235
inst235: // rune "09AFaf" -> 239
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst239
			}
			goto inst235_fail
		}
	}
	goto inst235_fail
	goto unreachable
	goto inst235_fail
inst235_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 240:
			goto inst240_alt
		}
	}
	goto fail

	goto unreachable
	goto inst239
inst239: // alt -> 236, 1065
	{
		idx := i*389 + 85
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 239, 0})
	goto inst236
inst239_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst236
inst236: // rune "09AFaf" -> 238
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst238
			}
			goto inst236_fail
		}
	}
	goto inst236_fail
	goto unreachable
	goto inst236_fail
inst236_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 239:
			goto inst239_alt
		}
	}
	goto fail

	goto unreachable
	goto inst242
inst242: // string ":" -> 303
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst303
		}
	}
	goto inst242_fail
	goto unreachable
	goto inst242_fail
inst242_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 189:
			goto inst189_alt
		case 190:
			goto inst190_alt
		case 191:
			goto inst191_alt
		case 197:
			goto inst197_alt
		case 198:
			goto inst198_alt
		case 199:
			goto inst199_alt
		case 205:
			goto inst205_alt
		case 206:
			goto inst206_alt
		case 207:
			goto inst207_alt
		case 213:
			goto inst213_alt
		case 214:
			goto inst214_alt
		case 215:
			goto inst215_alt
		case 221:
			goto inst221_alt
		case 222:
			goto inst222_alt
		case 223:
			goto inst223_alt
		case 436:
			goto inst436_alt
		}
	}
	goto fail

	goto unreachable
	goto inst238
inst238: // alt -> 237, 1065
	{
		idx := i*389 + 86
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 238, 0})
	goto inst237
inst238_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst237
inst237: // rune "09AFaf" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1065
			}
			goto inst237_fail
		}
	}
	goto inst237_fail
	goto unreachable
	goto inst237_fail
inst237_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 238:
			goto inst238_alt
		}
	}
	goto fail

	goto unreachable
	goto inst303
inst303: // alt -> 256, 302
	{
		idx := i*389 + 87
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 303, 0})
	goto inst256
inst303_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst302
	}
	goto unreachable

	goto unreachable
	goto inst244
inst244: // string "5" -> 245
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst245
		}
	}
	goto inst244_fail
	goto unreachable
	goto inst244_fail
inst244_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 248:
			goto inst248_alt
		}
	}
	goto fail

	goto unreachable
	goto inst245
inst245: // rune "05" -> 257
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst257
		}
	}
	goto inst245_fail
	goto unreachable
	goto inst245_fail
inst245_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 248:
			goto inst248_alt
		}
	}
	goto fail

	goto unreachable
	goto inst248
inst248: // alt -> 244, 246
	{
		idx := i*389 + 88
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 248, 0})
	goto inst244
inst248_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst246
	}
	goto unreachable

	goto unreachable
	goto inst246
inst246: // rune "04" -> 247
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst247
		}
	}
	goto inst246_fail
	goto unreachable
	goto inst246_fail
inst246_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 252:
			goto inst252_alt
		}
	}
	goto fail

	goto unreachable
	goto inst243
inst243: // string "2" -> 248
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst248
		}
	}
	goto inst243_fail
	goto unreachable
	goto inst243_fail
inst243_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 252:
			goto inst252_alt
		}
	}
	goto fail

	goto unreachable
	goto inst252
inst252: // alt -> 243, 249
	{
		idx := i*389 + 89
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 252, 0})
	goto inst243
inst252_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst249
	}
	goto unreachable

	goto unreachable
	goto inst256
inst256: // alt -> 252, 254
	{
		idx := i*389 + 90
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 256, 0})
	goto inst252
inst256_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst254
	}
	goto unreachable

	goto unreachable
	goto inst249
inst249: // string "1" -> 250
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst250
		}
	}
	goto inst249_fail
	goto unreachable
	goto inst249_fail
inst249_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 256:
			goto inst256_alt
		}
	}
	goto fail

	goto unreachable
	goto inst250
inst250: // rune "09" -> 251
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst251
		}
	}
	goto inst250_fail
	goto unreachable
	goto inst250_fail
inst250_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 256:
			goto inst256_alt
		}
	}
	goto fail

	goto unreachable
	goto inst251
inst251: // rune "09" -> 257
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst257
		}
	}
	goto inst251_fail
	goto unreachable
	goto inst251_fail
inst251_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 256:
			goto inst256_alt
		}
	}
	goto fail

	goto unreachable
	goto inst254
inst254: // alt -> 253, 255
	{
		idx := i*389 + 91
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 254, 0})
	goto inst253
inst254_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst255
	}
	goto unreachable

	goto unreachable
	goto inst253
inst253: // rune "19" -> 255
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst255
		}
	}
	goto inst253_fail
	goto unreachable
	goto inst253_fail
inst253_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 254:
			goto inst254_alt
		}
	}
	goto fail

	goto unreachable
	goto inst255
inst255: // rune "09" -> 257
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst257
		}
	}
	goto inst255_fail
	goto unreachable
	goto inst255_fail
inst255_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 254:
			goto inst254_alt
		case 303:
			goto inst303_alt
		}
	}
	goto fail

	goto unreachable
	goto inst257
inst257: // string "." -> 271
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst271
		}
	}
	goto inst257_fail
	goto unreachable
	goto inst257_fail
inst257_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 248:
			goto inst248_alt
		case 252:
			goto inst252_alt
		case 254:
			goto inst254_alt
		case 256:
			goto inst256_alt
		case 303:
			goto inst303_alt
		}
	}
	goto fail

	goto unreachable
	goto inst247
inst247: // rune "09" -> 257
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst257
		}
	}
	goto inst247_fail
	goto unreachable
	goto inst247_fail
inst247_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 252:
			goto inst252_alt
		}
	}
	goto fail

	goto unreachable
	goto inst258
inst258: // string "2" -> 263
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst263
		}
	}
	goto inst258_fail
	goto unreachable
	goto inst258_fail
inst258_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 267:
			goto inst267_alt
		}
	}
	goto fail

	goto unreachable
	goto inst263
inst263: // alt -> 259, 261
	{
		idx := i*389 + 92
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 263, 0})
	goto inst259
inst263_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst261
	}
	goto unreachable

	goto unreachable
	goto inst259
inst259: // string "5" -> 260
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst260
		}
	}
	goto inst259_fail
	goto unreachable
	goto inst259_fail
inst259_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 263:
			goto inst263_alt
		}
	}
	goto fail

	goto unreachable
	goto inst260
inst260: // rune "05" -> 272
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst272
		}
	}
	goto inst260_fail
	goto unreachable
	goto inst260_fail
inst260_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 263:
			goto inst263_alt
		}
	}
	goto fail

	goto unreachable
	goto inst271
inst271: // alt -> 267, 269
	{
		idx := i*389 + 93
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 271, 0})
	goto inst267
inst271_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst269
	}
	goto unreachable

	goto unreachable
	goto inst267
inst267: // alt -> 258, 264
	{
		idx := i*389 + 94
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 267, 0})
	goto inst258
inst267_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst264
	}
	goto unreachable

	goto unreachable
	goto inst261
inst261: // rune "04" -> 262
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst262
		}
	}
	goto inst261_fail
	goto unreachable
	goto inst261_fail
inst261_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 267:
			goto inst267_alt
		}
	}
	goto fail

	goto unreachable
	goto inst264
inst264: // string "1" -> 265
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst265
		}
	}
	goto inst264_fail
	goto unreachable
	goto inst264_fail
inst264_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 271:
			goto inst271_alt
		}
	}
	goto fail

	goto unreachable
	goto inst265
inst265: // rune "09" -> 266
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst266
		}
	}
	goto inst265_fail
	goto unreachable
	goto inst265_fail
inst265_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 271:
			goto inst271_alt
		}
	}
	goto fail

	goto unreachable
	goto inst269
inst269: // alt -> 268, 270
	{
		idx := i*389 + 95
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 269, 0})
	goto inst268
inst269_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst270
	}
	goto unreachable

	goto unreachable
	goto inst268
inst268: // rune "19" -> 270
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst270
		}
	}
	goto inst268_fail
	goto unreachable
	goto inst268_fail
inst268_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 269:
			goto inst269_alt
		}
	}
	goto fail

	goto unreachable
	goto inst270
inst270: // rune "09" -> 272
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst272
		}
	}
	goto inst270_fail
	goto unreachable
	goto inst270_fail
inst270_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 248:
			goto inst248_alt
		case 252:
			goto inst252_alt
		case 254:
			goto inst254_alt
		case 256:
			goto inst256_alt
		case 269:
			goto inst269_alt
		case 303:
			goto inst303_alt
		}
	}
	goto fail

	goto unreachable
	goto inst266
inst266: // rune "09" -> 272
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst272
		}
	}
	goto inst266_fail
	goto unreachable
	goto inst266_fail
inst266_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 271:
			goto inst271_alt
		}
	}
	goto fail

	goto unreachable
	goto inst272
inst272: // string "." -> 286
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst286
		}
	}
	goto inst272_fail
	goto unreachable
	goto inst272_fail
inst272_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 248:
			goto inst248_alt
		case 252:
			goto inst252_alt
		case 254:
			goto inst254_alt
		case 256:
			goto inst256_alt
		case 263:
			goto inst263_alt
		case 267:
			goto inst267_alt
		case 269:
			goto inst269_alt
		case 271:
			goto inst271_alt
		case 303:
			goto inst303_alt
		}
	}
	goto fail

	goto unreachable
	goto inst262
inst262: // rune "09" -> 272
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst272
		}
	}
	goto inst262_fail
	goto unreachable
	goto inst262_fail
inst262_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 267:
			goto inst267_alt
		}
	}
	goto fail

	goto unreachable
	goto inst274
inst274: // string "5" -> 275
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst275
		}
	}
	goto inst274_fail
	goto unreachable
	goto inst274_fail
inst274_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 278:
			goto inst278_alt
		}
	}
	goto fail

	goto unreachable
	goto inst275
inst275: // rune "05" -> 287
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst287
		}
	}
	goto inst275_fail
	goto unreachable
	goto inst275_fail
inst275_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 278:
			goto inst278_alt
		}
	}
	goto fail

	goto unreachable
	goto inst278
inst278: // alt -> 274, 276
	{
		idx := i*389 + 96
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 278, 0})
	goto inst274
inst278_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst276
	}
	goto unreachable

	goto unreachable
	goto inst276
inst276: // rune "04" -> 277
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst277
		}
	}
	goto inst276_fail
	goto unreachable
	goto inst276_fail
inst276_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 282:
			goto inst282_alt
		}
	}
	goto fail

	goto unreachable
	goto inst273
inst273: // string "2" -> 278
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst278
		}
	}
	goto inst273_fail
	goto unreachable
	goto inst273_fail
inst273_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 282:
			goto inst282_alt
		}
	}
	goto fail

	goto unreachable
	goto inst277
inst277: // rune "09" -> 287
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst287
		}
	}
	goto inst277_fail
	goto unreachable
	goto inst277_fail
inst277_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 282:
			goto inst282_alt
		}
	}
	goto fail

	goto unreachable
	goto inst286
inst286: // alt -> 282, 284
	{
		idx := i*389 + 97
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 286, 0})
	goto inst282
inst286_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst284
	}
	goto unreachable

	goto unreachable
	goto inst282
inst282: // alt -> 273, 279
	{
		idx := i*389 + 98
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 282, 0})
	goto inst273
inst282_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst279
	}
	goto unreachable

	goto unreachable
	goto inst279
inst279: // string "1" -> 280
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst280
		}
	}
	goto inst279_fail
	goto unreachable
	goto inst279_fail
inst279_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 286:
			goto inst286_alt
		}
	}
	goto fail

	goto unreachable
	goto inst280
inst280: // rune "09" -> 281
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst281
		}
	}
	goto inst280_fail
	goto unreachable
	goto inst280_fail
inst280_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 286:
			goto inst286_alt
		}
	}
	goto fail

	goto unreachable
	goto inst281
inst281: // rune "09" -> 287
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst287
		}
	}
	goto inst281_fail
	goto unreachable
	goto inst281_fail
inst281_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 286:
			goto inst286_alt
		}
	}
	goto fail

	goto unreachable
	goto inst287
inst287: // string "." -> 301
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst301
		}
	}
	goto inst287_fail
	goto unreachable
	goto inst287_fail
inst287_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 248:
			goto inst248_alt
		case 252:
			goto inst252_alt
		case 254:
			goto inst254_alt
		case 256:
			goto inst256_alt
		case 263:
			goto inst263_alt
		case 267:
			goto inst267_alt
		case 269:
			goto inst269_alt
		case 271:
			goto inst271_alt
		case 278:
			goto inst278_alt
		case 282:
			goto inst282_alt
		case 284:
			goto inst284_alt
		case 286:
			goto inst286_alt
		case 303:
			goto inst303_alt
		}
	}
	goto fail

	goto unreachable
	goto inst284
inst284: // alt -> 283, 285
	{
		idx := i*389 + 99
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 284, 0})
	goto inst283
inst284_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst285
	}
	goto unreachable

	goto unreachable
	goto inst285
inst285: // rune "09" -> 287
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst287
		}
	}
	goto inst285_fail
	goto unreachable
	goto inst285_fail
inst285_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 248:
			goto inst248_alt
		case 252:
			goto inst252_alt
		case 254:
			goto inst254_alt
		case 256:
			goto inst256_alt
		case 263:
			goto inst263_alt
		case 267:
			goto inst267_alt
		case 269:
			goto inst269_alt
		case 271:
			goto inst271_alt
		case 284:
			goto inst284_alt
		case 303:
			goto inst303_alt
		}
	}
	goto fail

	goto unreachable
	goto inst283
inst283: // rune "19" -> 285
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst285
		}
	}
	goto inst283_fail
	goto unreachable
	goto inst283_fail
inst283_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 284:
			goto inst284_alt
		}
	}
	goto fail

	goto unreachable
	goto inst302
inst302: // nop -> 1065
	goto inst1065

	goto unreachable
	goto inst301
inst301: // alt -> 297, 299
	{
		idx := i*389 + 100
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 301, 0})
	goto inst297
inst301_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst299
	}
	goto unreachable

	goto unreachable
	goto inst297
inst297: // alt -> 288, 294
	{
		idx := i*389 + 101
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 297, 0})
	goto inst288
inst297_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst294
	}
	goto unreachable

	goto unreachable
	goto inst288
inst288: // string "2" -> 293
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst293
		}
	}
	goto inst288_fail
	goto unreachable
	goto inst288_fail
inst288_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 297:
			goto inst297_alt
		}
	}
	goto fail

	goto unreachable
	goto inst294
inst294: // string "1" -> 295
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst295
		}
	}
	goto inst294_fail
	goto unreachable
	goto inst294_fail
inst294_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 301:
			goto inst301_alt
		}
	}
	goto fail

	goto unreachable
	goto inst295
inst295: // rune "09" -> 296
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst296
		}
	}
	goto inst295_fail
	goto unreachable
	goto inst295_fail
inst295_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 301:
			goto inst301_alt
		}
	}
	goto fail

	goto unreachable
	goto inst299
inst299: // alt -> 298, 300
	{
		idx := i*389 + 102
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 299, 0})
	goto inst298
inst299_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst300
	}
	goto unreachable

	goto unreachable
	goto inst298
inst298: // rune "19" -> 300
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst300
		}
	}
	goto inst298_fail
	goto unreachable
	goto inst298_fail
inst298_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 299:
			goto inst299_alt
		}
	}
	goto fail

	goto unreachable
	goto inst300
inst300: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst300_fail
	goto unreachable
	goto inst300_fail
inst300_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 248:
			goto inst248_alt
		case 252:
			goto inst252_alt
		case 254:
			goto inst254_alt
		case 256:
			goto inst256_alt
		case 263:
			goto inst263_alt
		case 267:
			goto inst267_alt
		case 269:
			goto inst269_alt
		case 271:
			goto inst271_alt
		case 278:
			goto inst278_alt
		case 282:
			goto inst282_alt
		case 284:
			goto inst284_alt
		case 286:
			goto inst286_alt
		case 299:
			goto inst299_alt
		case 303:
			goto inst303_alt
		}
	}
	goto fail

	goto unreachable
	goto inst296
inst296: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst296_fail
	goto unreachable
	goto inst296_fail
inst296_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 301:
			goto inst301_alt
		}
	}
	goto fail

	goto unreachable
	goto inst293
inst293: // alt -> 289, 291
	{
		idx := i*389 + 103
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 293, 0})
	goto inst289
inst293_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst291
	}
	goto unreachable

	goto unreachable
	goto inst289
inst289: // string "5" -> 290
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst290
		}
	}
	goto inst289_fail
	goto unreachable
	goto inst289_fail
inst289_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 293:
			goto inst293_alt
		}
	}
	goto fail

	goto unreachable
	goto inst291
inst291: // rune "04" -> 292
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst292
		}
	}
	goto inst291_fail
	goto unreachable
	goto inst291_fail
inst291_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 297:
			goto inst297_alt
		}
	}
	goto fail

	goto unreachable
	goto inst290
inst290: // rune "05" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1065
		}
	}
	goto inst290_fail
	goto unreachable
	goto inst290_fail
inst290_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 293:
			goto inst293_alt
		}
	}
	goto fail

	goto unreachable
	goto inst292
inst292: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst292_fail
	goto unreachable
	goto inst292_fail
inst292_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 297:
			goto inst297_alt
		}
	}
	goto fail

	goto unreachable
	goto inst436
inst436: // alt -> 305, 306
	{
		idx := i*389 + 104
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 436, 0})
	goto inst305
inst436_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst306
	}
	goto unreachable

	goto unreachable
	goto inst306
inst306: // rune "09AFaf" -> 312
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst312
			}
			goto inst306_fail
		}
	}
	goto inst306_fail
	goto unreachable
	goto inst306_fail
inst306_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 577:
			goto inst577_alt
		}
	}
	goto fail

	goto unreachable
	goto inst312
inst312: // alt -> 307, 313
	{
		idx := i*389 + 105
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 312, 0})
	goto inst307
inst312_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst313
	}
	goto unreachable

	goto unreachable
	goto inst307
inst307: // rune "09AFaf" -> 311
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst311
			}
			goto inst307_fail
		}
	}
	goto inst307_fail
	goto unreachable
	goto inst307_fail
inst307_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 312:
			goto inst312_alt
		}
	}
	goto fail

	goto unreachable
	goto inst311
inst311: // alt -> 308, 313
	{
		idx := i*389 + 106
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 311, 0})
	goto inst308
inst311_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst313
	}
	goto unreachable

	goto unreachable
	goto inst308
inst308: // rune "09AFaf" -> 310
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst310
			}
			goto inst308_fail
		}
	}
	goto inst308_fail
	goto unreachable
	goto inst308_fail
inst308_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 311:
			goto inst311_alt
		}
	}
	goto fail

	goto unreachable
	goto inst313
inst313: // string ":" -> 314
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst314
		}
	}
	goto inst313_fail
	goto unreachable
	goto inst313_fail
inst313_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 310:
			goto inst310_alt
		case 311:
			goto inst311_alt
		case 312:
			goto inst312_alt
		case 577:
			goto inst577_alt
		}
	}
	goto fail

	goto unreachable
	goto inst310
inst310: // alt -> 309, 313
	{
		idx := i*389 + 107
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 310, 0})
	goto inst309
inst310_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst313
	}
	goto unreachable

	goto unreachable
	goto inst309
inst309: // rune "09AFaf" -> 313
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst313
			}
			goto inst309_fail
		}
	}
	goto inst309_fail
	goto unreachable
	goto inst309_fail
inst309_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 310:
			goto inst310_alt
		}
	}
	goto fail

	goto unreachable
	goto inst314
inst314: // rune "09AFaf" -> 320
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst320
			}
			goto inst314_fail
		}
	}
	goto inst314_fail
	goto unreachable
	goto inst314_fail
inst314_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 310:
			goto inst310_alt
		case 311:
			goto inst311_alt
		case 312:
			goto inst312_alt
		case 577:
			goto inst577_alt
		}
	}
	goto fail

	goto unreachable
	goto inst320
inst320: // alt -> 315, 321
	{
		idx := i*389 + 108
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 320, 0})
	goto inst315
inst320_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst321
	}
	goto unreachable

	goto unreachable
	goto inst315
inst315: // rune "09AFaf" -> 319
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst319
			}
			goto inst315_fail
		}
	}
	goto inst315_fail
	goto unreachable
	goto inst315_fail
inst315_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 320:
			goto inst320_alt
		}
	}
	goto fail

	goto unreachable
	goto inst319
inst319: // alt -> 316, 321
	{
		idx := i*389 + 109
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 319, 0})
	goto inst316
inst319_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst321
	}
	goto unreachable

	goto unreachable
	goto inst316
inst316: // rune "09AFaf" -> 318
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst318
			}
			goto inst316_fail
		}
	}
	goto inst316_fail
	goto unreachable
	goto inst316_fail
inst316_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 319:
			goto inst319_alt
		}
	}
	goto fail

	goto unreachable
	goto inst321
inst321: // string ":" -> 322
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst322
		}
	}
	goto inst321_fail
	goto unreachable
	goto inst321_fail
inst321_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 310:
			goto inst310_alt
		case 311:
			goto inst311_alt
		case 312:
			goto inst312_alt
		case 318:
			goto inst318_alt
		case 319:
			goto inst319_alt
		case 320:
			goto inst320_alt
		case 577:
			goto inst577_alt
		}
	}
	goto fail

	goto unreachable
	goto inst318
inst318: // alt -> 317, 321
	{
		idx := i*389 + 110
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 318, 0})
	goto inst317
inst318_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst321
	}
	goto unreachable

	goto unreachable
	goto inst317
inst317: // rune "09AFaf" -> 321
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst321
			}
			goto inst317_fail
		}
	}
	goto inst317_fail
	goto unreachable
	goto inst317_fail
inst317_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 318:
			goto inst318_alt
		}
	}
	goto fail

	goto unreachable
	goto inst322
inst322: // rune "09AFaf" -> 328
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst328
			}
			goto inst322_fail
		}
	}
	goto inst322_fail
	goto unreachable
	goto inst322_fail
inst322_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 310:
			goto inst310_alt
		case 311:
			goto inst311_alt
		case 312:
			goto inst312_alt
		case 318:
			goto inst318_alt
		case 319:
			goto inst319_alt
		case 320:
			goto inst320_alt
		case 577:
			goto inst577_alt
		}
	}
	goto fail

	goto unreachable
	goto inst328
inst328: // alt -> 323, 329
	{
		idx := i*389 + 111
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 328, 0})
	goto inst323
inst328_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst329
	}
	goto unreachable

	goto unreachable
	goto inst323
inst323: // rune "09AFaf" -> 327
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst327
			}
			goto inst323_fail
		}
	}
	goto inst323_fail
	goto unreachable
	goto inst323_fail
inst323_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 328:
			goto inst328_alt
		}
	}
	goto fail

	goto unreachable
	goto inst327
inst327: // alt -> 324, 329
	{
		idx := i*389 + 112
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 327, 0})
	goto inst324
inst327_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst329
	}
	goto unreachable

	goto unreachable
	goto inst324
inst324: // rune "09AFaf" -> 326
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst326
			}
			goto inst324_fail
		}
	}
	goto inst324_fail
	goto unreachable
	goto inst324_fail
inst324_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 327:
			goto inst327_alt
		}
	}
	goto fail

	goto unreachable
	goto inst329
inst329: // string ":" -> 330
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst330
		}
	}
	goto inst329_fail
	goto unreachable
	goto inst329_fail
inst329_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 310:
			goto inst310_alt
		case 311:
			goto inst311_alt
		case 312:
			goto inst312_alt
		case 318:
			goto inst318_alt
		case 319:
			goto inst319_alt
		case 320:
			goto inst320_alt
		case 326:
			goto inst326_alt
		case 327:
			goto inst327_alt
		case 328:
			goto inst328_alt
		case 577:
			goto inst577_alt
		}
	}
	goto fail

	goto unreachable
	goto inst326
inst326: // alt -> 325, 329
	{
		idx := i*389 + 113
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 326, 0})
	goto inst325
inst326_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst329
	}
	goto unreachable

	goto unreachable
	goto inst325
inst325: // rune "09AFaf" -> 329
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst329
			}
			goto inst325_fail
		}
	}
	goto inst325_fail
	goto unreachable
	goto inst325_fail
inst325_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 326:
			goto inst326_alt
		}
	}
	goto fail

	goto unreachable
	goto inst330
inst330: // rune "09AFaf" -> 336
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst336
			}
			goto inst330_fail
		}
	}
	goto inst330_fail
	goto unreachable
	goto inst330_fail
inst330_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 310:
			goto inst310_alt
		case 311:
			goto inst311_alt
		case 312:
			goto inst312_alt
		case 318:
			goto inst318_alt
		case 319:
			goto inst319_alt
		case 320:
			goto inst320_alt
		case 326:
			goto inst326_alt
		case 327:
			goto inst327_alt
		case 328:
			goto inst328_alt
		case 577:
			goto inst577_alt
		}
	}
	goto fail

	goto unreachable
	goto inst336
inst336: // alt -> 331, 337
	{
		idx := i*389 + 114
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 336, 0})
	goto inst331
inst336_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst337
	}
	goto unreachable

	goto unreachable
	goto inst331
inst331: // rune "09AFaf" -> 335
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst335
			}
			goto inst331_fail
		}
	}
	goto inst331_fail
	goto unreachable
	goto inst331_fail
inst331_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 336:
			goto inst336_alt
		}
	}
	goto fail

	goto unreachable
	goto inst335
inst335: // alt -> 332, 337
	{
		idx := i*389 + 115
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 335, 0})
	goto inst332
inst335_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst337
	}
	goto unreachable

	goto unreachable
	goto inst332
inst332: // rune "09AFaf" -> 334
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst334
			}
			goto inst332_fail
		}
	}
	goto inst332_fail
	goto unreachable
	goto inst332_fail
inst332_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 335:
			goto inst335_alt
		}
	}
	goto fail

	goto unreachable
	goto inst337
inst337: // string ":" -> 435
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst435
		}
	}
	goto inst337_fail
	goto unreachable
	goto inst337_fail
inst337_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 310:
			goto inst310_alt
		case 311:
			goto inst311_alt
		case 312:
			goto inst312_alt
		case 318:
			goto inst318_alt
		case 319:
			goto inst319_alt
		case 320:
			goto inst320_alt
		case 326:
			goto inst326_alt
		case 327:
			goto inst327_alt
		case 328:
			goto inst328_alt
		case 334:
			goto inst334_alt
		case 335:
			goto inst335_alt
		case 336:
			goto inst336_alt
		case 577:
			goto inst577_alt
		}
	}
	goto fail

	goto unreachable
	goto inst334
inst334: // alt -> 333, 337
	{
		idx := i*389 + 116
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 334, 0})
	goto inst333
inst334_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst337
	}
	goto unreachable

	goto unreachable
	goto inst333
inst333: // rune "09AFaf" -> 337
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst337
			}
			goto inst333_fail
		}
	}
	goto inst333_fail
	goto unreachable
	goto inst333_fail
inst333_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 334:
			goto inst334_alt
		}
	}
	goto fail

	goto unreachable
	goto inst340
inst340: // rune "09AFaf" -> 344
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst344
			}
			goto inst340_fail
		}
	}
	goto inst340_fail
	goto unreachable
	goto inst340_fail
inst340_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 345:
			goto inst345_alt
		}
	}
	goto fail

	goto unreachable
	goto inst344
inst344: // alt -> 341, 363
	{
		idx := i*389 + 117
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 344, 0})
	goto inst341
inst344_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst363
	}
	goto unreachable

	goto unreachable
	goto inst341
inst341: // rune "09AFaf" -> 343
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst343
			}
			goto inst341_fail
		}
	}
	goto inst341_fail
	goto unreachable
	goto inst341_fail
inst341_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 344:
			goto inst344_alt
		}
	}
	goto fail

	goto unreachable
	goto inst343
inst343: // alt -> 342, 363
	{
		idx := i*389 + 118
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 343, 0})
	goto inst342
inst343_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst363
	}
	goto unreachable

	goto unreachable
	goto inst342
inst342: // rune "09AFaf" -> 363
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst363
			}
			goto inst342_fail
		}
	}
	goto inst342_fail
	goto unreachable
	goto inst342_fail
inst342_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 343:
			goto inst343_alt
		}
	}
	goto fail

	goto unreachable
	goto inst363
inst363: // alt -> 346, 1065
	{
		idx := i*389 + 119
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 363, 0})
	goto inst346
inst363_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst345
inst345: // alt -> 340, 363
	{
		idx := i*389 + 120
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 345, 0})
	goto inst340
inst345_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst363
	}
	goto unreachable

	goto unreachable
	goto inst346
inst346: // string ":" -> 347
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst347
		}
	}
	goto inst346_fail
	goto unreachable
	goto inst346_fail
inst346_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 363:
			goto inst363_alt
		}
	}
	goto fail

	goto unreachable
	goto inst339
inst339: // rune "09AFaf" -> 345
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst345
			}
			goto inst339_fail
		}
	}
	goto inst339_fail
	goto unreachable
	goto inst339_fail
inst339_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 433:
			goto inst433_alt
		}
	}
	goto fail

	goto unreachable
	goto inst347
inst347: // rune "09AFaf" -> 353
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst353
			}
			goto inst347_fail
		}
	}
	goto inst347_fail
	goto unreachable
	goto inst347_fail
inst347_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 363:
			goto inst363_alt
		}
	}
	goto fail

	goto unreachable
	goto inst353
inst353: // alt -> 348, 362
	{
		idx := i*389 + 121
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 353, 0})
	goto inst348
inst353_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst362
	}
	goto unreachable

	goto unreachable
	goto inst348
inst348: // rune "09AFaf" -> 352
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst352
			}
			goto inst348_fail
		}
	}
	goto inst348_fail
	goto unreachable
	goto inst348_fail
inst348_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 353:
			goto inst353_alt
		}
	}
	goto fail

	goto unreachable
	goto inst352
inst352: // alt -> 349, 362
	{
		idx := i*389 + 122
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 352, 0})
	goto inst349
inst352_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst362
	}
	goto unreachable

	goto unreachable
	goto inst349
inst349: // rune "09AFaf" -> 351
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst351
			}
			goto inst349_fail
		}
	}
	goto inst349_fail
	goto unreachable
	goto inst349_fail
inst349_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 352:
			goto inst352_alt
		}
	}
	goto fail

	goto unreachable
	goto inst351
inst351: // alt -> 350, 362
	{
		idx := i*389 + 123
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 351, 0})
	goto inst350
inst351_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst362
	}
	goto unreachable

	goto unreachable
	goto inst362
inst362: // alt -> 354, 1065
	{
		idx := i*389 + 124
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 362, 0})
	goto inst354
inst362_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst350
inst350: // rune "09AFaf" -> 362
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst362
			}
			goto inst350_fail
		}
	}
	goto inst350_fail
	goto unreachable
	goto inst350_fail
inst350_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 351:
			goto inst351_alt
		}
	}
	goto fail

	goto unreachable
	goto inst354
inst354: // string ":" -> 355
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst355
		}
	}
	goto inst354_fail
	goto unreachable
	goto inst354_fail
inst354_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 362:
			goto inst362_alt
		}
	}
	goto fail

	goto unreachable
	goto inst355
inst355: // rune "09AFaf" -> 361
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst361
			}
			goto inst355_fail
		}
	}
	goto inst355_fail
	goto unreachable
	goto inst355_fail
inst355_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 362:
			goto inst362_alt
		}
	}
	goto fail

	goto unreachable
	goto inst361
inst361: // alt -> 356, 1065
	{
		idx := i*389 + 125
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 361, 0})
	goto inst356
inst361_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst356
inst356: // rune "09AFaf" -> 360
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst360
			}
			goto inst356_fail
		}
	}
	goto inst356_fail
	goto unreachable
	goto inst356_fail
inst356_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 361:
			goto inst361_alt
		}
	}
	goto fail

	goto unreachable
	goto inst338
inst338: // string ":" -> 339
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst339
		}
	}
	goto inst338_fail
	goto unreachable
	goto inst338_fail
inst338_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 433:
			goto inst433_alt
		}
	}
	goto fail

	goto unreachable
	goto inst435
inst435: // alt -> 433, 434
	{
		idx := i*389 + 126
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 435, 0})
	goto inst433
inst435_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst434
	}
	goto unreachable

	goto unreachable
	goto inst433
inst433: // alt -> 338, 372
	{
		idx := i*389 + 127
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 433, 0})
	goto inst338
inst433_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst372
	}
	goto unreachable

	goto unreachable
	goto inst360
inst360: // alt -> 357, 1065
	{
		idx := i*389 + 128
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 360, 0})
	goto inst357
inst360_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst357
inst357: // rune "09AFaf" -> 359
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst359
			}
			goto inst357_fail
		}
	}
	goto inst357_fail
	goto unreachable
	goto inst357_fail
inst357_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 360:
			goto inst360_alt
		}
	}
	goto fail

	goto unreachable
	goto inst434
inst434: // string ":" -> 1065
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1065
		}
	}
	goto inst434_fail
	goto unreachable
	goto inst434_fail
inst434_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 310:
			goto inst310_alt
		case 311:
			goto inst311_alt
		case 312:
			goto inst312_alt
		case 318:
			goto inst318_alt
		case 319:
			goto inst319_alt
		case 320:
			goto inst320_alt
		case 326:
			goto inst326_alt
		case 327:
			goto inst327_alt
		case 328:
			goto inst328_alt
		case 334:
			goto inst334_alt
		case 335:
			goto inst335_alt
		case 336:
			goto inst336_alt
		case 577:
			goto inst577_alt
		}
	}
	goto fail

	goto unreachable
	goto inst372
inst372: // alt -> 364, 373
	{
		idx := i*389 + 129
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 372, 0})
	goto inst364
inst372_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst373
	}
	goto unreachable

	goto unreachable
	goto inst364
inst364: // string ":" -> 365
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst365
		}
	}
	goto inst364_fail
	goto unreachable
	goto inst364_fail
inst364_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 372:
			goto inst372_alt
		}
	}
	goto fail

	goto unreachable
	goto inst365
inst365: // rune "09AFaf" -> 371
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst371
			}
			goto inst365_fail
		}
	}
	goto inst365_fail
	goto unreachable
	goto inst365_fail
inst365_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 372:
			goto inst372_alt
		}
	}
	goto fail

	goto unreachable
	goto inst371
inst371: // alt -> 366, 373
	{
		idx := i*389 + 130
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 371, 0})
	goto inst366
inst371_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst373
	}
	goto unreachable

	goto unreachable
	goto inst366
inst366: // rune "09AFaf" -> 370
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst370
			}
			goto inst366_fail
		}
	}
	goto inst366_fail
	goto unreachable
	goto inst366_fail
inst366_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 371:
			goto inst371_alt
		}
	}
	goto fail

	goto unreachable
	goto inst370
inst370: // alt -> 367, 373
	{
		idx := i*389 + 131
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 370, 0})
	goto inst367
inst370_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst373
	}
	goto unreachable

	goto unreachable
	goto inst373
inst373: // string ":" -> 387
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst387
		}
	}
	goto inst373_fail
	goto unreachable
	goto inst373_fail
inst373_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 369:
			goto inst369_alt
		case 370:
			goto inst370_alt
		case 371:
			goto inst371_alt
		case 372:
			goto inst372_alt
		case 435:
			goto inst435_alt
		}
	}
	goto fail

	goto unreachable
	goto inst368
inst368: // rune "09AFaf" -> 373
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst373
			}
			goto inst368_fail
		}
	}
	goto inst368_fail
	goto unreachable
	goto inst368_fail
inst368_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 369:
			goto inst369_alt
		}
	}
	goto fail

	goto unreachable
	goto inst369
inst369: // alt -> 368, 373
	{
		idx := i*389 + 132
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 369, 0})
	goto inst368
inst369_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst373
	}
	goto unreachable

	goto unreachable
	goto inst367
inst367: // rune "09AFaf" -> 369
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst369
			}
			goto inst367_fail
		}
	}
	goto inst367_fail
	goto unreachable
	goto inst367_fail
inst367_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 370:
			goto inst370_alt
		}
	}
	goto fail

	goto unreachable
	goto inst374
inst374: // string "2" -> 379
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst379
		}
	}
	goto inst374_fail
	goto unreachable
	goto inst374_fail
inst374_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 383:
			goto inst383_alt
		}
	}
	goto fail

	goto unreachable
	goto inst379
inst379: // alt -> 375, 377
	{
		idx := i*389 + 133
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 379, 0})
	goto inst375
inst379_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst377
	}
	goto unreachable

	goto unreachable
	goto inst375
inst375: // string "5" -> 376
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst376
		}
	}
	goto inst375_fail
	goto unreachable
	goto inst375_fail
inst375_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 379:
			goto inst379_alt
		}
	}
	goto fail

	goto unreachable
	goto inst377
inst377: // rune "04" -> 378
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst378
		}
	}
	goto inst377_fail
	goto unreachable
	goto inst377_fail
inst377_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 383:
			goto inst383_alt
		}
	}
	goto fail

	goto unreachable
	goto inst387
inst387: // alt -> 383, 385
	{
		idx := i*389 + 134
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 387, 0})
	goto inst383
inst387_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst385
	}
	goto unreachable

	goto unreachable
	goto inst383
inst383: // alt -> 374, 380
	{
		idx := i*389 + 135
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 383, 0})
	goto inst374
inst383_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst380
	}
	goto unreachable

	goto unreachable
	goto inst376
inst376: // rune "05" -> 388
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst388
		}
	}
	goto inst376_fail
	goto unreachable
	goto inst376_fail
inst376_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 379:
			goto inst379_alt
		}
	}
	goto fail

	goto unreachable
	goto inst380
inst380: // string "1" -> 381
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst381
		}
	}
	goto inst380_fail
	goto unreachable
	goto inst380_fail
inst380_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 387:
			goto inst387_alt
		}
	}
	goto fail

	goto unreachable
	goto inst381
inst381: // rune "09" -> 382
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst382
		}
	}
	goto inst381_fail
	goto unreachable
	goto inst381_fail
inst381_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 387:
			goto inst387_alt
		}
	}
	goto fail

	goto unreachable
	goto inst385
inst385: // alt -> 384, 386
	{
		idx := i*389 + 136
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 385, 0})
	goto inst384
inst385_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst386
	}
	goto unreachable

	goto unreachable
	goto inst384
inst384: // rune "19" -> 386
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst386
		}
	}
	goto inst384_fail
	goto unreachable
	goto inst384_fail
inst384_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 385:
			goto inst385_alt
		}
	}
	goto fail

	goto unreachable
	goto inst386
inst386: // rune "09" -> 388
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst388
		}
	}
	goto inst386_fail
	goto unreachable
	goto inst386_fail
inst386_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 369:
			goto inst369_alt
		case 370:
			goto inst370_alt
		case 371:
			goto inst371_alt
		case 372:
			goto inst372_alt
		case 385:
			goto inst385_alt
		case 435:
			goto inst435_alt
		}
	}
	goto fail

	goto unreachable
	goto inst382
inst382: // rune "09" -> 388
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst388
		}
	}
	goto inst382_fail
	goto unreachable
	goto inst382_fail
inst382_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 387:
			goto inst387_alt
		}
	}
	goto fail

	goto unreachable
	goto inst388
inst388: // string "." -> 402
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst402
		}
	}
	goto inst388_fail
	goto unreachable
	goto inst388_fail
inst388_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 369:
			goto inst369_alt
		case 370:
			goto inst370_alt
		case 371:
			goto inst371_alt
		case 372:
			goto inst372_alt
		case 379:
			goto inst379_alt
		case 383:
			goto inst383_alt
		case 385:
			goto inst385_alt
		case 387:
			goto inst387_alt
		case 435:
			goto inst435_alt
		}
	}
	goto fail

	goto unreachable
	goto inst378
inst378: // rune "09" -> 388
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst388
		}
	}
	goto inst378_fail
	goto unreachable
	goto inst378_fail
inst378_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 383:
			goto inst383_alt
		}
	}
	goto fail

	goto unreachable
	goto inst389
inst389: // string "2" -> 394
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst394
		}
	}
	goto inst389_fail
	goto unreachable
	goto inst389_fail
inst389_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 398:
			goto inst398_alt
		}
	}
	goto fail

	goto unreachable
	goto inst394
inst394: // alt -> 390, 392
	{
		idx := i*389 + 137
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 394, 0})
	goto inst390
inst394_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst392
	}
	goto unreachable

	goto unreachable
	goto inst390
inst390: // string "5" -> 391
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst391
		}
	}
	goto inst390_fail
	goto unreachable
	goto inst390_fail
inst390_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 394:
			goto inst394_alt
		}
	}
	goto fail

	goto unreachable
	goto inst392
inst392: // rune "04" -> 393
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst393
		}
	}
	goto inst392_fail
	goto unreachable
	goto inst392_fail
inst392_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 398:
			goto inst398_alt
		}
	}
	goto fail

	goto unreachable
	goto inst402
inst402: // alt -> 398, 400
	{
		idx := i*389 + 138
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 402, 0})
	goto inst398
inst402_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst400
	}
	goto unreachable

	goto unreachable
	goto inst398
inst398: // alt -> 389, 395
	{
		idx := i*389 + 139
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 398, 0})
	goto inst389
inst398_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst395
	}
	goto unreachable

	goto unreachable
	goto inst391
inst391: // rune "05" -> 403
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst403
		}
	}
	goto inst391_fail
	goto unreachable
	goto inst391_fail
inst391_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 394:
			goto inst394_alt
		}
	}
	goto fail

	goto unreachable
	goto inst395
inst395: // string "1" -> 396
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst396
		}
	}
	goto inst395_fail
	goto unreachable
	goto inst395_fail
inst395_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 402:
			goto inst402_alt
		}
	}
	goto fail

	goto unreachable
	goto inst396
inst396: // rune "09" -> 397
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst397
		}
	}
	goto inst396_fail
	goto unreachable
	goto inst396_fail
inst396_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 402:
			goto inst402_alt
		}
	}
	goto fail

	goto unreachable
	goto inst400
inst400: // alt -> 399, 401
	{
		idx := i*389 + 140
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 400, 0})
	goto inst399
inst400_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst401
	}
	goto unreachable

	goto unreachable
	goto inst399
inst399: // rune "19" -> 401
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst401
		}
	}
	goto inst399_fail
	goto unreachable
	goto inst399_fail
inst399_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 400:
			goto inst400_alt
		}
	}
	goto fail

	goto unreachable
	goto inst401
inst401: // rune "09" -> 403
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst403
		}
	}
	goto inst401_fail
	goto unreachable
	goto inst401_fail
inst401_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 369:
			goto inst369_alt
		case 370:
			goto inst370_alt
		case 371:
			goto inst371_alt
		case 372:
			goto inst372_alt
		case 379:
			goto inst379_alt
		case 383:
			goto inst383_alt
		case 385:
			goto inst385_alt
		case 387:
			goto inst387_alt
		case 400:
			goto inst400_alt
		case 435:
			goto inst435_alt
		}
	}
	goto fail

	goto unreachable
	goto inst397
inst397: // rune "09" -> 403
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst403
		}
	}
	goto inst397_fail
	goto unreachable
	goto inst397_fail
inst397_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 402:
			goto inst402_alt
		}
	}
	goto fail

	goto unreachable
	goto inst403
inst403: // string "." -> 417
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst417
		}
	}
	goto inst403_fail
	goto unreachable
	goto inst403_fail
inst403_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 369:
			goto inst369_alt
		case 370:
			goto inst370_alt
		case 371:
			goto inst371_alt
		case 372:
			goto inst372_alt
		case 379:
			goto inst379_alt
		case 383:
			goto inst383_alt
		case 385:
			goto inst385_alt
		case 387:
			goto inst387_alt
		case 394:
			goto inst394_alt
		case 398:
			goto inst398_alt
		case 400:
			goto inst400_alt
		case 402:
			goto inst402_alt
		case 435:
			goto inst435_alt
		}
	}
	goto fail

	goto unreachable
	goto inst393
inst393: // rune "09" -> 403
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst403
		}
	}
	goto inst393_fail
	goto unreachable
	goto inst393_fail
inst393_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 398:
			goto inst398_alt
		}
	}
	goto fail

	goto unreachable
	goto inst404
inst404: // string "2" -> 409
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst409
		}
	}
	goto inst404_fail
	goto unreachable
	goto inst404_fail
inst404_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 413:
			goto inst413_alt
		}
	}
	goto fail

	goto unreachable
	goto inst409
inst409: // alt -> 405, 407
	{
		idx := i*389 + 141
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 409, 0})
	goto inst405
inst409_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst407
	}
	goto unreachable

	goto unreachable
	goto inst405
inst405: // string "5" -> 406
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst406
		}
	}
	goto inst405_fail
	goto unreachable
	goto inst405_fail
inst405_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 409:
			goto inst409_alt
		}
	}
	goto fail

	goto unreachable
	goto inst407
inst407: // rune "04" -> 408
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst408
		}
	}
	goto inst407_fail
	goto unreachable
	goto inst407_fail
inst407_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 413:
			goto inst413_alt
		}
	}
	goto fail

	goto unreachable
	goto inst417
inst417: // alt -> 413, 415
	{
		idx := i*389 + 142
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 417, 0})
	goto inst413
inst417_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst415
	}
	goto unreachable

	goto unreachable
	goto inst413
inst413: // alt -> 404, 410
	{
		idx := i*389 + 143
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 413, 0})
	goto inst404
inst413_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst410
	}
	goto unreachable

	goto unreachable
	goto inst406
inst406: // rune "05" -> 418
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst418
		}
	}
	goto inst406_fail
	goto unreachable
	goto inst406_fail
inst406_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 409:
			goto inst409_alt
		}
	}
	goto fail

	goto unreachable
	goto inst410
inst410: // string "1" -> 411
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst411
		}
	}
	goto inst410_fail
	goto unreachable
	goto inst410_fail
inst410_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 417:
			goto inst417_alt
		}
	}
	goto fail

	goto unreachable
	goto inst411
inst411: // rune "09" -> 412
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst412
		}
	}
	goto inst411_fail
	goto unreachable
	goto inst411_fail
inst411_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 417:
			goto inst417_alt
		}
	}
	goto fail

	goto unreachable
	goto inst415
inst415: // alt -> 414, 416
	{
		idx := i*389 + 144
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 415, 0})
	goto inst414
inst415_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst416
	}
	goto unreachable

	goto unreachable
	goto inst414
inst414: // rune "19" -> 416
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst416
		}
	}
	goto inst414_fail
	goto unreachable
	goto inst414_fail
inst414_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 415:
			goto inst415_alt
		}
	}
	goto fail

	goto unreachable
	goto inst416
inst416: // rune "09" -> 418
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst418
		}
	}
	goto inst416_fail
	goto unreachable
	goto inst416_fail
inst416_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 369:
			goto inst369_alt
		case 370:
			goto inst370_alt
		case 371:
			goto inst371_alt
		case 372:
			goto inst372_alt
		case 379:
			goto inst379_alt
		case 383:
			goto inst383_alt
		case 385:
			goto inst385_alt
		case 387:
			goto inst387_alt
		case 394:
			goto inst394_alt
		case 398:
			goto inst398_alt
		case 400:
			goto inst400_alt
		case 402:
			goto inst402_alt
		case 415:
			goto inst415_alt
		case 435:
			goto inst435_alt
		}
	}
	goto fail

	goto unreachable
	goto inst412
inst412: // rune "09" -> 418
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst418
		}
	}
	goto inst412_fail
	goto unreachable
	goto inst412_fail
inst412_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 417:
			goto inst417_alt
		}
	}
	goto fail

	goto unreachable
	goto inst418
inst418: // string "." -> 432
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst432
		}
	}
	goto inst418_fail
	goto unreachable
	goto inst418_fail
inst418_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 369:
			goto inst369_alt
		case 370:
			goto inst370_alt
		case 371:
			goto inst371_alt
		case 372:
			goto inst372_alt
		case 379:
			goto inst379_alt
		case 383:
			goto inst383_alt
		case 385:
			goto inst385_alt
		case 387:
			goto inst387_alt
		case 394:
			goto inst394_alt
		case 398:
			goto inst398_alt
		case 400:
			goto inst400_alt
		case 402:
			goto inst402_alt
		case 409:
			goto inst409_alt
		case 413:
			goto inst413_alt
		case 415:
			goto inst415_alt
		case 417:
			goto inst417_alt
		case 435:
			goto inst435_alt
		}
	}
	goto fail

	goto unreachable
	goto inst408
inst408: // rune "09" -> 418
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst418
		}
	}
	goto inst408_fail
	goto unreachable
	goto inst408_fail
inst408_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 413:
			goto inst413_alt
		}
	}
	goto fail

	goto unreachable
	goto inst419
inst419: // string "2" -> 424
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst424
		}
	}
	goto inst419_fail
	goto unreachable
	goto inst419_fail
inst419_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 428:
			goto inst428_alt
		}
	}
	goto fail

	goto unreachable
	goto inst424
inst424: // alt -> 420, 422
	{
		idx := i*389 + 145
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 424, 0})
	goto inst420
inst424_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst422
	}
	goto unreachable

	goto unreachable
	goto inst420
inst420: // string "5" -> 421
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst421
		}
	}
	goto inst420_fail
	goto unreachable
	goto inst420_fail
inst420_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 424:
			goto inst424_alt
		}
	}
	goto fail

	goto unreachable
	goto inst432
inst432: // alt -> 428, 430
	{
		idx := i*389 + 146
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 432, 0})
	goto inst428
inst432_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst430
	}
	goto unreachable

	goto unreachable
	goto inst428
inst428: // alt -> 419, 425
	{
		idx := i*389 + 147
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 428, 0})
	goto inst419
inst428_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst425
	}
	goto unreachable

	goto unreachable
	goto inst425
inst425: // string "1" -> 426
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst426
		}
	}
	goto inst425_fail
	goto unreachable
	goto inst425_fail
inst425_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 432:
			goto inst432_alt
		}
	}
	goto fail

	goto unreachable
	goto inst422
inst422: // rune "04" -> 423
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst423
		}
	}
	goto inst422_fail
	goto unreachable
	goto inst422_fail
inst422_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 428:
			goto inst428_alt
		}
	}
	goto fail

	goto unreachable
	goto inst430
inst430: // alt -> 429, 431
	{
		idx := i*389 + 148
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 430, 0})
	goto inst429
inst430_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst431
	}
	goto unreachable

	goto unreachable
	goto inst429
inst429: // rune "19" -> 431
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst431
		}
	}
	goto inst429_fail
	goto unreachable
	goto inst429_fail
inst429_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 430:
			goto inst430_alt
		}
	}
	goto fail

	goto unreachable
	goto inst431
inst431: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst431_fail
	goto unreachable
	goto inst431_fail
inst431_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 369:
			goto inst369_alt
		case 370:
			goto inst370_alt
		case 371:
			goto inst371_alt
		case 372:
			goto inst372_alt
		case 379:
			goto inst379_alt
		case 383:
			goto inst383_alt
		case 385:
			goto inst385_alt
		case 387:
			goto inst387_alt
		case 394:
			goto inst394_alt
		case 398:
			goto inst398_alt
		case 400:
			goto inst400_alt
		case 402:
			goto inst402_alt
		case 409:
			goto inst409_alt
		case 413:
			goto inst413_alt
		case 415:
			goto inst415_alt
		case 417:
			goto inst417_alt
		case 430:
			goto inst430_alt
		case 435:
			goto inst435_alt
		}
	}
	goto fail

	goto unreachable
	goto inst421
inst421: // rune "05" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1065
		}
	}
	goto inst421_fail
	goto unreachable
	goto inst421_fail
inst421_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 424:
			goto inst424_alt
		}
	}
	goto fail

	goto unreachable
	goto inst577
inst577: // alt -> 436, 437
	{
		idx := i*389 + 149
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 577, 0})
	goto inst436
inst577_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst437
	}
	goto unreachable

	goto unreachable
	goto inst437
inst437: // rune "09AFaf" -> 443
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst443
			}
			goto inst437_fail
		}
	}
	goto inst437_fail
	goto unreachable
	goto inst437_fail
inst437_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 728:
			goto inst728_alt
		}
	}
	goto fail

	goto unreachable
	goto inst423
inst423: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst423_fail
	goto unreachable
	goto inst423_fail
inst423_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 428:
			goto inst428_alt
		}
	}
	goto fail

	goto unreachable
	goto inst443
inst443: // alt -> 438, 444
	{
		idx := i*389 + 150
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 443, 0})
	goto inst438
inst443_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst444
	}
	goto unreachable

	goto unreachable
	goto inst438
inst438: // rune "09AFaf" -> 442
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst442
			}
			goto inst438_fail
		}
	}
	goto inst438_fail
	goto unreachable
	goto inst438_fail
inst438_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 443:
			goto inst443_alt
		}
	}
	goto fail

	goto unreachable
	goto inst442
inst442: // alt -> 439, 444
	{
		idx := i*389 + 151
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 442, 0})
	goto inst439
inst442_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst444
	}
	goto unreachable

	goto unreachable
	goto inst439
inst439: // rune "09AFaf" -> 441
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst441
			}
			goto inst439_fail
		}
	}
	goto inst439_fail
	goto unreachable
	goto inst439_fail
inst439_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 442:
			goto inst442_alt
		}
	}
	goto fail

	goto unreachable
	goto inst441
inst441: // alt -> 440, 444
	{
		idx := i*389 + 152
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 441, 0})
	goto inst440
inst441_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst444
	}
	goto unreachable

	goto unreachable
	goto inst444
inst444: // string ":" -> 445
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst445
		}
	}
	goto inst444_fail
	goto unreachable
	goto inst444_fail
inst444_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 441:
			goto inst441_alt
		case 442:
			goto inst442_alt
		case 443:
			goto inst443_alt
		case 728:
			goto inst728_alt
		}
	}
	goto fail

	goto unreachable
	goto inst440
inst440: // rune "09AFaf" -> 444
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst444
			}
			goto inst440_fail
		}
	}
	goto inst440_fail
	goto unreachable
	goto inst440_fail
inst440_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 441:
			goto inst441_alt
		}
	}
	goto fail

	goto unreachable
	goto inst445
inst445: // rune "09AFaf" -> 451
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst451
			}
			goto inst445_fail
		}
	}
	goto inst445_fail
	goto unreachable
	goto inst445_fail
inst445_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 441:
			goto inst441_alt
		case 442:
			goto inst442_alt
		case 443:
			goto inst443_alt
		case 728:
			goto inst728_alt
		}
	}
	goto fail

	goto unreachable
	goto inst451
inst451: // alt -> 446, 452
	{
		idx := i*389 + 153
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 451, 0})
	goto inst446
inst451_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst452
	}
	goto unreachable

	goto unreachable
	goto inst446
inst446: // rune "09AFaf" -> 450
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst450
			}
			goto inst446_fail
		}
	}
	goto inst446_fail
	goto unreachable
	goto inst446_fail
inst446_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 451:
			goto inst451_alt
		}
	}
	goto fail

	goto unreachable
	goto inst450
inst450: // alt -> 447, 452
	{
		idx := i*389 + 154
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 450, 0})
	goto inst447
inst450_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst452
	}
	goto unreachable

	goto unreachable
	goto inst452
inst452: // string ":" -> 453
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst453
		}
	}
	goto inst452_fail
	goto unreachable
	goto inst452_fail
inst452_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 441:
			goto inst441_alt
		case 442:
			goto inst442_alt
		case 443:
			goto inst443_alt
		case 449:
			goto inst449_alt
		case 450:
			goto inst450_alt
		case 451:
			goto inst451_alt
		case 728:
			goto inst728_alt
		}
	}
	goto fail

	goto unreachable
	goto inst448
inst448: // rune "09AFaf" -> 452
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst452
			}
			goto inst448_fail
		}
	}
	goto inst448_fail
	goto unreachable
	goto inst448_fail
inst448_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 449:
			goto inst449_alt
		}
	}
	goto fail

	goto unreachable
	goto inst449
inst449: // alt -> 448, 452
	{
		idx := i*389 + 155
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 449, 0})
	goto inst448
inst449_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst452
	}
	goto unreachable

	goto unreachable
	goto inst447
inst447: // rune "09AFaf" -> 449
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst449
			}
			goto inst447_fail
		}
	}
	goto inst447_fail
	goto unreachable
	goto inst447_fail
inst447_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 450:
			goto inst450_alt
		}
	}
	goto fail

	goto unreachable
	goto inst453
inst453: // rune "09AFaf" -> 459
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst459
			}
			goto inst453_fail
		}
	}
	goto inst453_fail
	goto unreachable
	goto inst453_fail
inst453_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 441:
			goto inst441_alt
		case 442:
			goto inst442_alt
		case 443:
			goto inst443_alt
		case 449:
			goto inst449_alt
		case 450:
			goto inst450_alt
		case 451:
			goto inst451_alt
		case 728:
			goto inst728_alt
		}
	}
	goto fail

	goto unreachable
	goto inst459
inst459: // alt -> 454, 460
	{
		idx := i*389 + 156
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 459, 0})
	goto inst454
inst459_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst460
	}
	goto unreachable

	goto unreachable
	goto inst454
inst454: // rune "09AFaf" -> 458
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst458
			}
			goto inst454_fail
		}
	}
	goto inst454_fail
	goto unreachable
	goto inst454_fail
inst454_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 459:
			goto inst459_alt
		}
	}
	goto fail

	goto unreachable
	goto inst458
inst458: // alt -> 455, 460
	{
		idx := i*389 + 157
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 458, 0})
	goto inst455
inst458_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst460
	}
	goto unreachable

	goto unreachable
	goto inst455
inst455: // rune "09AFaf" -> 457
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst457
			}
			goto inst455_fail
		}
	}
	goto inst455_fail
	goto unreachable
	goto inst455_fail
inst455_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 458:
			goto inst458_alt
		}
	}
	goto fail

	goto unreachable
	goto inst457
inst457: // alt -> 456, 460
	{
		idx := i*389 + 158
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 457, 0})
	goto inst456
inst457_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst460
	}
	goto unreachable

	goto unreachable
	goto inst460
inst460: // string ":" -> 576
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst576
		}
	}
	goto inst460_fail
	goto unreachable
	goto inst460_fail
inst460_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 441:
			goto inst441_alt
		case 442:
			goto inst442_alt
		case 443:
			goto inst443_alt
		case 449:
			goto inst449_alt
		case 450:
			goto inst450_alt
		case 451:
			goto inst451_alt
		case 457:
			goto inst457_alt
		case 458:
			goto inst458_alt
		case 459:
			goto inst459_alt
		case 728:
			goto inst728_alt
		}
	}
	goto fail

	goto unreachable
	goto inst456
inst456: // rune "09AFaf" -> 460
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst460
			}
			goto inst456_fail
		}
	}
	goto inst456_fail
	goto unreachable
	goto inst456_fail
inst456_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 457:
			goto inst457_alt
		}
	}
	goto fail

	goto unreachable
	goto inst426
inst426: // rune "09" -> 427
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst427
		}
	}
	goto inst426_fail
	goto unreachable
	goto inst426_fail
inst426_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 432:
			goto inst432_alt
		}
	}
	goto fail

	goto unreachable
	goto inst464
inst464: // rune "09AFaf" -> 466
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst466
			}
			goto inst464_fail
		}
	}
	goto inst464_fail
	goto unreachable
	goto inst464_fail
inst464_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 467:
			goto inst467_alt
		}
	}
	goto fail

	goto unreachable
	goto inst466
inst466: // alt -> 465, 495
	{
		idx := i*389 + 159
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 466, 0})
	goto inst465
inst466_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst495
	}
	goto unreachable

	goto unreachable
	goto inst465
inst465: // rune "09AFaf" -> 495
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst495
			}
			goto inst465_fail
		}
	}
	goto inst465_fail
	goto unreachable
	goto inst465_fail
inst465_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 466:
			goto inst466_alt
		}
	}
	goto fail

	goto unreachable
	goto inst467
inst467: // alt -> 464, 495
	{
		idx := i*389 + 160
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 467, 0})
	goto inst464
inst467_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst495
	}
	goto unreachable

	goto unreachable
	goto inst463
inst463: // rune "09AFaf" -> 467
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst467
			}
			goto inst463_fail
		}
	}
	goto inst463_fail
	goto unreachable
	goto inst463_fail
inst463_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 468:
			goto inst468_alt
		}
	}
	goto fail

	goto unreachable
	goto inst427
inst427: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst427_fail
	goto unreachable
	goto inst427_fail
inst427_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 432:
			goto inst432_alt
		}
	}
	goto fail

	goto unreachable
	goto inst495
inst495: // alt -> 469, 1065
	{
		idx := i*389 + 161
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 495, 0})
	goto inst469
inst495_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst468
inst468: // alt -> 463, 495
	{
		idx := i*389 + 162
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 468, 0})
	goto inst463
inst468_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst495
	}
	goto unreachable

	goto unreachable
	goto inst469
inst469: // string ":" -> 470
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst470
		}
	}
	goto inst469_fail
	goto unreachable
	goto inst469_fail
inst469_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 495:
			goto inst495_alt
		}
	}
	goto fail

	goto unreachable
	goto inst470
inst470: // rune "09AFaf" -> 476
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst476
			}
			goto inst470_fail
		}
	}
	goto inst470_fail
	goto unreachable
	goto inst470_fail
inst470_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 495:
			goto inst495_alt
		}
	}
	goto fail

	goto unreachable
	goto inst476
inst476: // alt -> 471, 494
	{
		idx := i*389 + 163
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 476, 0})
	goto inst471
inst476_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst494
	}
	goto unreachable

	goto unreachable
	goto inst473
inst473: // rune "09AFaf" -> 494
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst494
			}
			goto inst473_fail
		}
	}
	goto inst473_fail
	goto unreachable
	goto inst473_fail
inst473_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 474:
			goto inst474_alt
		}
	}
	goto fail

	goto unreachable
	goto inst474
inst474: // alt -> 473, 494
	{
		idx := i*389 + 164
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 474, 0})
	goto inst473
inst474_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst494
	}
	goto unreachable

	goto unreachable
	goto inst472
inst472: // rune "09AFaf" -> 474
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst474
			}
			goto inst472_fail
		}
	}
	goto inst472_fail
	goto unreachable
	goto inst472_fail
inst472_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 475:
			goto inst475_alt
		}
	}
	goto fail

	goto unreachable
	goto inst494
inst494: // alt -> 477, 1065
	{
		idx := i*389 + 165
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 494, 0})
	goto inst477
inst494_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst475
inst475: // alt -> 472, 494
	{
		idx := i*389 + 166
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 475, 0})
	goto inst472
inst475_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst494
	}
	goto unreachable

	goto unreachable
	goto inst471
inst471: // rune "09AFaf" -> 475
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst475
			}
			goto inst471_fail
		}
	}
	goto inst471_fail
	goto unreachable
	goto inst471_fail
inst471_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 476:
			goto inst476_alt
		}
	}
	goto fail

	goto unreachable
	goto inst462
inst462: // rune "09AFaf" -> 468
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst468
			}
			goto inst462_fail
		}
	}
	goto inst462_fail
	goto unreachable
	goto inst462_fail
inst462_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 574:
			goto inst574_alt
		}
	}
	goto fail

	goto unreachable
	goto inst477
inst477: // string ":" -> 478
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst478
		}
	}
	goto inst477_fail
	goto unreachable
	goto inst477_fail
inst477_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 494:
			goto inst494_alt
		}
	}
	goto fail

	goto unreachable
	goto inst478
inst478: // rune "09AFaf" -> 484
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst484
			}
			goto inst478_fail
		}
	}
	goto inst478_fail
	goto unreachable
	goto inst478_fail
inst478_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 494:
			goto inst494_alt
		}
	}
	goto fail

	goto unreachable
	goto inst461
inst461: // string ":" -> 462
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst462
		}
	}
	goto inst461_fail
	goto unreachable
	goto inst461_fail
inst461_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 574:
			goto inst574_alt
		}
	}
	goto fail

	goto unreachable
	goto inst484
inst484: // alt -> 479, 493
	{
		idx := i*389 + 167
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 484, 0})
	goto inst479
inst484_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst493
	}
	goto unreachable

	goto unreachable
	goto inst479
inst479: // rune "09AFaf" -> 483
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst483
			}
			goto inst479_fail
		}
	}
	goto inst479_fail
	goto unreachable
	goto inst479_fail
inst479_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 484:
			goto inst484_alt
		}
	}
	goto fail

	goto unreachable
	goto inst483
inst483: // alt -> 480, 493
	{
		idx := i*389 + 168
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 483, 0})
	goto inst480
inst483_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst493
	}
	goto unreachable

	goto unreachable
	goto inst480
inst480: // rune "09AFaf" -> 482
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst482
			}
			goto inst480_fail
		}
	}
	goto inst480_fail
	goto unreachable
	goto inst480_fail
inst480_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 483:
			goto inst483_alt
		}
	}
	goto fail

	goto unreachable
	goto inst482
inst482: // alt -> 481, 493
	{
		idx := i*389 + 169
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 482, 0})
	goto inst481
inst482_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst493
	}
	goto unreachable

	goto unreachable
	goto inst481
inst481: // rune "09AFaf" -> 493
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst493
			}
			goto inst481_fail
		}
	}
	goto inst481_fail
	goto unreachable
	goto inst481_fail
inst481_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 482:
			goto inst482_alt
		}
	}
	goto fail

	goto unreachable
	goto inst493
inst493: // alt -> 485, 1065
	{
		idx := i*389 + 170
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 493, 0})
	goto inst485
inst493_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst485
inst485: // string ":" -> 486
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst486
		}
	}
	goto inst485_fail
	goto unreachable
	goto inst485_fail
inst485_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 493:
			goto inst493_alt
		}
	}
	goto fail

	goto unreachable
	goto inst486
inst486: // rune "09AFaf" -> 492
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst492
			}
			goto inst486_fail
		}
	}
	goto inst486_fail
	goto unreachable
	goto inst486_fail
inst486_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 493:
			goto inst493_alt
		}
	}
	goto fail

	goto unreachable
	goto inst576
inst576: // alt -> 574, 575
	{
		idx := i*389 + 171
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 576, 0})
	goto inst574
inst576_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst575
	}
	goto unreachable

	goto unreachable
	goto inst574
inst574: // alt -> 461, 513
	{
		idx := i*389 + 172
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 574, 0})
	goto inst461
inst574_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst513
	}
	goto unreachable

	goto unreachable
	goto inst575
inst575: // string ":" -> 1065
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1065
		}
	}
	goto inst575_fail
	goto unreachable
	goto inst575_fail
inst575_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 441:
			goto inst441_alt
		case 442:
			goto inst442_alt
		case 443:
			goto inst443_alt
		case 449:
			goto inst449_alt
		case 450:
			goto inst450_alt
		case 451:
			goto inst451_alt
		case 457:
			goto inst457_alt
		case 458:
			goto inst458_alt
		case 459:
			goto inst459_alt
		case 728:
			goto inst728_alt
		}
	}
	goto fail

	goto unreachable
	goto inst492
inst492: // alt -> 487, 1065
	{
		idx := i*389 + 173
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 492, 0})
	goto inst487
inst492_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst487
inst487: // rune "09AFaf" -> 491
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst491
			}
			goto inst487_fail
		}
	}
	goto inst487_fail
	goto unreachable
	goto inst487_fail
inst487_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 492:
			goto inst492_alt
		}
	}
	goto fail

	goto unreachable
	goto inst491
inst491: // alt -> 488, 1065
	{
		idx := i*389 + 174
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 491, 0})
	goto inst488
inst491_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst488
inst488: // rune "09AFaf" -> 490
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst490
			}
			goto inst488_fail
		}
	}
	goto inst488_fail
	goto unreachable
	goto inst488_fail
inst488_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 491:
			goto inst491_alt
		}
	}
	goto fail

	goto unreachable
	goto inst513
inst513: // alt -> 496, 514
	{
		idx := i*389 + 175
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 513, 0})
	goto inst496
inst513_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst514
	}
	goto unreachable

	goto unreachable
	goto inst496
inst496: // string ":" -> 497
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst497
		}
	}
	goto inst496_fail
	goto unreachable
	goto inst496_fail
inst496_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 513:
			goto inst513_alt
		}
	}
	goto fail

	goto unreachable
	goto inst497
inst497: // rune "09AFaf" -> 503
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst503
			}
			goto inst497_fail
		}
	}
	goto inst497_fail
	goto unreachable
	goto inst497_fail
inst497_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 513:
			goto inst513_alt
		}
	}
	goto fail

	goto unreachable
	goto inst503
inst503: // alt -> 498, 512
	{
		idx := i*389 + 176
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 503, 0})
	goto inst498
inst503_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst512
	}
	goto unreachable

	goto unreachable
	goto inst498
inst498: // rune "09AFaf" -> 502
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst502
			}
			goto inst498_fail
		}
	}
	goto inst498_fail
	goto unreachable
	goto inst498_fail
inst498_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 503:
			goto inst503_alt
		}
	}
	goto fail

	goto unreachable
	goto inst502
inst502: // alt -> 499, 512
	{
		idx := i*389 + 177
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 502, 0})
	goto inst499
inst502_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst512
	}
	goto unreachable

	goto unreachable
	goto inst499
inst499: // rune "09AFaf" -> 501
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst501
			}
			goto inst499_fail
		}
	}
	goto inst499_fail
	goto unreachable
	goto inst499_fail
inst499_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 502:
			goto inst502_alt
		}
	}
	goto fail

	goto unreachable
	goto inst501
inst501: // alt -> 500, 512
	{
		idx := i*389 + 178
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 501, 0})
	goto inst500
inst501_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst512
	}
	goto unreachable

	goto unreachable
	goto inst512
inst512: // alt -> 504, 514
	{
		idx := i*389 + 179
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 512, 0})
	goto inst504
inst512_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst514
	}
	goto unreachable

	goto unreachable
	goto inst500
inst500: // rune "09AFaf" -> 512
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst512
			}
			goto inst500_fail
		}
	}
	goto inst500_fail
	goto unreachable
	goto inst500_fail
inst500_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 501:
			goto inst501_alt
		}
	}
	goto fail

	goto unreachable
	goto inst504
inst504: // string ":" -> 505
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst505
		}
	}
	goto inst504_fail
	goto unreachable
	goto inst504_fail
inst504_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 512:
			goto inst512_alt
		}
	}
	goto fail

	goto unreachable
	goto inst505
inst505: // rune "09AFaf" -> 511
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst511
			}
			goto inst505_fail
		}
	}
	goto inst505_fail
	goto unreachable
	goto inst505_fail
inst505_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 512:
			goto inst512_alt
		}
	}
	goto fail

	goto unreachable
	goto inst511
inst511: // alt -> 506, 514
	{
		idx := i*389 + 180
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 511, 0})
	goto inst506
inst511_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst514
	}
	goto unreachable

	goto unreachable
	goto inst506
inst506: // rune "09AFaf" -> 510
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst510
			}
			goto inst506_fail
		}
	}
	goto inst506_fail
	goto unreachable
	goto inst506_fail
inst506_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 511:
			goto inst511_alt
		}
	}
	goto fail

	goto unreachable
	goto inst514
inst514: // string ":" -> 528
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst528
		}
	}
	goto inst514_fail
	goto unreachable
	goto inst514_fail
inst514_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 501:
			goto inst501_alt
		case 502:
			goto inst502_alt
		case 503:
			goto inst503_alt
		case 509:
			goto inst509_alt
		case 510:
			goto inst510_alt
		case 511:
			goto inst511_alt
		case 512:
			goto inst512_alt
		case 513:
			goto inst513_alt
		case 576:
			goto inst576_alt
		}
	}
	goto fail

	goto unreachable
	goto inst510
inst510: // alt -> 507, 514
	{
		idx := i*389 + 181
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 510, 0})
	goto inst507
inst510_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst514
	}
	goto unreachable

	goto unreachable
	goto inst507
inst507: // rune "09AFaf" -> 509
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst509
			}
			goto inst507_fail
		}
	}
	goto inst507_fail
	goto unreachable
	goto inst507_fail
inst507_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 510:
			goto inst510_alt
		}
	}
	goto fail

	goto unreachable
	goto inst509
inst509: // alt -> 508, 514
	{
		idx := i*389 + 182
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 509, 0})
	goto inst508
inst509_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst514
	}
	goto unreachable

	goto unreachable
	goto inst508
inst508: // rune "09AFaf" -> 514
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst514
			}
			goto inst508_fail
		}
	}
	goto inst508_fail
	goto unreachable
	goto inst508_fail
inst508_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 509:
			goto inst509_alt
		}
	}
	goto fail

	goto unreachable
	goto inst359
inst359: // alt -> 358, 1065
	{
		idx := i*389 + 183
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 359, 0})
	goto inst358
inst359_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst358
inst358: // rune "09AFaf" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1065
			}
			goto inst358_fail
		}
	}
	goto inst358_fail
	goto unreachable
	goto inst358_fail
inst358_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 359:
			goto inst359_alt
		}
	}
	goto fail

	goto unreachable
	goto inst518
inst518: // rune "04" -> 519
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst519
		}
	}
	goto inst518_fail
	goto unreachable
	goto inst518_fail
inst518_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 524:
			goto inst524_alt
		}
	}
	goto fail

	goto unreachable
	goto inst520
inst520: // alt -> 516, 518
	{
		idx := i*389 + 184
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 520, 0})
	goto inst516
inst520_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst518
	}
	goto unreachable

	goto unreachable
	goto inst515
inst515: // string "2" -> 520
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst520
		}
	}
	goto inst515_fail
	goto unreachable
	goto inst515_fail
inst515_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 524:
			goto inst524_alt
		}
	}
	goto fail

	goto unreachable
	goto inst516
inst516: // string "5" -> 517
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst517
		}
	}
	goto inst516_fail
	goto unreachable
	goto inst516_fail
inst516_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 520:
			goto inst520_alt
		}
	}
	goto fail

	goto unreachable
	goto inst524
inst524: // alt -> 515, 521
	{
		idx := i*389 + 185
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 524, 0})
	goto inst515
inst524_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst521
	}
	goto unreachable

	goto unreachable
	goto inst528
inst528: // alt -> 524, 526
	{
		idx := i*389 + 186
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 528, 0})
	goto inst524
inst528_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst526
	}
	goto unreachable

	goto unreachable
	goto inst517
inst517: // rune "05" -> 529
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst529
		}
	}
	goto inst517_fail
	goto unreachable
	goto inst517_fail
inst517_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 520:
			goto inst520_alt
		}
	}
	goto fail

	goto unreachable
	goto inst526
inst526: // alt -> 525, 527
	{
		idx := i*389 + 187
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 526, 0})
	goto inst525
inst526_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst527
	}
	goto unreachable

	goto unreachable
	goto inst525
inst525: // rune "19" -> 527
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst527
		}
	}
	goto inst525_fail
	goto unreachable
	goto inst525_fail
inst525_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 526:
			goto inst526_alt
		}
	}
	goto fail

	goto unreachable
	goto inst527
inst527: // rune "09" -> 529
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst529
		}
	}
	goto inst527_fail
	goto unreachable
	goto inst527_fail
inst527_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 501:
			goto inst501_alt
		case 502:
			goto inst502_alt
		case 503:
			goto inst503_alt
		case 509:
			goto inst509_alt
		case 510:
			goto inst510_alt
		case 511:
			goto inst511_alt
		case 512:
			goto inst512_alt
		case 513:
			goto inst513_alt
		case 526:
			goto inst526_alt
		case 576:
			goto inst576_alt
		}
	}
	goto fail

	goto unreachable
	goto inst519
inst519: // rune "09" -> 529
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst529
		}
	}
	goto inst519_fail
	goto unreachable
	goto inst519_fail
inst519_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 524:
			goto inst524_alt
		}
	}
	goto fail

	goto unreachable
	goto inst529
inst529: // string "." -> 543
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst543
		}
	}
	goto inst529_fail
	goto unreachable
	goto inst529_fail
inst529_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 501:
			goto inst501_alt
		case 502:
			goto inst502_alt
		case 503:
			goto inst503_alt
		case 509:
			goto inst509_alt
		case 510:
			goto inst510_alt
		case 511:
			goto inst511_alt
		case 512:
			goto inst512_alt
		case 513:
			goto inst513_alt
		case 520:
			goto inst520_alt
		case 524:
			goto inst524_alt
		case 526:
			goto inst526_alt
		case 528:
			goto inst528_alt
		case 576:
			goto inst576_alt
		}
	}
	goto fail

	goto unreachable
	goto inst521
inst521: // string "1" -> 522
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst522
		}
	}
	goto inst521_fail
	goto unreachable
	goto inst521_fail
inst521_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 528:
			goto inst528_alt
		}
	}
	goto fail

	goto unreachable
	goto inst522
inst522: // rune "09" -> 523
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst523
		}
	}
	goto inst522_fail
	goto unreachable
	goto inst522_fail
inst522_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 528:
			goto inst528_alt
		}
	}
	goto fail

	goto unreachable
	goto inst523
inst523: // rune "09" -> 529
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst529
		}
	}
	goto inst523_fail
	goto unreachable
	goto inst523_fail
inst523_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 528:
			goto inst528_alt
		}
	}
	goto fail

	goto unreachable
	goto inst533
inst533: // rune "04" -> 534
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst534
		}
	}
	goto inst533_fail
	goto unreachable
	goto inst533_fail
inst533_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 539:
			goto inst539_alt
		}
	}
	goto fail

	goto unreachable
	goto inst535
inst535: // alt -> 531, 533
	{
		idx := i*389 + 188
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 535, 0})
	goto inst531
inst535_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst533
	}
	goto unreachable

	goto unreachable
	goto inst534
inst534: // rune "09" -> 544
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst544
		}
	}
	goto inst534_fail
	goto unreachable
	goto inst534_fail
inst534_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 539:
			goto inst539_alt
		}
	}
	goto fail

	goto unreachable
	goto inst530
inst530: // string "2" -> 535
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst535
		}
	}
	goto inst530_fail
	goto unreachable
	goto inst530_fail
inst530_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 539:
			goto inst539_alt
		}
	}
	goto fail

	goto unreachable
	goto inst531
inst531: // string "5" -> 532
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst532
		}
	}
	goto inst531_fail
	goto unreachable
	goto inst531_fail
inst531_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 535:
			goto inst535_alt
		}
	}
	goto fail

	goto unreachable
	goto inst537
inst537: // rune "09" -> 538
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst538
		}
	}
	goto inst537_fail
	goto unreachable
	goto inst537_fail
inst537_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 543:
			goto inst543_alt
		}
	}
	goto fail

	goto unreachable
	goto inst532
inst532: // rune "05" -> 544
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst544
		}
	}
	goto inst532_fail
	goto unreachable
	goto inst532_fail
inst532_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 535:
			goto inst535_alt
		}
	}
	goto fail

	goto unreachable
	goto inst538
inst538: // rune "09" -> 544
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst544
		}
	}
	goto inst538_fail
	goto unreachable
	goto inst538_fail
inst538_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 543:
			goto inst543_alt
		}
	}
	goto fail

	goto unreachable
	goto inst536
inst536: // string "1" -> 537
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst537
		}
	}
	goto inst536_fail
	goto unreachable
	goto inst536_fail
inst536_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 543:
			goto inst543_alt
		}
	}
	goto fail

	goto unreachable
	goto inst539
inst539: // alt -> 530, 536
	{
		idx := i*389 + 189
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 539, 0})
	goto inst530
inst539_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst536
	}
	goto unreachable

	goto unreachable
	goto inst540
inst540: // rune "19" -> 542
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst542
		}
	}
	goto inst540_fail
	goto unreachable
	goto inst540_fail
inst540_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 541:
			goto inst541_alt
		}
	}
	goto fail

	goto unreachable
	goto inst541
inst541: // alt -> 540, 542
	{
		idx := i*389 + 190
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 541, 0})
	goto inst540
inst541_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst542
	}
	goto unreachable

	goto unreachable
	goto inst542
inst542: // rune "09" -> 544
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst544
		}
	}
	goto inst542_fail
	goto unreachable
	goto inst542_fail
inst542_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 501:
			goto inst501_alt
		case 502:
			goto inst502_alt
		case 503:
			goto inst503_alt
		case 509:
			goto inst509_alt
		case 510:
			goto inst510_alt
		case 511:
			goto inst511_alt
		case 512:
			goto inst512_alt
		case 513:
			goto inst513_alt
		case 520:
			goto inst520_alt
		case 524:
			goto inst524_alt
		case 526:
			goto inst526_alt
		case 528:
			goto inst528_alt
		case 541:
			goto inst541_alt
		case 576:
			goto inst576_alt
		}
	}
	goto fail

	goto unreachable
	goto inst543
inst543: // alt -> 539, 541
	{
		idx := i*389 + 191
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 543, 0})
	goto inst539
inst543_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst541
	}
	goto unreachable

	goto unreachable
	goto inst544
inst544: // string "." -> 558
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst558
		}
	}
	goto inst544_fail
	goto unreachable
	goto inst544_fail
inst544_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 501:
			goto inst501_alt
		case 502:
			goto inst502_alt
		case 503:
			goto inst503_alt
		case 509:
			goto inst509_alt
		case 510:
			goto inst510_alt
		case 511:
			goto inst511_alt
		case 512:
			goto inst512_alt
		case 513:
			goto inst513_alt
		case 520:
			goto inst520_alt
		case 524:
			goto inst524_alt
		case 526:
			goto inst526_alt
		case 528:
			goto inst528_alt
		case 535:
			goto inst535_alt
		case 539:
			goto inst539_alt
		case 541:
			goto inst541_alt
		case 543:
			goto inst543_alt
		case 576:
			goto inst576_alt
		}
	}
	goto fail

	goto unreachable
	goto inst545
inst545: // string "2" -> 550
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst550
		}
	}
	goto inst545_fail
	goto unreachable
	goto inst545_fail
inst545_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 554:
			goto inst554_alt
		}
	}
	goto fail

	goto unreachable
	goto inst546
inst546: // string "5" -> 547
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst547
		}
	}
	goto inst546_fail
	goto unreachable
	goto inst546_fail
inst546_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 550:
			goto inst550_alt
		}
	}
	goto fail

	goto unreachable
	goto inst547
inst547: // rune "05" -> 559
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst559
		}
	}
	goto inst547_fail
	goto unreachable
	goto inst547_fail
inst547_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 550:
			goto inst550_alt
		}
	}
	goto fail

	goto unreachable
	goto inst548
inst548: // rune "04" -> 549
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst549
		}
	}
	goto inst548_fail
	goto unreachable
	goto inst548_fail
inst548_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 554:
			goto inst554_alt
		}
	}
	goto fail

	goto unreachable
	goto inst549
inst549: // rune "09" -> 559
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst559
		}
	}
	goto inst549_fail
	goto unreachable
	goto inst549_fail
inst549_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 554:
			goto inst554_alt
		}
	}
	goto fail

	goto unreachable
	goto inst550
inst550: // alt -> 546, 548
	{
		idx := i*389 + 192
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 550, 0})
	goto inst546
inst550_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst548
	}
	goto unreachable

	goto unreachable
	goto inst551
inst551: // string "1" -> 552
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst552
		}
	}
	goto inst551_fail
	goto unreachable
	goto inst551_fail
inst551_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 558:
			goto inst558_alt
		}
	}
	goto fail

	goto unreachable
	goto inst552
inst552: // rune "09" -> 553
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst553
		}
	}
	goto inst552_fail
	goto unreachable
	goto inst552_fail
inst552_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 558:
			goto inst558_alt
		}
	}
	goto fail

	goto unreachable
	goto inst553
inst553: // rune "09" -> 559
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst559
		}
	}
	goto inst553_fail
	goto unreachable
	goto inst553_fail
inst553_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 558:
			goto inst558_alt
		}
	}
	goto fail

	goto unreachable
	goto inst554
inst554: // alt -> 545, 551
	{
		idx := i*389 + 193
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 554, 0})
	goto inst545
inst554_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst551
	}
	goto unreachable

	goto unreachable
	goto inst555
inst555: // rune "19" -> 557
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst557
		}
	}
	goto inst555_fail
	goto unreachable
	goto inst555_fail
inst555_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 556:
			goto inst556_alt
		}
	}
	goto fail

	goto unreachable
	goto inst556
inst556: // alt -> 555, 557
	{
		idx := i*389 + 194
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 556, 0})
	goto inst555
inst556_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst557
	}
	goto unreachable

	goto unreachable
	goto inst557
inst557: // rune "09" -> 559
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst559
		}
	}
	goto inst557_fail
	goto unreachable
	goto inst557_fail
inst557_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 501:
			goto inst501_alt
		case 502:
			goto inst502_alt
		case 503:
			goto inst503_alt
		case 509:
			goto inst509_alt
		case 510:
			goto inst510_alt
		case 511:
			goto inst511_alt
		case 512:
			goto inst512_alt
		case 513:
			goto inst513_alt
		case 520:
			goto inst520_alt
		case 524:
			goto inst524_alt
		case 526:
			goto inst526_alt
		case 528:
			goto inst528_alt
		case 535:
			goto inst535_alt
		case 539:
			goto inst539_alt
		case 541:
			goto inst541_alt
		case 543:
			goto inst543_alt
		case 556:
			goto inst556_alt
		case 576:
			goto inst576_alt
		}
	}
	goto fail

	goto unreachable
	goto inst558
inst558: // alt -> 554, 556
	{
		idx := i*389 + 195
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 558, 0})
	goto inst554
inst558_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst556
	}
	goto unreachable

	goto unreachable
	goto inst559
inst559: // string "." -> 573
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst573
		}
	}
	goto inst559_fail
	goto unreachable
	goto inst559_fail
inst559_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 501:
			goto inst501_alt
		case 502:
			goto inst502_alt
		case 503:
			goto inst503_alt
		case 509:
			goto inst509_alt
		case 510:
			goto inst510_alt
		case 511:
			goto inst511_alt
		case 512:
			goto inst512_alt
		case 513:
			goto inst513_alt
		case 520:
			goto inst520_alt
		case 524:
			goto inst524_alt
		case 526:
			goto inst526_alt
		case 528:
			goto inst528_alt
		case 535:
			goto inst535_alt
		case 539:
			goto inst539_alt
		case 541:
			goto inst541_alt
		case 543:
			goto inst543_alt
		case 550:
			goto inst550_alt
		case 554:
			goto inst554_alt
		case 556:
			goto inst556_alt
		case 558:
			goto inst558_alt
		case 576:
			goto inst576_alt
		}
	}
	goto fail

	goto unreachable
	goto inst560
inst560: // string "2" -> 565
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst565
		}
	}
	goto inst560_fail
	goto unreachable
	goto inst560_fail
inst560_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 569:
			goto inst569_alt
		}
	}
	goto fail

	goto unreachable
	goto inst561
inst561: // string "5" -> 562
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst562
		}
	}
	goto inst561_fail
	goto unreachable
	goto inst561_fail
inst561_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 565:
			goto inst565_alt
		}
	}
	goto fail

	goto unreachable
	goto inst562
inst562: // rune "05" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1065
		}
	}
	goto inst562_fail
	goto unreachable
	goto inst562_fail
inst562_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 565:
			goto inst565_alt
		}
	}
	goto fail

	goto unreachable
	goto inst563
inst563: // rune "04" -> 564
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst564
		}
	}
	goto inst563_fail
	goto unreachable
	goto inst563_fail
inst563_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 569:
			goto inst569_alt
		}
	}
	goto fail

	goto unreachable
	goto inst564
inst564: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst564_fail
	goto unreachable
	goto inst564_fail
inst564_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 569:
			goto inst569_alt
		}
	}
	goto fail

	goto unreachable
	goto inst565
inst565: // alt -> 561, 563
	{
		idx := i*389 + 196
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 565, 0})
	goto inst561
inst565_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst563
	}
	goto unreachable

	goto unreachable
	goto inst566
inst566: // string "1" -> 567
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst567
		}
	}
	goto inst566_fail
	goto unreachable
	goto inst566_fail
inst566_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 573:
			goto inst573_alt
		}
	}
	goto fail

	goto unreachable
	goto inst567
inst567: // rune "09" -> 568
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst568
		}
	}
	goto inst567_fail
	goto unreachable
	goto inst567_fail
inst567_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 573:
			goto inst573_alt
		}
	}
	goto fail

	goto unreachable
	goto inst568
inst568: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst568_fail
	goto unreachable
	goto inst568_fail
inst568_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 573:
			goto inst573_alt
		}
	}
	goto fail

	goto unreachable
	goto inst569
inst569: // alt -> 560, 566
	{
		idx := i*389 + 197
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 569, 0})
	goto inst560
inst569_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst566
	}
	goto unreachable

	goto unreachable
	goto inst570
inst570: // rune "19" -> 572
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst572
		}
	}
	goto inst570_fail
	goto unreachable
	goto inst570_fail
inst570_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 571:
			goto inst571_alt
		}
	}
	goto fail

	goto unreachable
	goto inst571
inst571: // alt -> 570, 572
	{
		idx := i*389 + 198
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 571, 0})
	goto inst570
inst571_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst572
	}
	goto unreachable

	goto unreachable
	goto inst572
inst572: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst572_fail
	goto unreachable
	goto inst572_fail
inst572_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 501:
			goto inst501_alt
		case 502:
			goto inst502_alt
		case 503:
			goto inst503_alt
		case 509:
			goto inst509_alt
		case 510:
			goto inst510_alt
		case 511:
			goto inst511_alt
		case 512:
			goto inst512_alt
		case 513:
			goto inst513_alt
		case 520:
			goto inst520_alt
		case 524:
			goto inst524_alt
		case 526:
			goto inst526_alt
		case 528:
			goto inst528_alt
		case 535:
			goto inst535_alt
		case 539:
			goto inst539_alt
		case 541:
			goto inst541_alt
		case 543:
			goto inst543_alt
		case 550:
			goto inst550_alt
		case 554:
			goto inst554_alt
		case 556:
			goto inst556_alt
		case 558:
			goto inst558_alt
		case 571:
			goto inst571_alt
		case 576:
			goto inst576_alt
		}
	}
	goto fail

	goto unreachable
	goto inst573
inst573: // alt -> 569, 571
	{
		idx := i*389 + 199
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 573, 0})
	goto inst569
inst573_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst571
	}
	goto unreachable

	goto unreachable
	goto inst490
inst490: // alt -> 489, 1065
	{
		idx := i*389 + 200
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 490, 0})
	goto inst489
inst490_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst489
inst489: // rune "09AFaf" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1065
			}
			goto inst489_fail
		}
	}
	goto inst489_fail
	goto unreachable
	goto inst489_fail
inst489_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 490:
			goto inst490_alt
		}
	}
	goto fail

	goto unreachable
	goto inst583
inst583: // alt -> 580, 585
	{
		idx := i*389 + 201
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 583, 0})
	goto inst580
inst583_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst585
	}
	goto unreachable

	goto unreachable
	goto inst580
inst580: // rune "09AFaf" -> 582
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst582
			}
			goto inst580_fail
		}
	}
	goto inst580_fail
	goto unreachable
	goto inst580_fail
inst580_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 583:
			goto inst583_alt
		}
	}
	goto fail

	goto unreachable
	goto inst582
inst582: // alt -> 581, 585
	{
		idx := i*389 + 202
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 582, 0})
	goto inst581
inst582_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst585
	}
	goto unreachable

	goto unreachable
	goto inst581
inst581: // rune "09AFaf" -> 585
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst585
			}
			goto inst581_fail
		}
	}
	goto inst581_fail
	goto unreachable
	goto inst581_fail
inst581_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 582:
			goto inst582_alt
		}
	}
	goto fail

	goto unreachable
	goto inst585
inst585: // string ":" -> 586
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst586
		}
	}
	goto inst585_fail
	goto unreachable
	goto inst585_fail
inst585_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 582:
			goto inst582_alt
		case 583:
			goto inst583_alt
		case 584:
			goto inst584_alt
		case 889:
			goto inst889_alt
		}
	}
	goto fail

	goto unreachable
	goto inst586
inst586: // rune "09AFaf" -> 592
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst592
			}
			goto inst586_fail
		}
	}
	goto inst586_fail
	goto unreachable
	goto inst586_fail
inst586_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 582:
			goto inst582_alt
		case 583:
			goto inst583_alt
		case 584:
			goto inst584_alt
		case 889:
			goto inst889_alt
		}
	}
	goto fail

	goto unreachable
	goto inst119
inst119: // alt -> 118, 1065
	{
		idx := i*389 + 203
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 119, 0})
	goto inst118
inst119_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst118
inst118: // rune "09AFaf" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1065
			}
			goto inst118_fail
		}
	}
	goto inst118_fail
	goto unreachable
	goto inst118_fail
inst118_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 119:
			goto inst119_alt
		}
	}
	goto fail

	goto unreachable
	goto inst592
inst592: // alt -> 587, 593
	{
		idx := i*389 + 204
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 592, 0})
	goto inst587
inst592_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst593
	}
	goto unreachable

	goto unreachable
	goto inst587
inst587: // rune "09AFaf" -> 591
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst591
			}
			goto inst587_fail
		}
	}
	goto inst587_fail
	goto unreachable
	goto inst587_fail
inst587_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 592:
			goto inst592_alt
		}
	}
	goto fail

	goto unreachable
	goto inst588
inst588: // rune "09AFaf" -> 590
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst590
			}
			goto inst588_fail
		}
	}
	goto inst588_fail
	goto unreachable
	goto inst588_fail
inst588_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 591:
			goto inst591_alt
		}
	}
	goto fail

	goto unreachable
	goto inst590
inst590: // alt -> 589, 593
	{
		idx := i*389 + 205
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 590, 0})
	goto inst589
inst590_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst593
	}
	goto unreachable

	goto unreachable
	goto inst589
inst589: // rune "09AFaf" -> 593
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst593
			}
			goto inst589_fail
		}
	}
	goto inst589_fail
	goto unreachable
	goto inst589_fail
inst589_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 590:
			goto inst590_alt
		}
	}
	goto fail

	goto unreachable
	goto inst591
inst591: // alt -> 588, 593
	{
		idx := i*389 + 206
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 591, 0})
	goto inst588
inst591_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst593
	}
	goto unreachable

	goto unreachable
	goto inst593
inst593: // string ":" -> 727
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst727
		}
	}
	goto inst593_fail
	goto unreachable
	goto inst593_fail
inst593_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 582:
			goto inst582_alt
		case 583:
			goto inst583_alt
		case 584:
			goto inst584_alt
		case 590:
			goto inst590_alt
		case 591:
			goto inst591_alt
		case 592:
			goto inst592_alt
		case 889:
			goto inst889_alt
		}
	}
	goto fail

	goto unreachable
	goto inst61
inst61: // alt -> 60, 1065
	{
		idx := i*389 + 207
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 61, 0})
	goto inst60
inst61_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst60
inst60: // rune "09AFaf" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1065
			}
			goto inst60_fail
		}
	}
	goto inst60_fail
	goto unreachable
	goto inst60_fail
inst60_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 61:
			goto inst61_alt
		}
	}
	goto fail

	goto unreachable
	goto inst597
inst597: // rune "09AFaf" -> 599
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst599
			}
			goto inst597_fail
		}
	}
	goto inst597_fail
	goto unreachable
	goto inst597_fail
inst597_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 600:
			goto inst600_alt
		}
	}
	goto fail

	goto unreachable
	goto inst604
inst604: // rune "09AFaf" -> 608
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst608
			}
			goto inst604_fail
		}
	}
	goto inst604_fail
	goto unreachable
	goto inst604_fail
inst604_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 609:
			goto inst609_alt
		}
	}
	goto fail

	goto unreachable
	goto inst637
inst637: // alt -> 602, 1065
	{
		idx := i*389 + 208
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 637, 0})
	goto inst602
inst637_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst598
inst598: // rune "09AFaf" -> 637
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst637
			}
			goto inst598_fail
		}
	}
	goto inst598_fail
	goto unreachable
	goto inst598_fail
inst598_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 599:
			goto inst599_alt
		}
	}
	goto fail

	goto unreachable
	goto inst599
inst599: // alt -> 598, 637
	{
		idx := i*389 + 209
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 599, 0})
	goto inst598
inst599_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst637
	}
	goto unreachable

	goto unreachable
	goto inst602
inst602: // string ":" -> 603
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst603
		}
	}
	goto inst602_fail
	goto unreachable
	goto inst602_fail
inst602_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 637:
			goto inst637_alt
		}
	}
	goto fail

	goto unreachable
	goto inst605
inst605: // rune "09AFaf" -> 607
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst607
			}
			goto inst605_fail
		}
	}
	goto inst605_fail
	goto unreachable
	goto inst605_fail
inst605_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 608:
			goto inst608_alt
		}
	}
	goto fail

	goto unreachable
	goto inst607
inst607: // alt -> 606, 636
	{
		idx := i*389 + 210
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 607, 0})
	goto inst606
inst607_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst636
	}
	goto unreachable

	goto unreachable
	goto inst608
inst608: // alt -> 605, 636
	{
		idx := i*389 + 211
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 608, 0})
	goto inst605
inst608_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst636
	}
	goto unreachable

	goto unreachable
	goto inst606
inst606: // rune "09AFaf" -> 636
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst636
			}
			goto inst606_fail
		}
	}
	goto inst606_fail
	goto unreachable
	goto inst606_fail
inst606_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 607:
			goto inst607_alt
		}
	}
	goto fail

	goto unreachable
	goto inst603
inst603: // rune "09AFaf" -> 609
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst609
			}
			goto inst603_fail
		}
	}
	goto inst603_fail
	goto unreachable
	goto inst603_fail
inst603_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 637:
			goto inst637_alt
		}
	}
	goto fail

	goto unreachable
	goto inst609
inst609: // alt -> 604, 636
	{
		idx := i*389 + 212
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 609, 0})
	goto inst604
inst609_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst636
	}
	goto unreachable

	goto unreachable
	goto inst1065
inst1065: // alt -> 1062, 1067
	{
		idx := i*389 + 213
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1065, 0})
	goto inst1062
inst1065_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1067
	}
	goto unreachable

	goto unreachable
	goto inst636
inst636: // alt -> 610, 1065
	{
		idx := i*389 + 214
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 636, 0})
	goto inst610
inst636_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst610
inst610: // string ":" -> 611
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst611
		}
	}
	goto inst610_fail
	goto unreachable
	goto inst610_fail
inst610_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 636:
			goto inst636_alt
		}
	}
	goto fail

	goto unreachable
	goto inst611
inst611: // rune "09AFaf" -> 617
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst617
			}
			goto inst611_fail
		}
	}
	goto inst611_fail
	goto unreachable
	goto inst611_fail
inst611_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 636:
			goto inst636_alt
		}
	}
	goto fail

	goto unreachable
	goto inst612
inst612: // rune "09AFaf" -> 616
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst616
			}
			goto inst612_fail
		}
	}
	goto inst612_fail
	goto unreachable
	goto inst612_fail
inst612_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 617:
			goto inst617_alt
		}
	}
	goto fail

	goto unreachable
	goto inst613
inst613: // rune "09AFaf" -> 615
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst615
			}
			goto inst613_fail
		}
	}
	goto inst613_fail
	goto unreachable
	goto inst613_fail
inst613_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 616:
			goto inst616_alt
		}
	}
	goto fail

	goto unreachable
	goto inst615
inst615: // alt -> 614, 635
	{
		idx := i*389 + 215
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 615, 0})
	goto inst614
inst615_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst635
	}
	goto unreachable

	goto unreachable
	goto inst614
inst614: // rune "09AFaf" -> 635
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst635
			}
			goto inst614_fail
		}
	}
	goto inst614_fail
	goto unreachable
	goto inst614_fail
inst614_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 615:
			goto inst615_alt
		}
	}
	goto fail

	goto unreachable
	goto inst616
inst616: // alt -> 613, 635
	{
		idx := i*389 + 216
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 616, 0})
	goto inst613
inst616_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst635
	}
	goto unreachable

	goto unreachable
	goto inst635
inst635: // alt -> 618, 1065
	{
		idx := i*389 + 217
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 635, 0})
	goto inst618
inst635_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst617
inst617: // alt -> 612, 635
	{
		idx := i*389 + 218
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 617, 0})
	goto inst612
inst617_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst635
	}
	goto unreachable

	goto unreachable
	goto inst618
inst618: // string ":" -> 619
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst619
		}
	}
	goto inst618_fail
	goto unreachable
	goto inst618_fail
inst618_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 635:
			goto inst635_alt
		}
	}
	goto fail

	goto unreachable
	goto inst619
inst619: // rune "09AFaf" -> 625
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst625
			}
			goto inst619_fail
		}
	}
	goto inst619_fail
	goto unreachable
	goto inst619_fail
inst619_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 635:
			goto inst635_alt
		}
	}
	goto fail

	goto unreachable
	goto inst620
inst620: // rune "09AFaf" -> 624
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst624
			}
			goto inst620_fail
		}
	}
	goto inst620_fail
	goto unreachable
	goto inst620_fail
inst620_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 625:
			goto inst625_alt
		}
	}
	goto fail

	goto unreachable
	goto inst621
inst621: // rune "09AFaf" -> 623
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst623
			}
			goto inst621_fail
		}
	}
	goto inst621_fail
	goto unreachable
	goto inst621_fail
inst621_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 624:
			goto inst624_alt
		}
	}
	goto fail

	goto unreachable
	goto inst622
inst622: // rune "09AFaf" -> 634
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst634
			}
			goto inst622_fail
		}
	}
	goto inst622_fail
	goto unreachable
	goto inst622_fail
inst622_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 623:
			goto inst623_alt
		}
	}
	goto fail

	goto unreachable
	goto inst623
inst623: // alt -> 622, 634
	{
		idx := i*389 + 219
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 623, 0})
	goto inst622
inst623_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst634
	}
	goto unreachable

	goto unreachable
	goto inst624
inst624: // alt -> 621, 634
	{
		idx := i*389 + 220
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 624, 0})
	goto inst621
inst624_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst634
	}
	goto unreachable

	goto unreachable
	goto inst625
inst625: // alt -> 620, 634
	{
		idx := i*389 + 221
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 625, 0})
	goto inst620
inst625_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst634
	}
	goto unreachable

	goto unreachable
	goto inst634
inst634: // alt -> 626, 1065
	{
		idx := i*389 + 222
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 634, 0})
	goto inst626
inst634_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst626
inst626: // string ":" -> 627
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst627
		}
	}
	goto inst626_fail
	goto unreachable
	goto inst626_fail
inst626_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 634:
			goto inst634_alt
		}
	}
	goto fail

	goto unreachable
	goto inst627
inst627: // rune "09AFaf" -> 633
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst633
			}
			goto inst627_fail
		}
	}
	goto inst627_fail
	goto unreachable
	goto inst627_fail
inst627_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 634:
			goto inst634_alt
		}
	}
	goto fail

	goto unreachable
	goto inst628
inst628: // rune "09AFaf" -> 632
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst632
			}
			goto inst628_fail
		}
	}
	goto inst628_fail
	goto unreachable
	goto inst628_fail
inst628_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 633:
			goto inst633_alt
		}
	}
	goto fail

	goto unreachable
	goto inst629
inst629: // rune "09AFaf" -> 631
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst631
			}
			goto inst629_fail
		}
	}
	goto inst629_fail
	goto unreachable
	goto inst629_fail
inst629_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 632:
			goto inst632_alt
		}
	}
	goto fail

	goto unreachable
	goto inst630
inst630: // rune "09AFaf" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1065
			}
			goto inst630_fail
		}
	}
	goto inst630_fail
	goto unreachable
	goto inst630_fail
inst630_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 631:
			goto inst631_alt
		}
	}
	goto fail

	goto unreachable
	goto inst631
inst631: // alt -> 630, 1065
	{
		idx := i*389 + 223
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 631, 0})
	goto inst630
inst631_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst632
inst632: // alt -> 629, 1065
	{
		idx := i*389 + 224
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 632, 0})
	goto inst629
inst632_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst633
inst633: // alt -> 628, 1065
	{
		idx := i*389 + 225
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 633, 0})
	goto inst628
inst633_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst600
inst600: // alt -> 597, 637
	{
		idx := i*389 + 226
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 600, 0})
	goto inst597
inst600_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst637
	}
	goto unreachable

	goto unreachable
	goto inst596
inst596: // rune "09AFaf" -> 600
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst600
			}
			goto inst596_fail
		}
	}
	goto inst596_fail
	goto unreachable
	goto inst596_fail
inst596_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 601:
			goto inst601_alt
		}
	}
	goto fail

	goto unreachable
	goto inst638
inst638: // string ":" -> 639
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst639
		}
	}
	goto inst638_fail
	goto unreachable
	goto inst638_fail
inst638_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 664:
			goto inst664_alt
		}
	}
	goto fail

	goto unreachable
	goto inst579
inst579: // rune "09AFaf" -> 583
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst583
			}
			goto inst579_fail
		}
	}
	goto inst579_fail
	goto unreachable
	goto inst579_fail
inst579_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 584:
			goto inst584_alt
		}
	}
	goto fail

	goto unreachable
	goto inst639
inst639: // rune "09AFaf" -> 645
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst645
			}
			goto inst639_fail
		}
	}
	goto inst639_fail
	goto unreachable
	goto inst639_fail
inst639_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 664:
			goto inst664_alt
		}
	}
	goto fail

	goto unreachable
	goto inst640
inst640: // rune "09AFaf" -> 644
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst644
			}
			goto inst640_fail
		}
	}
	goto inst640_fail
	goto unreachable
	goto inst640_fail
inst640_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 645:
			goto inst645_alt
		}
	}
	goto fail

	goto unreachable
	goto inst601
inst601: // alt -> 596, 637
	{
		idx := i*389 + 227
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 601, 0})
	goto inst596
inst601_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst637
	}
	goto unreachable

	goto unreachable
	goto inst666
inst666: // string "2" -> 671
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst671
		}
	}
	goto inst666_fail
	goto unreachable
	goto inst666_fail
inst666_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 675:
			goto inst675_alt
		}
	}
	goto fail

	goto unreachable
	goto inst641
inst641: // rune "09AFaf" -> 643
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst643
			}
			goto inst641_fail
		}
	}
	goto inst641_fail
	goto unreachable
	goto inst641_fail
inst641_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 644:
			goto inst644_alt
		}
	}
	goto fail

	goto unreachable
	goto inst642
inst642: // rune "09AFaf" -> 663
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst663
			}
			goto inst642_fail
		}
	}
	goto inst642_fail
	goto unreachable
	goto inst642_fail
inst642_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 643:
			goto inst643_alt
		}
	}
	goto fail

	goto unreachable
	goto inst643
inst643: // alt -> 642, 663
	{
		idx := i*389 + 228
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 643, 0})
	goto inst642
inst643_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst663
	}
	goto unreachable

	goto unreachable
	goto inst644
inst644: // alt -> 641, 663
	{
		idx := i*389 + 229
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 644, 0})
	goto inst641
inst644_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst663
	}
	goto unreachable

	goto unreachable
	goto inst646
inst646: // string ":" -> 647
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst647
		}
	}
	goto inst646_fail
	goto unreachable
	goto inst646_fail
inst646_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 663:
			goto inst663_alt
		}
	}
	goto fail

	goto unreachable
	goto inst647
inst647: // rune "09AFaf" -> 653
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst653
			}
			goto inst647_fail
		}
	}
	goto inst647_fail
	goto unreachable
	goto inst647_fail
inst647_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 663:
			goto inst663_alt
		}
	}
	goto fail

	goto unreachable
	goto inst648
inst648: // rune "09AFaf" -> 652
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst652
			}
			goto inst648_fail
		}
	}
	goto inst648_fail
	goto unreachable
	goto inst648_fail
inst648_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 653:
			goto inst653_alt
		}
	}
	goto fail

	goto unreachable
	goto inst649
inst649: // rune "09AFaf" -> 651
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst651
			}
			goto inst649_fail
		}
	}
	goto inst649_fail
	goto unreachable
	goto inst649_fail
inst649_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 652:
			goto inst652_alt
		}
	}
	goto fail

	goto unreachable
	goto inst650
inst650: // rune "09AFaf" -> 662
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst662
			}
			goto inst650_fail
		}
	}
	goto inst650_fail
	goto unreachable
	goto inst650_fail
inst650_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 651:
			goto inst651_alt
		}
	}
	goto fail

	goto unreachable
	goto inst651
inst651: // alt -> 650, 662
	{
		idx := i*389 + 230
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 651, 0})
	goto inst650
inst651_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst662
	}
	goto unreachable

	goto unreachable
	goto inst652
inst652: // alt -> 649, 662
	{
		idx := i*389 + 231
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 652, 0})
	goto inst649
inst652_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst662
	}
	goto unreachable

	goto unreachable
	goto inst653
inst653: // alt -> 648, 662
	{
		idx := i*389 + 232
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 653, 0})
	goto inst648
inst653_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst662
	}
	goto unreachable

	goto unreachable
	goto inst645
inst645: // alt -> 640, 663
	{
		idx := i*389 + 233
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 645, 0})
	goto inst640
inst645_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst663
	}
	goto unreachable

	goto unreachable
	goto inst655
inst655: // rune "09AFaf" -> 661
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst661
			}
			goto inst655_fail
		}
	}
	goto inst655_fail
	goto unreachable
	goto inst655_fail
inst655_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 662:
			goto inst662_alt
		}
	}
	goto fail

	goto unreachable
	goto inst656
inst656: // rune "09AFaf" -> 660
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst660
			}
			goto inst656_fail
		}
	}
	goto inst656_fail
	goto unreachable
	goto inst656_fail
inst656_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 661:
			goto inst661_alt
		}
	}
	goto fail

	goto unreachable
	goto inst654
inst654: // string ":" -> 655
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst655
		}
	}
	goto inst654_fail
	goto unreachable
	goto inst654_fail
inst654_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 662:
			goto inst662_alt
		}
	}
	goto fail

	goto unreachable
	goto inst658
inst658: // rune "09AFaf" -> 665
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst665
			}
			goto inst658_fail
		}
	}
	goto inst658_fail
	goto unreachable
	goto inst658_fail
inst658_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 659:
			goto inst659_alt
		}
	}
	goto fail

	goto unreachable
	goto inst657
inst657: // rune "09AFaf" -> 659
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst659
			}
			goto inst657_fail
		}
	}
	goto inst657_fail
	goto unreachable
	goto inst657_fail
inst657_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 660:
			goto inst660_alt
		}
	}
	goto fail

	goto unreachable
	goto inst659
inst659: // alt -> 658, 665
	{
		idx := i*389 + 234
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 659, 0})
	goto inst658
inst659_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst665
	}
	goto unreachable

	goto unreachable
	goto inst660
inst660: // alt -> 657, 665
	{
		idx := i*389 + 235
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 660, 0})
	goto inst657
inst660_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst665
	}
	goto unreachable

	goto unreachable
	goto inst661
inst661: // alt -> 656, 665
	{
		idx := i*389 + 236
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 661, 0})
	goto inst656
inst661_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst665
	}
	goto unreachable

	goto unreachable
	goto inst662
inst662: // alt -> 654, 665
	{
		idx := i*389 + 237
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 662, 0})
	goto inst654
inst662_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst665
	}
	goto unreachable

	goto unreachable
	goto inst663
inst663: // alt -> 646, 665
	{
		idx := i*389 + 238
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 663, 0})
	goto inst646
inst663_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst665
	}
	goto unreachable

	goto unreachable
	goto inst664
inst664: // alt -> 638, 665
	{
		idx := i*389 + 239
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 664, 0})
	goto inst638
inst664_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst665
	}
	goto unreachable

	goto unreachable
	goto inst665
inst665: // string ":" -> 679
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst679
		}
	}
	goto inst665_fail
	goto unreachable
	goto inst665_fail
inst665_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 643:
			goto inst643_alt
		case 644:
			goto inst644_alt
		case 645:
			goto inst645_alt
		case 651:
			goto inst651_alt
		case 652:
			goto inst652_alt
		case 653:
			goto inst653_alt
		case 659:
			goto inst659_alt
		case 660:
			goto inst660_alt
		case 661:
			goto inst661_alt
		case 662:
			goto inst662_alt
		case 663:
			goto inst663_alt
		case 664:
			goto inst664_alt
		case 727:
			goto inst727_alt
		}
	}
	goto fail

	goto unreachable
	goto inst667
inst667: // string "5" -> 668
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst668
		}
	}
	goto inst667_fail
	goto unreachable
	goto inst667_fail
inst667_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 671:
			goto inst671_alt
		}
	}
	goto fail

	goto unreachable
	goto inst668
inst668: // rune "05" -> 680
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst680
		}
	}
	goto inst668_fail
	goto unreachable
	goto inst668_fail
inst668_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 671:
			goto inst671_alt
		}
	}
	goto fail

	goto unreachable
	goto inst673
inst673: // rune "09" -> 674
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst674
		}
	}
	goto inst673_fail
	goto unreachable
	goto inst673_fail
inst673_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 679:
			goto inst679_alt
		}
	}
	goto fail

	goto unreachable
	goto inst669
inst669: // rune "04" -> 670
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst670
		}
	}
	goto inst669_fail
	goto unreachable
	goto inst669_fail
inst669_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 675:
			goto inst675_alt
		}
	}
	goto fail

	goto unreachable
	goto inst670
inst670: // rune "09" -> 680
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst680
		}
	}
	goto inst670_fail
	goto unreachable
	goto inst670_fail
inst670_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 675:
			goto inst675_alt
		}
	}
	goto fail

	goto unreachable
	goto inst671
inst671: // alt -> 667, 669
	{
		idx := i*389 + 240
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 671, 0})
	goto inst667
inst671_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst669
	}
	goto unreachable

	goto unreachable
	goto inst672
inst672: // string "1" -> 673
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst673
		}
	}
	goto inst672_fail
	goto unreachable
	goto inst672_fail
inst672_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 679:
			goto inst679_alt
		}
	}
	goto fail

	goto unreachable
	goto inst674
inst674: // rune "09" -> 680
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst680
		}
	}
	goto inst674_fail
	goto unreachable
	goto inst674_fail
inst674_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 679:
			goto inst679_alt
		}
	}
	goto fail

	goto unreachable
	goto inst677
inst677: // alt -> 676, 678
	{
		idx := i*389 + 241
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 677, 0})
	goto inst676
inst677_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst678
	}
	goto unreachable

	goto unreachable
	goto inst675
inst675: // alt -> 666, 672
	{
		idx := i*389 + 242
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 675, 0})
	goto inst666
inst675_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst672
	}
	goto unreachable

	goto unreachable
	goto inst676
inst676: // rune "19" -> 678
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst678
		}
	}
	goto inst676_fail
	goto unreachable
	goto inst676_fail
inst676_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 677:
			goto inst677_alt
		}
	}
	goto fail

	goto unreachable
	goto inst681
inst681: // string "2" -> 686
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst686
		}
	}
	goto inst681_fail
	goto unreachable
	goto inst681_fail
inst681_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 690:
			goto inst690_alt
		}
	}
	goto fail

	goto unreachable
	goto inst682
inst682: // string "5" -> 683
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst683
		}
	}
	goto inst682_fail
	goto unreachable
	goto inst682_fail
inst682_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 686:
			goto inst686_alt
		}
	}
	goto fail

	goto unreachable
	goto inst678
inst678: // rune "09" -> 680
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst680
		}
	}
	goto inst678_fail
	goto unreachable
	goto inst678_fail
inst678_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 643:
			goto inst643_alt
		case 644:
			goto inst644_alt
		case 645:
			goto inst645_alt
		case 651:
			goto inst651_alt
		case 652:
			goto inst652_alt
		case 653:
			goto inst653_alt
		case 659:
			goto inst659_alt
		case 660:
			goto inst660_alt
		case 661:
			goto inst661_alt
		case 662:
			goto inst662_alt
		case 663:
			goto inst663_alt
		case 664:
			goto inst664_alt
		case 677:
			goto inst677_alt
		case 727:
			goto inst727_alt
		}
	}
	goto fail

	goto unreachable
	goto inst679
inst679: // alt -> 675, 677
	{
		idx := i*389 + 243
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 679, 0})
	goto inst675
inst679_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst677
	}
	goto unreachable

	goto unreachable
	goto inst680
inst680: // string "." -> 694
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst694
		}
	}
	goto inst680_fail
	goto unreachable
	goto inst680_fail
inst680_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 643:
			goto inst643_alt
		case 644:
			goto inst644_alt
		case 645:
			goto inst645_alt
		case 651:
			goto inst651_alt
		case 652:
			goto inst652_alt
		case 653:
			goto inst653_alt
		case 659:
			goto inst659_alt
		case 660:
			goto inst660_alt
		case 661:
			goto inst661_alt
		case 662:
			goto inst662_alt
		case 663:
			goto inst663_alt
		case 664:
			goto inst664_alt
		case 671:
			goto inst671_alt
		case 675:
			goto inst675_alt
		case 677:
			goto inst677_alt
		case 679:
			goto inst679_alt
		case 727:
			goto inst727_alt
		}
	}
	goto fail

	goto unreachable
	goto inst683
inst683: // rune "05" -> 695
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst695
		}
	}
	goto inst683_fail
	goto unreachable
	goto inst683_fail
inst683_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 686:
			goto inst686_alt
		}
	}
	goto fail

	goto unreachable
	goto inst688
inst688: // rune "09" -> 689
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst689
		}
	}
	goto inst688_fail
	goto unreachable
	goto inst688_fail
inst688_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 694:
			goto inst694_alt
		}
	}
	goto fail

	goto unreachable
	goto inst684
inst684: // rune "04" -> 685
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst685
		}
	}
	goto inst684_fail
	goto unreachable
	goto inst684_fail
inst684_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 690:
			goto inst690_alt
		}
	}
	goto fail

	goto unreachable
	goto inst685
inst685: // rune "09" -> 695
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst695
		}
	}
	goto inst685_fail
	goto unreachable
	goto inst685_fail
inst685_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 690:
			goto inst690_alt
		}
	}
	goto fail

	goto unreachable
	goto inst686
inst686: // alt -> 682, 684
	{
		idx := i*389 + 244
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 686, 0})
	goto inst682
inst686_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst684
	}
	goto unreachable

	goto unreachable
	goto inst687
inst687: // string "1" -> 688
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst688
		}
	}
	goto inst687_fail
	goto unreachable
	goto inst687_fail
inst687_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 694:
			goto inst694_alt
		}
	}
	goto fail

	goto unreachable
	goto inst689
inst689: // rune "09" -> 695
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst695
		}
	}
	goto inst689_fail
	goto unreachable
	goto inst689_fail
inst689_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 694:
			goto inst694_alt
		}
	}
	goto fail

	goto unreachable
	goto inst692
inst692: // alt -> 691, 693
	{
		idx := i*389 + 245
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 692, 0})
	goto inst691
inst692_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst693
	}
	goto unreachable

	goto unreachable
	goto inst690
inst690: // alt -> 681, 687
	{
		idx := i*389 + 246
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 690, 0})
	goto inst681
inst690_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst687
	}
	goto unreachable

	goto unreachable
	goto inst691
inst691: // rune "19" -> 693
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst693
		}
	}
	goto inst691_fail
	goto unreachable
	goto inst691_fail
inst691_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 692:
			goto inst692_alt
		}
	}
	goto fail

	goto unreachable
	goto inst696
inst696: // string "2" -> 701
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst701
		}
	}
	goto inst696_fail
	goto unreachable
	goto inst696_fail
inst696_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 705:
			goto inst705_alt
		}
	}
	goto fail

	goto unreachable
	goto inst697
inst697: // string "5" -> 698
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst698
		}
	}
	goto inst697_fail
	goto unreachable
	goto inst697_fail
inst697_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 701:
			goto inst701_alt
		}
	}
	goto fail

	goto unreachable
	goto inst693
inst693: // rune "09" -> 695
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst695
		}
	}
	goto inst693_fail
	goto unreachable
	goto inst693_fail
inst693_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 643:
			goto inst643_alt
		case 644:
			goto inst644_alt
		case 645:
			goto inst645_alt
		case 651:
			goto inst651_alt
		case 652:
			goto inst652_alt
		case 653:
			goto inst653_alt
		case 659:
			goto inst659_alt
		case 660:
			goto inst660_alt
		case 661:
			goto inst661_alt
		case 662:
			goto inst662_alt
		case 663:
			goto inst663_alt
		case 664:
			goto inst664_alt
		case 671:
			goto inst671_alt
		case 675:
			goto inst675_alt
		case 677:
			goto inst677_alt
		case 679:
			goto inst679_alt
		case 692:
			goto inst692_alt
		case 727:
			goto inst727_alt
		}
	}
	goto fail

	goto unreachable
	goto inst694
inst694: // alt -> 690, 692
	{
		idx := i*389 + 247
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 694, 0})
	goto inst690
inst694_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst692
	}
	goto unreachable

	goto unreachable
	goto inst695
inst695: // string "." -> 709
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst709
		}
	}
	goto inst695_fail
	goto unreachable
	goto inst695_fail
inst695_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 643:
			goto inst643_alt
		case 644:
			goto inst644_alt
		case 645:
			goto inst645_alt
		case 651:
			goto inst651_alt
		case 652:
			goto inst652_alt
		case 653:
			goto inst653_alt
		case 659:
			goto inst659_alt
		case 660:
			goto inst660_alt
		case 661:
			goto inst661_alt
		case 662:
			goto inst662_alt
		case 663:
			goto inst663_alt
		case 664:
			goto inst664_alt
		case 671:
			goto inst671_alt
		case 675:
			goto inst675_alt
		case 677:
			goto inst677_alt
		case 679:
			goto inst679_alt
		case 686:
			goto inst686_alt
		case 690:
			goto inst690_alt
		case 692:
			goto inst692_alt
		case 694:
			goto inst694_alt
		case 727:
			goto inst727_alt
		}
	}
	goto fail

	goto unreachable
	goto inst705
inst705: // alt -> 696, 702
	{
		idx := i*389 + 248
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 705, 0})
	goto inst696
inst705_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst702
	}
	goto unreachable

	goto unreachable
	goto inst698
inst698: // rune "05" -> 710
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst710
		}
	}
	goto inst698_fail
	goto unreachable
	goto inst698_fail
inst698_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 701:
			goto inst701_alt
		}
	}
	goto fail

	goto unreachable
	goto inst699
inst699: // rune "04" -> 700
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst700
		}
	}
	goto inst699_fail
	goto unreachable
	goto inst699_fail
inst699_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 705:
			goto inst705_alt
		}
	}
	goto fail

	goto unreachable
	goto inst700
inst700: // rune "09" -> 710
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst710
		}
	}
	goto inst700_fail
	goto unreachable
	goto inst700_fail
inst700_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 705:
			goto inst705_alt
		}
	}
	goto fail

	goto unreachable
	goto inst701
inst701: // alt -> 697, 699
	{
		idx := i*389 + 249
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 701, 0})
	goto inst697
inst701_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst699
	}
	goto unreachable

	goto unreachable
	goto inst702
inst702: // string "1" -> 703
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst703
		}
	}
	goto inst702_fail
	goto unreachable
	goto inst702_fail
inst702_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 709:
			goto inst709_alt
		}
	}
	goto fail

	goto unreachable
	goto inst704
inst704: // rune "09" -> 710
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst710
		}
	}
	goto inst704_fail
	goto unreachable
	goto inst704_fail
inst704_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 709:
			goto inst709_alt
		}
	}
	goto fail

	goto unreachable
	goto inst707
inst707: // alt -> 706, 708
	{
		idx := i*389 + 250
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 707, 0})
	goto inst706
inst707_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst708
	}
	goto unreachable

	goto unreachable
	goto inst703
inst703: // rune "09" -> 704
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst704
		}
	}
	goto inst703_fail
	goto unreachable
	goto inst703_fail
inst703_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 709:
			goto inst709_alt
		}
	}
	goto fail

	goto unreachable
	goto inst706
inst706: // rune "19" -> 708
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst708
		}
	}
	goto inst706_fail
	goto unreachable
	goto inst706_fail
inst706_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 707:
			goto inst707_alt
		}
	}
	goto fail

	goto unreachable
	goto inst711
inst711: // string "2" -> 716
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst716
		}
	}
	goto inst711_fail
	goto unreachable
	goto inst711_fail
inst711_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 720:
			goto inst720_alt
		}
	}
	goto fail

	goto unreachable
	goto inst712
inst712: // string "5" -> 713
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst713
		}
	}
	goto inst712_fail
	goto unreachable
	goto inst712_fail
inst712_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 716:
			goto inst716_alt
		}
	}
	goto fail

	goto unreachable
	goto inst708
inst708: // rune "09" -> 710
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst710
		}
	}
	goto inst708_fail
	goto unreachable
	goto inst708_fail
inst708_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 643:
			goto inst643_alt
		case 644:
			goto inst644_alt
		case 645:
			goto inst645_alt
		case 651:
			goto inst651_alt
		case 652:
			goto inst652_alt
		case 653:
			goto inst653_alt
		case 659:
			goto inst659_alt
		case 660:
			goto inst660_alt
		case 661:
			goto inst661_alt
		case 662:
			goto inst662_alt
		case 663:
			goto inst663_alt
		case 664:
			goto inst664_alt
		case 671:
			goto inst671_alt
		case 675:
			goto inst675_alt
		case 677:
			goto inst677_alt
		case 679:
			goto inst679_alt
		case 686:
			goto inst686_alt
		case 690:
			goto inst690_alt
		case 692:
			goto inst692_alt
		case 694:
			goto inst694_alt
		case 707:
			goto inst707_alt
		case 727:
			goto inst727_alt
		}
	}
	goto fail

	goto unreachable
	goto inst709
inst709: // alt -> 705, 707
	{
		idx := i*389 + 251
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 709, 0})
	goto inst705
inst709_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst707
	}
	goto unreachable

	goto unreachable
	goto inst710
inst710: // string "." -> 724
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst724
		}
	}
	goto inst710_fail
	goto unreachable
	goto inst710_fail
inst710_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 643:
			goto inst643_alt
		case 644:
			goto inst644_alt
		case 645:
			goto inst645_alt
		case 651:
			goto inst651_alt
		case 652:
			goto inst652_alt
		case 653:
			goto inst653_alt
		case 659:
			goto inst659_alt
		case 660:
			goto inst660_alt
		case 661:
			goto inst661_alt
		case 662:
			goto inst662_alt
		case 663:
			goto inst663_alt
		case 664:
			goto inst664_alt
		case 671:
			goto inst671_alt
		case 675:
			goto inst675_alt
		case 677:
			goto inst677_alt
		case 679:
			goto inst679_alt
		case 686:
			goto inst686_alt
		case 690:
			goto inst690_alt
		case 692:
			goto inst692_alt
		case 694:
			goto inst694_alt
		case 701:
			goto inst701_alt
		case 705:
			goto inst705_alt
		case 707:
			goto inst707_alt
		case 709:
			goto inst709_alt
		case 727:
			goto inst727_alt
		}
	}
	goto fail

	goto unreachable
	goto inst713
inst713: // rune "05" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1065
		}
	}
	goto inst713_fail
	goto unreachable
	goto inst713_fail
inst713_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 716:
			goto inst716_alt
		}
	}
	goto fail

	goto unreachable
	goto inst718
inst718: // rune "09" -> 719
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst719
		}
	}
	goto inst718_fail
	goto unreachable
	goto inst718_fail
inst718_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 724:
			goto inst724_alt
		}
	}
	goto fail

	goto unreachable
	goto inst714
inst714: // rune "04" -> 715
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst715
		}
	}
	goto inst714_fail
	goto unreachable
	goto inst714_fail
inst714_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 720:
			goto inst720_alt
		}
	}
	goto fail

	goto unreachable
	goto inst715
inst715: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst715_fail
	goto unreachable
	goto inst715_fail
inst715_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 720:
			goto inst720_alt
		}
	}
	goto fail

	goto unreachable
	goto inst716
inst716: // alt -> 712, 714
	{
		idx := i*389 + 252
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 716, 0})
	goto inst712
inst716_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst714
	}
	goto unreachable

	goto unreachable
	goto inst717
inst717: // string "1" -> 718
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst718
		}
	}
	goto inst717_fail
	goto unreachable
	goto inst717_fail
inst717_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 724:
			goto inst724_alt
		}
	}
	goto fail

	goto unreachable
	goto inst719
inst719: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst719_fail
	goto unreachable
	goto inst719_fail
inst719_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 724:
			goto inst724_alt
		}
	}
	goto fail

	goto unreachable
	goto inst723
inst723: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst723_fail
	goto unreachable
	goto inst723_fail
inst723_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 643:
			goto inst643_alt
		case 644:
			goto inst644_alt
		case 645:
			goto inst645_alt
		case 651:
			goto inst651_alt
		case 652:
			goto inst652_alt
		case 653:
			goto inst653_alt
		case 659:
			goto inst659_alt
		case 660:
			goto inst660_alt
		case 661:
			goto inst661_alt
		case 662:
			goto inst662_alt
		case 663:
			goto inst663_alt
		case 664:
			goto inst664_alt
		case 671:
			goto inst671_alt
		case 675:
			goto inst675_alt
		case 677:
			goto inst677_alt
		case 679:
			goto inst679_alt
		case 686:
			goto inst686_alt
		case 690:
			goto inst690_alt
		case 692:
			goto inst692_alt
		case 694:
			goto inst694_alt
		case 701:
			goto inst701_alt
		case 705:
			goto inst705_alt
		case 707:
			goto inst707_alt
		case 709:
			goto inst709_alt
		case 722:
			goto inst722_alt
		case 727:
			goto inst727_alt
		}
	}
	goto fail

	goto unreachable
	goto inst720
inst720: // alt -> 711, 717
	{
		idx := i*389 + 253
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 720, 0})
	goto inst711
inst720_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst717
	}
	goto unreachable

	goto unreachable
	goto inst721
inst721: // rune "19" -> 723
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst723
		}
	}
	goto inst721_fail
	goto unreachable
	goto inst721_fail
inst721_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 722:
			goto inst722_alt
		}
	}
	goto fail

	goto unreachable
	goto inst726
inst726: // string ":" -> 1065
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1065
		}
	}
	goto inst726_fail
	goto unreachable
	goto inst726_fail
inst726_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 582:
			goto inst582_alt
		case 583:
			goto inst583_alt
		case 584:
			goto inst584_alt
		case 590:
			goto inst590_alt
		case 591:
			goto inst591_alt
		case 592:
			goto inst592_alt
		case 889:
			goto inst889_alt
		}
	}
	goto fail

	goto unreachable
	goto inst727
inst727: // alt -> 725, 726
	{
		idx := i*389 + 254
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 727, 0})
	goto inst725
inst727_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst726
	}
	goto unreachable

	goto unreachable
	goto inst722
inst722: // alt -> 721, 723
	{
		idx := i*389 + 255
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 722, 0})
	goto inst721
inst722_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst723
	}
	goto unreachable

	goto unreachable
	goto inst724
inst724: // alt -> 720, 722
	{
		idx := i*389 + 256
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 724, 0})
	goto inst720
inst724_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst722
	}
	goto unreachable

	goto unreachable
	goto inst725
inst725: // alt -> 594, 664
	{
		idx := i*389 + 257
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 725, 0})
	goto inst594
inst725_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst664
	}
	goto unreachable

	goto unreachable
	goto inst728
inst728: // alt -> 577, 578
	{
		idx := i*389 + 258
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 728, 0})
	goto inst577
inst728_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst578
	}
	goto unreachable

	goto unreachable
	goto inst595
inst595: // rune "09AFaf" -> 601
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst601
			}
			goto inst595_fail
		}
	}
	goto inst595_fail
	goto unreachable
	goto inst595_fail
inst595_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 725:
			goto inst725_alt
		}
	}
	goto fail

	goto unreachable
	goto inst739
inst739: // rune "09AFaf" -> 743
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst743
			}
			goto inst739_fail
		}
	}
	goto inst739_fail
	goto unreachable
	goto inst739_fail
inst739_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 744:
			goto inst744_alt
		}
	}
	goto fail

	goto unreachable
	goto inst781
inst781: // rune "09AFaf" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1065
			}
			goto inst781_fail
		}
	}
	goto inst781_fail
	goto unreachable
	goto inst781_fail
inst781_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 782:
			goto inst782_alt
		}
	}
	goto fail

	goto unreachable
	goto inst876
inst876: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst876_fail
	goto unreachable
	goto inst876_fail
inst876_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 881:
			goto inst881_alt
		}
	}
	goto fail

	goto unreachable
	goto inst732
inst732: // rune "09AFaf" -> 736
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst736
			}
			goto inst732_fail
		}
	}
	goto inst732_fail
	goto unreachable
	goto inst732_fail
inst732_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 733:
			goto inst733_alt
		}
	}
	goto fail

	goto unreachable
	goto inst733
inst733: // alt -> 732, 736
	{
		idx := i*389 + 259
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 733, 0})
	goto inst732
inst733_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst736
	}
	goto unreachable

	goto unreachable
	goto inst789
inst789: // alt -> 745, 1065
	{
		idx := i*389 + 260
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 789, 0})
	goto inst745
inst789_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst749
inst749: // rune "09AFaf" -> 788
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst788
			}
			goto inst749_fail
		}
	}
	goto inst749_fail
	goto unreachable
	goto inst749_fail
inst749_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 750:
			goto inst750_alt
		}
	}
	goto fail

	goto unreachable
	goto inst578
inst578: // rune "09AFaf" -> 584
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst584
			}
			goto inst578_fail
		}
	}
	goto inst578_fail
	goto unreachable
	goto inst578_fail
inst578_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 889:
			goto inst889_alt
		}
	}
	goto fail

	goto unreachable
	goto inst741
inst741: // rune "09AFaf" -> 789
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst789
			}
			goto inst741_fail
		}
	}
	goto inst741_fail
	goto unreachable
	goto inst741_fail
inst741_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 742:
			goto inst742_alt
		}
	}
	goto fail

	goto unreachable
	goto inst752
inst752: // alt -> 747, 788
	{
		idx := i*389 + 261
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 752, 0})
	goto inst747
inst752_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst788
	}
	goto unreachable

	goto unreachable
	goto inst594
inst594: // string ":" -> 595
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst595
		}
	}
	goto inst594_fail
	goto unreachable
	goto inst594_fail
inst594_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 725:
			goto inst725_alt
		}
	}
	goto fail

	goto unreachable
	goto inst740
inst740: // rune "09AFaf" -> 742
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst742
			}
			goto inst740_fail
		}
	}
	goto inst740_fail
	goto unreachable
	goto inst740_fail
inst740_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 743:
			goto inst743_alt
		}
	}
	goto fail

	goto unreachable
	goto inst584
inst584: // alt -> 579, 585
	{
		idx := i*389 + 262
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 584, 0})
	goto inst579
inst584_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst585
	}
	goto unreachable

	goto unreachable
	goto inst742
inst742: // alt -> 741, 789
	{
		idx := i*389 + 263
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 742, 0})
	goto inst741
inst742_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst789
	}
	goto unreachable

	goto unreachable
	goto inst788
inst788: // alt -> 753, 1065
	{
		idx := i*389 + 264
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 788, 0})
	goto inst753
inst788_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst744
inst744: // alt -> 739, 789
	{
		idx := i*389 + 265
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 744, 0})
	goto inst739
inst744_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst789
	}
	goto unreachable

	goto unreachable
	goto inst745
inst745: // string ":" -> 746
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst746
		}
	}
	goto inst745_fail
	goto unreachable
	goto inst745_fail
inst745_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 789:
			goto inst789_alt
		}
	}
	goto fail

	goto unreachable
	goto inst746
inst746: // rune "09AFaf" -> 752
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst752
			}
			goto inst746_fail
		}
	}
	goto inst746_fail
	goto unreachable
	goto inst746_fail
inst746_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 789:
			goto inst789_alt
		}
	}
	goto fail

	goto unreachable
	goto inst747
inst747: // rune "09AFaf" -> 751
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst751
			}
			goto inst747_fail
		}
	}
	goto inst747_fail
	goto unreachable
	goto inst747_fail
inst747_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 752:
			goto inst752_alt
		}
	}
	goto fail

	goto unreachable
	goto inst748
inst748: // rune "09AFaf" -> 750
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst750
			}
			goto inst748_fail
		}
	}
	goto inst748_fail
	goto unreachable
	goto inst748_fail
inst748_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 751:
			goto inst751_alt
		}
	}
	goto fail

	goto unreachable
	goto inst743
inst743: // alt -> 740, 789
	{
		idx := i*389 + 266
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 743, 0})
	goto inst740
inst743_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst789
	}
	goto unreachable

	goto unreachable
	goto inst750
inst750: // alt -> 749, 788
	{
		idx := i*389 + 267
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 750, 0})
	goto inst749
inst750_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst788
	}
	goto unreachable

	goto unreachable
	goto inst751
inst751: // alt -> 748, 788
	{
		idx := i*389 + 268
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 751, 0})
	goto inst748
inst751_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst788
	}
	goto unreachable

	goto unreachable
	goto inst753
inst753: // string ":" -> 754
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst754
		}
	}
	goto inst753_fail
	goto unreachable
	goto inst753_fail
inst753_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 788:
			goto inst788_alt
		}
	}
	goto fail

	goto unreachable
	goto inst787
inst787: // alt -> 761, 1065
	{
		idx := i*389 + 269
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 787, 0})
	goto inst761
inst787_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst755
inst755: // rune "09AFaf" -> 759
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst759
			}
			goto inst755_fail
		}
	}
	goto inst755_fail
	goto unreachable
	goto inst755_fail
inst755_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 760:
			goto inst760_alt
		}
	}
	goto fail

	goto unreachable
	goto inst756
inst756: // rune "09AFaf" -> 758
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst758
			}
			goto inst756_fail
		}
	}
	goto inst756_fail
	goto unreachable
	goto inst756_fail
inst756_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 759:
			goto inst759_alt
		}
	}
	goto fail

	goto unreachable
	goto inst757
inst757: // rune "09AFaf" -> 787
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst787
			}
			goto inst757_fail
		}
	}
	goto inst757_fail
	goto unreachable
	goto inst757_fail
inst757_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 758:
			goto inst758_alt
		}
	}
	goto fail

	goto unreachable
	goto inst758
inst758: // alt -> 757, 787
	{
		idx := i*389 + 270
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 758, 0})
	goto inst757
inst758_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst787
	}
	goto unreachable

	goto unreachable
	goto inst759
inst759: // alt -> 756, 787
	{
		idx := i*389 + 271
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 759, 0})
	goto inst756
inst759_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst787
	}
	goto unreachable

	goto unreachable
	goto inst760
inst760: // alt -> 755, 787
	{
		idx := i*389 + 272
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 760, 0})
	goto inst755
inst760_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst787
	}
	goto unreachable

	goto unreachable
	goto inst761
inst761: // string ":" -> 762
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst762
		}
	}
	goto inst761_fail
	goto unreachable
	goto inst761_fail
inst761_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 787:
			goto inst787_alt
		}
	}
	goto fail

	goto unreachable
	goto inst762
inst762: // rune "09AFaf" -> 768
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst768
			}
			goto inst762_fail
		}
	}
	goto inst762_fail
	goto unreachable
	goto inst762_fail
inst762_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 787:
			goto inst787_alt
		}
	}
	goto fail

	goto unreachable
	goto inst763
inst763: // rune "09AFaf" -> 767
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst767
			}
			goto inst763_fail
		}
	}
	goto inst763_fail
	goto unreachable
	goto inst763_fail
inst763_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 768:
			goto inst768_alt
		}
	}
	goto fail

	goto unreachable
	goto inst764
inst764: // rune "09AFaf" -> 766
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst766
			}
			goto inst764_fail
		}
	}
	goto inst764_fail
	goto unreachable
	goto inst764_fail
inst764_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 767:
			goto inst767_alt
		}
	}
	goto fail

	goto unreachable
	goto inst765
inst765: // rune "09AFaf" -> 786
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst786
			}
			goto inst765_fail
		}
	}
	goto inst765_fail
	goto unreachable
	goto inst765_fail
inst765_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 766:
			goto inst766_alt
		}
	}
	goto fail

	goto unreachable
	goto inst766
inst766: // alt -> 765, 786
	{
		idx := i*389 + 273
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 766, 0})
	goto inst765
inst766_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst786
	}
	goto unreachable

	goto unreachable
	goto inst767
inst767: // alt -> 764, 786
	{
		idx := i*389 + 274
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 767, 0})
	goto inst764
inst767_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst786
	}
	goto unreachable

	goto unreachable
	goto inst768
inst768: // alt -> 763, 786
	{
		idx := i*389 + 275
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 768, 0})
	goto inst763
inst768_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst786
	}
	goto unreachable

	goto unreachable
	goto inst769
inst769: // string ":" -> 770
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst770
		}
	}
	goto inst769_fail
	goto unreachable
	goto inst769_fail
inst769_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 786:
			goto inst786_alt
		}
	}
	goto fail

	goto unreachable
	goto inst770
inst770: // rune "09AFaf" -> 776
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst776
			}
			goto inst770_fail
		}
	}
	goto inst770_fail
	goto unreachable
	goto inst770_fail
inst770_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 786:
			goto inst786_alt
		}
	}
	goto fail

	goto unreachable
	goto inst771
inst771: // rune "09AFaf" -> 775
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst775
			}
			goto inst771_fail
		}
	}
	goto inst771_fail
	goto unreachable
	goto inst771_fail
inst771_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 776:
			goto inst776_alt
		}
	}
	goto fail

	goto unreachable
	goto inst772
inst772: // rune "09AFaf" -> 774
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst774
			}
			goto inst772_fail
		}
	}
	goto inst772_fail
	goto unreachable
	goto inst772_fail
inst772_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 775:
			goto inst775_alt
		}
	}
	goto fail

	goto unreachable
	goto inst773
inst773: // rune "09AFaf" -> 785
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst785
			}
			goto inst773_fail
		}
	}
	goto inst773_fail
	goto unreachable
	goto inst773_fail
inst773_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 774:
			goto inst774_alt
		}
	}
	goto fail

	goto unreachable
	goto inst774
inst774: // alt -> 773, 785
	{
		idx := i*389 + 276
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 774, 0})
	goto inst773
inst774_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst785
	}
	goto unreachable

	goto unreachable
	goto inst775
inst775: // alt -> 772, 785
	{
		idx := i*389 + 277
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 775, 0})
	goto inst772
inst775_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst785
	}
	goto unreachable

	goto unreachable
	goto inst776
inst776: // alt -> 771, 785
	{
		idx := i*389 + 278
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 776, 0})
	goto inst771
inst776_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst785
	}
	goto unreachable

	goto unreachable
	goto inst777
inst777: // string ":" -> 778
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst778
		}
	}
	goto inst777_fail
	goto unreachable
	goto inst777_fail
inst777_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 785:
			goto inst785_alt
		}
	}
	goto fail

	goto unreachable
	goto inst778
inst778: // rune "09AFaf" -> 784
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst784
			}
			goto inst778_fail
		}
	}
	goto inst778_fail
	goto unreachable
	goto inst778_fail
inst778_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 785:
			goto inst785_alt
		}
	}
	goto fail

	goto unreachable
	goto inst779
inst779: // rune "09AFaf" -> 783
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst783
			}
			goto inst779_fail
		}
	}
	goto inst779_fail
	goto unreachable
	goto inst779_fail
inst779_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 784:
			goto inst784_alt
		}
	}
	goto fail

	goto unreachable
	goto inst754
inst754: // rune "09AFaf" -> 760
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst760
			}
			goto inst754_fail
		}
	}
	goto inst754_fail
	goto unreachable
	goto inst754_fail
inst754_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 788:
			goto inst788_alt
		}
	}
	goto fail

	goto unreachable
	goto inst738
inst738: // rune "09AFaf" -> 744
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst744
			}
			goto inst738_fail
		}
	}
	goto inst738_fail
	goto unreachable
	goto inst738_fail
inst738_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 886:
			goto inst886_alt
		}
	}
	goto fail

	goto unreachable
	goto inst782
inst782: // alt -> 781, 1065
	{
		idx := i*389 + 279
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 782, 0})
	goto inst781
inst782_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst783
inst783: // alt -> 780, 1065
	{
		idx := i*389 + 280
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 783, 0})
	goto inst780
inst783_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst784
inst784: // alt -> 779, 1065
	{
		idx := i*389 + 281
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 784, 0})
	goto inst779
inst784_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst785
inst785: // alt -> 777, 1065
	{
		idx := i*389 + 282
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 785, 0})
	goto inst777
inst785_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst780
inst780: // rune "09AFaf" -> 782
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst782
			}
			goto inst780_fail
		}
	}
	goto inst780_fail
	goto unreachable
	goto inst780_fail
inst780_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 783:
			goto inst783_alt
		}
	}
	goto fail

	goto unreachable
	goto inst786
inst786: // alt -> 769, 1065
	{
		idx := i*389 + 283
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 786, 0})
	goto inst769
inst786_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst791
inst791: // rune "09AFaf" -> 797
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst797
			}
			goto inst791_fail
		}
	}
	goto inst791_fail
	goto unreachable
	goto inst791_fail
inst791_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 825:
			goto inst825_alt
		}
	}
	goto fail

	goto unreachable
	goto inst790
inst790: // string ":" -> 791
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst791
		}
	}
	goto inst790_fail
	goto unreachable
	goto inst790_fail
inst790_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 825:
			goto inst825_alt
		}
	}
	goto fail

	goto unreachable
	goto inst825
inst825: // alt -> 790, 826
	{
		idx := i*389 + 284
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 825, 0})
	goto inst790
inst825_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst826
	}
	goto unreachable

	goto unreachable
	goto inst731
inst731: // rune "09AFaf" -> 733
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst733
			}
			goto inst731_fail
		}
	}
	goto inst731_fail
	goto unreachable
	goto inst731_fail
inst731_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 734:
			goto inst734_alt
		}
	}
	goto fail

	goto unreachable
	goto inst796
inst796: // alt -> 793, 824
	{
		idx := i*389 + 285
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 796, 0})
	goto inst793
inst796_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst824
	}
	goto unreachable

	goto unreachable
	goto inst802
inst802: // rune "09AFaf" -> 823
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst823
			}
			goto inst802_fail
		}
	}
	goto inst802_fail
	goto unreachable
	goto inst802_fail
inst802_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 803:
			goto inst803_alt
		}
	}
	goto fail

	goto unreachable
	goto inst792
inst792: // rune "09AFaf" -> 796
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst796
			}
			goto inst792_fail
		}
	}
	goto inst792_fail
	goto unreachable
	goto inst792_fail
inst792_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 797:
			goto inst797_alt
		}
	}
	goto fail

	goto unreachable
	goto inst793
inst793: // rune "09AFaf" -> 795
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst795
			}
			goto inst793_fail
		}
	}
	goto inst793_fail
	goto unreachable
	goto inst793_fail
inst793_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 796:
			goto inst796_alt
		}
	}
	goto fail

	goto unreachable
	goto inst794
inst794: // rune "09AFaf" -> 824
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst824
			}
			goto inst794_fail
		}
	}
	goto inst794_fail
	goto unreachable
	goto inst794_fail
inst794_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 795:
			goto inst795_alt
		}
	}
	goto fail

	goto unreachable
	goto inst795
inst795: // alt -> 794, 824
	{
		idx := i*389 + 286
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 795, 0})
	goto inst794
inst795_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst824
	}
	goto unreachable

	goto unreachable
	goto inst824
inst824: // alt -> 798, 826
	{
		idx := i*389 + 287
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 824, 0})
	goto inst798
inst824_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst826
	}
	goto unreachable

	goto unreachable
	goto inst798
inst798: // string ":" -> 799
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst799
		}
	}
	goto inst798_fail
	goto unreachable
	goto inst798_fail
inst798_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 824:
			goto inst824_alt
		}
	}
	goto fail

	goto unreachable
	goto inst799
inst799: // rune "09AFaf" -> 805
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst805
			}
			goto inst799_fail
		}
	}
	goto inst799_fail
	goto unreachable
	goto inst799_fail
inst799_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 824:
			goto inst824_alt
		}
	}
	goto fail

	goto unreachable
	goto inst800
inst800: // rune "09AFaf" -> 804
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst804
			}
			goto inst800_fail
		}
	}
	goto inst800_fail
	goto unreachable
	goto inst800_fail
inst800_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 805:
			goto inst805_alt
		}
	}
	goto fail

	goto unreachable
	goto inst801
inst801: // rune "09AFaf" -> 803
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst803
			}
			goto inst801_fail
		}
	}
	goto inst801_fail
	goto unreachable
	goto inst801_fail
inst801_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 804:
			goto inst804_alt
		}
	}
	goto fail

	goto unreachable
	goto inst875
inst875: // rune "04" -> 876
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst876
		}
	}
	goto inst875_fail
	goto unreachable
	goto inst875_fail
inst875_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 881:
			goto inst881_alt
		}
	}
	goto fail

	goto unreachable
	goto inst803
inst803: // alt -> 802, 823
	{
		idx := i*389 + 288
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 803, 0})
	goto inst802
inst803_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst823
	}
	goto unreachable

	goto unreachable
	goto inst804
inst804: // alt -> 801, 823
	{
		idx := i*389 + 289
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 804, 0})
	goto inst801
inst804_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst823
	}
	goto unreachable

	goto unreachable
	goto inst805
inst805: // alt -> 800, 823
	{
		idx := i*389 + 290
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 805, 0})
	goto inst800
inst805_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst823
	}
	goto unreachable

	goto unreachable
	goto inst806
inst806: // string ":" -> 807
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst807
		}
	}
	goto inst806_fail
	goto unreachable
	goto inst806_fail
inst806_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 823:
			goto inst823_alt
		}
	}
	goto fail

	goto unreachable
	goto inst807
inst807: // rune "09AFaf" -> 813
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst813
			}
			goto inst807_fail
		}
	}
	goto inst807_fail
	goto unreachable
	goto inst807_fail
inst807_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 823:
			goto inst823_alt
		}
	}
	goto fail

	goto unreachable
	goto inst797
inst797: // alt -> 792, 824
	{
		idx := i*389 + 291
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 797, 0})
	goto inst792
inst797_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst824
	}
	goto unreachable

	goto unreachable
	goto inst809
inst809: // rune "09AFaf" -> 811
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst811
			}
			goto inst809_fail
		}
	}
	goto inst809_fail
	goto unreachable
	goto inst809_fail
inst809_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 812:
			goto inst812_alt
		}
	}
	goto fail

	goto unreachable
	goto inst810
inst810: // rune "09AFaf" -> 822
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst822
			}
			goto inst810_fail
		}
	}
	goto inst810_fail
	goto unreachable
	goto inst810_fail
inst810_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 811:
			goto inst811_alt
		}
	}
	goto fail

	goto unreachable
	goto inst811
inst811: // alt -> 810, 822
	{
		idx := i*389 + 292
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 811, 0})
	goto inst810
inst811_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst822
	}
	goto unreachable

	goto unreachable
	goto inst812
inst812: // alt -> 809, 822
	{
		idx := i*389 + 293
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 812, 0})
	goto inst809
inst812_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst822
	}
	goto unreachable

	goto unreachable
	goto inst813
inst813: // alt -> 808, 822
	{
		idx := i*389 + 294
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 813, 0})
	goto inst808
inst813_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst822
	}
	goto unreachable

	goto unreachable
	goto inst814
inst814: // string ":" -> 815
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst815
		}
	}
	goto inst814_fail
	goto unreachable
	goto inst814_fail
inst814_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 822:
			goto inst822_alt
		}
	}
	goto fail

	goto unreachable
	goto inst815
inst815: // rune "09AFaf" -> 821
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst821
			}
			goto inst815_fail
		}
	}
	goto inst815_fail
	goto unreachable
	goto inst815_fail
inst815_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 822:
			goto inst822_alt
		}
	}
	goto fail

	goto unreachable
	goto inst816
inst816: // rune "09AFaf" -> 820
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst820
			}
			goto inst816_fail
		}
	}
	goto inst816_fail
	goto unreachable
	goto inst816_fail
inst816_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 821:
			goto inst821_alt
		}
	}
	goto fail

	goto unreachable
	goto inst817
inst817: // rune "09AFaf" -> 819
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst819
			}
			goto inst817_fail
		}
	}
	goto inst817_fail
	goto unreachable
	goto inst817_fail
inst817_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 820:
			goto inst820_alt
		}
	}
	goto fail

	goto unreachable
	goto inst818
inst818: // rune "09AFaf" -> 826
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst826
			}
			goto inst818_fail
		}
	}
	goto inst818_fail
	goto unreachable
	goto inst818_fail
inst818_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 819:
			goto inst819_alt
		}
	}
	goto fail

	goto unreachable
	goto inst819
inst819: // alt -> 818, 826
	{
		idx := i*389 + 295
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 819, 0})
	goto inst818
inst819_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst826
	}
	goto unreachable

	goto unreachable
	goto inst820
inst820: // alt -> 817, 826
	{
		idx := i*389 + 296
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 820, 0})
	goto inst817
inst820_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst826
	}
	goto unreachable

	goto unreachable
	goto inst821
inst821: // alt -> 816, 826
	{
		idx := i*389 + 297
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 821, 0})
	goto inst816
inst821_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst826
	}
	goto unreachable

	goto unreachable
	goto inst822
inst822: // alt -> 814, 826
	{
		idx := i*389 + 298
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 822, 0})
	goto inst814
inst822_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst826
	}
	goto unreachable

	goto unreachable
	goto inst823
inst823: // alt -> 806, 826
	{
		idx := i*389 + 299
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 823, 0})
	goto inst806
inst823_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst826
	}
	goto unreachable

	goto unreachable
	goto inst808
inst808: // rune "09AFaf" -> 812
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst812
			}
			goto inst808_fail
		}
	}
	goto inst808_fail
	goto unreachable
	goto inst808_fail
inst808_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 813:
			goto inst813_alt
		}
	}
	goto fail

	goto unreachable
	goto inst826
inst826: // string ":" -> 840
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst840
		}
	}
	goto inst826_fail
	goto unreachable
	goto inst826_fail
inst826_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 795:
			goto inst795_alt
		case 796:
			goto inst796_alt
		case 797:
			goto inst797_alt
		case 803:
			goto inst803_alt
		case 804:
			goto inst804_alt
		case 805:
			goto inst805_alt
		case 811:
			goto inst811_alt
		case 812:
			goto inst812_alt
		case 813:
			goto inst813_alt
		case 819:
			goto inst819_alt
		case 820:
			goto inst820_alt
		case 821:
			goto inst821_alt
		case 822:
			goto inst822_alt
		case 823:
			goto inst823_alt
		case 824:
			goto inst824_alt
		case 825:
			goto inst825_alt
		case 888:
			goto inst888_alt
		}
	}
	goto fail

	goto unreachable
	goto inst827
inst827: // string "2" -> 832
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst832
		}
	}
	goto inst827_fail
	goto unreachable
	goto inst827_fail
inst827_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 836:
			goto inst836_alt
		}
	}
	goto fail

	goto unreachable
	goto inst828
inst828: // string "5" -> 829
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst829
		}
	}
	goto inst828_fail
	goto unreachable
	goto inst828_fail
inst828_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 832:
			goto inst832_alt
		}
	}
	goto fail

	goto unreachable
	goto inst829
inst829: // rune "05" -> 841
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst841
		}
	}
	goto inst829_fail
	goto unreachable
	goto inst829_fail
inst829_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 832:
			goto inst832_alt
		}
	}
	goto fail

	goto unreachable
	goto inst834
inst834: // rune "09" -> 835
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst835
		}
	}
	goto inst834_fail
	goto unreachable
	goto inst834_fail
inst834_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 840:
			goto inst840_alt
		}
	}
	goto fail

	goto unreachable
	goto inst830
inst830: // rune "04" -> 831
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst831
		}
	}
	goto inst830_fail
	goto unreachable
	goto inst830_fail
inst830_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 836:
			goto inst836_alt
		}
	}
	goto fail

	goto unreachable
	goto inst831
inst831: // rune "09" -> 841
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst841
		}
	}
	goto inst831_fail
	goto unreachable
	goto inst831_fail
inst831_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 836:
			goto inst836_alt
		}
	}
	goto fail

	goto unreachable
	goto inst832
inst832: // alt -> 828, 830
	{
		idx := i*389 + 300
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 832, 0})
	goto inst828
inst832_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst830
	}
	goto unreachable

	goto unreachable
	goto inst833
inst833: // string "1" -> 834
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst834
		}
	}
	goto inst833_fail
	goto unreachable
	goto inst833_fail
inst833_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 840:
			goto inst840_alt
		}
	}
	goto fail

	goto unreachable
	goto inst835
inst835: // rune "09" -> 841
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst841
		}
	}
	goto inst835_fail
	goto unreachable
	goto inst835_fail
inst835_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 840:
			goto inst840_alt
		}
	}
	goto fail

	goto unreachable
	goto inst838
inst838: // alt -> 837, 839
	{
		idx := i*389 + 301
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 838, 0})
	goto inst837
inst838_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst839
	}
	goto unreachable

	goto unreachable
	goto inst836
inst836: // alt -> 827, 833
	{
		idx := i*389 + 302
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 836, 0})
	goto inst827
inst836_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst833
	}
	goto unreachable

	goto unreachable
	goto inst837
inst837: // rune "19" -> 839
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst839
		}
	}
	goto inst837_fail
	goto unreachable
	goto inst837_fail
inst837_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 838:
			goto inst838_alt
		}
	}
	goto fail

	goto unreachable
	goto inst842
inst842: // string "2" -> 847
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst847
		}
	}
	goto inst842_fail
	goto unreachable
	goto inst842_fail
inst842_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 851:
			goto inst851_alt
		}
	}
	goto fail

	goto unreachable
	goto inst843
inst843: // string "5" -> 844
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst844
		}
	}
	goto inst843_fail
	goto unreachable
	goto inst843_fail
inst843_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 847:
			goto inst847_alt
		}
	}
	goto fail

	goto unreachable
	goto inst839
inst839: // rune "09" -> 841
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst841
		}
	}
	goto inst839_fail
	goto unreachable
	goto inst839_fail
inst839_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 795:
			goto inst795_alt
		case 796:
			goto inst796_alt
		case 797:
			goto inst797_alt
		case 803:
			goto inst803_alt
		case 804:
			goto inst804_alt
		case 805:
			goto inst805_alt
		case 811:
			goto inst811_alt
		case 812:
			goto inst812_alt
		case 813:
			goto inst813_alt
		case 819:
			goto inst819_alt
		case 820:
			goto inst820_alt
		case 821:
			goto inst821_alt
		case 822:
			goto inst822_alt
		case 823:
			goto inst823_alt
		case 824:
			goto inst824_alt
		case 825:
			goto inst825_alt
		case 838:
			goto inst838_alt
		case 888:
			goto inst888_alt
		}
	}
	goto fail

	goto unreachable
	goto inst840
inst840: // alt -> 836, 838
	{
		idx := i*389 + 303
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 840, 0})
	goto inst836
inst840_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst838
	}
	goto unreachable

	goto unreachable
	goto inst841
inst841: // string "." -> 855
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst855
		}
	}
	goto inst841_fail
	goto unreachable
	goto inst841_fail
inst841_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 795:
			goto inst795_alt
		case 796:
			goto inst796_alt
		case 797:
			goto inst797_alt
		case 803:
			goto inst803_alt
		case 804:
			goto inst804_alt
		case 805:
			goto inst805_alt
		case 811:
			goto inst811_alt
		case 812:
			goto inst812_alt
		case 813:
			goto inst813_alt
		case 819:
			goto inst819_alt
		case 820:
			goto inst820_alt
		case 821:
			goto inst821_alt
		case 822:
			goto inst822_alt
		case 823:
			goto inst823_alt
		case 824:
			goto inst824_alt
		case 825:
			goto inst825_alt
		case 832:
			goto inst832_alt
		case 836:
			goto inst836_alt
		case 838:
			goto inst838_alt
		case 840:
			goto inst840_alt
		case 888:
			goto inst888_alt
		}
	}
	goto fail

	goto unreachable
	goto inst844
inst844: // rune "05" -> 856
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst856
		}
	}
	goto inst844_fail
	goto unreachable
	goto inst844_fail
inst844_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 847:
			goto inst847_alt
		}
	}
	goto fail

	goto unreachable
	goto inst849
inst849: // rune "09" -> 850
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst850
		}
	}
	goto inst849_fail
	goto unreachable
	goto inst849_fail
inst849_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 855:
			goto inst855_alt
		}
	}
	goto fail

	goto unreachable
	goto inst845
inst845: // rune "04" -> 846
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst846
		}
	}
	goto inst845_fail
	goto unreachable
	goto inst845_fail
inst845_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 851:
			goto inst851_alt
		}
	}
	goto fail

	goto unreachable
	goto inst846
inst846: // rune "09" -> 856
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst856
		}
	}
	goto inst846_fail
	goto unreachable
	goto inst846_fail
inst846_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 851:
			goto inst851_alt
		}
	}
	goto fail

	goto unreachable
	goto inst847
inst847: // alt -> 843, 845
	{
		idx := i*389 + 304
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 847, 0})
	goto inst843
inst847_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst845
	}
	goto unreachable

	goto unreachable
	goto inst848
inst848: // string "1" -> 849
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst849
		}
	}
	goto inst848_fail
	goto unreachable
	goto inst848_fail
inst848_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 855:
			goto inst855_alt
		}
	}
	goto fail

	goto unreachable
	goto inst850
inst850: // rune "09" -> 856
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst856
		}
	}
	goto inst850_fail
	goto unreachable
	goto inst850_fail
inst850_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 855:
			goto inst855_alt
		}
	}
	goto fail

	goto unreachable
	goto inst853
inst853: // alt -> 852, 854
	{
		idx := i*389 + 305
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 853, 0})
	goto inst852
inst853_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst854
	}
	goto unreachable

	goto unreachable
	goto inst851
inst851: // alt -> 842, 848
	{
		idx := i*389 + 306
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 851, 0})
	goto inst842
inst851_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst848
	}
	goto unreachable

	goto unreachable
	goto inst852
inst852: // rune "19" -> 854
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst854
		}
	}
	goto inst852_fail
	goto unreachable
	goto inst852_fail
inst852_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 853:
			goto inst853_alt
		}
	}
	goto fail

	goto unreachable
	goto inst857
inst857: // string "2" -> 862
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst862
		}
	}
	goto inst857_fail
	goto unreachable
	goto inst857_fail
inst857_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 866:
			goto inst866_alt
		}
	}
	goto fail

	goto unreachable
	goto inst858
inst858: // string "5" -> 859
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst859
		}
	}
	goto inst858_fail
	goto unreachable
	goto inst858_fail
inst858_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 862:
			goto inst862_alt
		}
	}
	goto fail

	goto unreachable
	goto inst854
inst854: // rune "09" -> 856
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst856
		}
	}
	goto inst854_fail
	goto unreachable
	goto inst854_fail
inst854_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 795:
			goto inst795_alt
		case 796:
			goto inst796_alt
		case 797:
			goto inst797_alt
		case 803:
			goto inst803_alt
		case 804:
			goto inst804_alt
		case 805:
			goto inst805_alt
		case 811:
			goto inst811_alt
		case 812:
			goto inst812_alt
		case 813:
			goto inst813_alt
		case 819:
			goto inst819_alt
		case 820:
			goto inst820_alt
		case 821:
			goto inst821_alt
		case 822:
			goto inst822_alt
		case 823:
			goto inst823_alt
		case 824:
			goto inst824_alt
		case 825:
			goto inst825_alt
		case 832:
			goto inst832_alt
		case 836:
			goto inst836_alt
		case 838:
			goto inst838_alt
		case 840:
			goto inst840_alt
		case 853:
			goto inst853_alt
		case 888:
			goto inst888_alt
		}
	}
	goto fail

	goto unreachable
	goto inst855
inst855: // alt -> 851, 853
	{
		idx := i*389 + 307
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 855, 0})
	goto inst851
inst855_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst853
	}
	goto unreachable

	goto unreachable
	goto inst856
inst856: // string "." -> 870
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst870
		}
	}
	goto inst856_fail
	goto unreachable
	goto inst856_fail
inst856_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 795:
			goto inst795_alt
		case 796:
			goto inst796_alt
		case 797:
			goto inst797_alt
		case 803:
			goto inst803_alt
		case 804:
			goto inst804_alt
		case 805:
			goto inst805_alt
		case 811:
			goto inst811_alt
		case 812:
			goto inst812_alt
		case 813:
			goto inst813_alt
		case 819:
			goto inst819_alt
		case 820:
			goto inst820_alt
		case 821:
			goto inst821_alt
		case 822:
			goto inst822_alt
		case 823:
			goto inst823_alt
		case 824:
			goto inst824_alt
		case 825:
			goto inst825_alt
		case 832:
			goto inst832_alt
		case 836:
			goto inst836_alt
		case 838:
			goto inst838_alt
		case 840:
			goto inst840_alt
		case 847:
			goto inst847_alt
		case 851:
			goto inst851_alt
		case 853:
			goto inst853_alt
		case 855:
			goto inst855_alt
		case 888:
			goto inst888_alt
		}
	}
	goto fail

	goto unreachable
	goto inst859
inst859: // rune "05" -> 871
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst871
		}
	}
	goto inst859_fail
	goto unreachable
	goto inst859_fail
inst859_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 862:
			goto inst862_alt
		}
	}
	goto fail

	goto unreachable
	goto inst864
inst864: // rune "09" -> 865
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst865
		}
	}
	goto inst864_fail
	goto unreachable
	goto inst864_fail
inst864_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 870:
			goto inst870_alt
		}
	}
	goto fail

	goto unreachable
	goto inst860
inst860: // rune "04" -> 861
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst861
		}
	}
	goto inst860_fail
	goto unreachable
	goto inst860_fail
inst860_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 866:
			goto inst866_alt
		}
	}
	goto fail

	goto unreachable
	goto inst861
inst861: // rune "09" -> 871
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst871
		}
	}
	goto inst861_fail
	goto unreachable
	goto inst861_fail
inst861_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 866:
			goto inst866_alt
		}
	}
	goto fail

	goto unreachable
	goto inst862
inst862: // alt -> 858, 860
	{
		idx := i*389 + 308
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 862, 0})
	goto inst858
inst862_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst860
	}
	goto unreachable

	goto unreachable
	goto inst884
inst884: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst884_fail
	goto unreachable
	goto inst884_fail
inst884_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 795:
			goto inst795_alt
		case 796:
			goto inst796_alt
		case 797:
			goto inst797_alt
		case 803:
			goto inst803_alt
		case 804:
			goto inst804_alt
		case 805:
			goto inst805_alt
		case 811:
			goto inst811_alt
		case 812:
			goto inst812_alt
		case 813:
			goto inst813_alt
		case 819:
			goto inst819_alt
		case 820:
			goto inst820_alt
		case 821:
			goto inst821_alt
		case 822:
			goto inst822_alt
		case 823:
			goto inst823_alt
		case 824:
			goto inst824_alt
		case 825:
			goto inst825_alt
		case 832:
			goto inst832_alt
		case 836:
			goto inst836_alt
		case 838:
			goto inst838_alt
		case 840:
			goto inst840_alt
		case 847:
			goto inst847_alt
		case 851:
			goto inst851_alt
		case 853:
			goto inst853_alt
		case 855:
			goto inst855_alt
		case 862:
			goto inst862_alt
		case 866:
			goto inst866_alt
		case 868:
			goto inst868_alt
		case 870:
			goto inst870_alt
		case 883:
			goto inst883_alt
		case 888:
			goto inst888_alt
		}
	}
	goto fail

	goto unreachable
	goto inst865
inst865: // rune "09" -> 871
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst871
		}
	}
	goto inst865_fail
	goto unreachable
	goto inst865_fail
inst865_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 870:
			goto inst870_alt
		}
	}
	goto fail

	goto unreachable
	goto inst868
inst868: // alt -> 867, 869
	{
		idx := i*389 + 309
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 868, 0})
	goto inst867
inst868_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst869
	}
	goto unreachable

	goto unreachable
	goto inst866
inst866: // alt -> 857, 863
	{
		idx := i*389 + 310
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 866, 0})
	goto inst857
inst866_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst863
	}
	goto unreachable

	goto unreachable
	goto inst867
inst867: // rune "19" -> 869
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst869
		}
	}
	goto inst867_fail
	goto unreachable
	goto inst867_fail
inst867_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 868:
			goto inst868_alt
		}
	}
	goto fail

	goto unreachable
	goto inst872
inst872: // string "2" -> 877
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst877
		}
	}
	goto inst872_fail
	goto unreachable
	goto inst872_fail
inst872_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 881:
			goto inst881_alt
		}
	}
	goto fail

	goto unreachable
	goto inst873
inst873: // string "5" -> 874
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst874
		}
	}
	goto inst873_fail
	goto unreachable
	goto inst873_fail
inst873_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 877:
			goto inst877_alt
		}
	}
	goto fail

	goto unreachable
	goto inst869
inst869: // rune "09" -> 871
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst871
		}
	}
	goto inst869_fail
	goto unreachable
	goto inst869_fail
inst869_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 795:
			goto inst795_alt
		case 796:
			goto inst796_alt
		case 797:
			goto inst797_alt
		case 803:
			goto inst803_alt
		case 804:
			goto inst804_alt
		case 805:
			goto inst805_alt
		case 811:
			goto inst811_alt
		case 812:
			goto inst812_alt
		case 813:
			goto inst813_alt
		case 819:
			goto inst819_alt
		case 820:
			goto inst820_alt
		case 821:
			goto inst821_alt
		case 822:
			goto inst822_alt
		case 823:
			goto inst823_alt
		case 824:
			goto inst824_alt
		case 825:
			goto inst825_alt
		case 832:
			goto inst832_alt
		case 836:
			goto inst836_alt
		case 838:
			goto inst838_alt
		case 840:
			goto inst840_alt
		case 847:
			goto inst847_alt
		case 851:
			goto inst851_alt
		case 853:
			goto inst853_alt
		case 855:
			goto inst855_alt
		case 868:
			goto inst868_alt
		case 888:
			goto inst888_alt
		}
	}
	goto fail

	goto unreachable
	goto inst870
inst870: // alt -> 866, 868
	{
		idx := i*389 + 311
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 870, 0})
	goto inst866
inst870_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst868
	}
	goto unreachable

	goto unreachable
	goto inst871
inst871: // string "." -> 885
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst885
		}
	}
	goto inst871_fail
	goto unreachable
	goto inst871_fail
inst871_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 795:
			goto inst795_alt
		case 796:
			goto inst796_alt
		case 797:
			goto inst797_alt
		case 803:
			goto inst803_alt
		case 804:
			goto inst804_alt
		case 805:
			goto inst805_alt
		case 811:
			goto inst811_alt
		case 812:
			goto inst812_alt
		case 813:
			goto inst813_alt
		case 819:
			goto inst819_alt
		case 820:
			goto inst820_alt
		case 821:
			goto inst821_alt
		case 822:
			goto inst822_alt
		case 823:
			goto inst823_alt
		case 824:
			goto inst824_alt
		case 825:
			goto inst825_alt
		case 832:
			goto inst832_alt
		case 836:
			goto inst836_alt
		case 838:
			goto inst838_alt
		case 840:
			goto inst840_alt
		case 847:
			goto inst847_alt
		case 851:
			goto inst851_alt
		case 853:
			goto inst853_alt
		case 855:
			goto inst855_alt
		case 862:
			goto inst862_alt
		case 866:
			goto inst866_alt
		case 868:
			goto inst868_alt
		case 870:
			goto inst870_alt
		case 888:
			goto inst888_alt
		}
	}
	goto fail

	goto unreachable
	goto inst874
inst874: // rune "05" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1065
		}
	}
	goto inst874_fail
	goto unreachable
	goto inst874_fail
inst874_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 877:
			goto inst877_alt
		}
	}
	goto fail

	goto unreachable
	goto inst880
inst880: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst880_fail
	goto unreachable
	goto inst880_fail
inst880_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 885:
			goto inst885_alt
		}
	}
	goto fail

	goto unreachable
	goto inst863
inst863: // string "1" -> 864
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst864
		}
	}
	goto inst863_fail
	goto unreachable
	goto inst863_fail
inst863_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 870:
			goto inst870_alt
		}
	}
	goto fail

	goto unreachable
	goto inst877
inst877: // alt -> 873, 875
	{
		idx := i*389 + 312
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 877, 0})
	goto inst873
inst877_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst875
	}
	goto unreachable

	goto unreachable
	goto inst878
inst878: // string "1" -> 879
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst879
		}
	}
	goto inst878_fail
	goto unreachable
	goto inst878_fail
inst878_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 885:
			goto inst885_alt
		}
	}
	goto fail

	goto unreachable
	goto inst879
inst879: // rune "09" -> 880
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst880
		}
	}
	goto inst879_fail
	goto unreachable
	goto inst879_fail
inst879_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 885:
			goto inst885_alt
		}
	}
	goto fail

	goto unreachable
	goto inst881
inst881: // alt -> 872, 878
	{
		idx := i*389 + 313
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 881, 0})
	goto inst872
inst881_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst878
	}
	goto unreachable

	goto unreachable
	goto inst888
inst888: // alt -> 886, 887
	{
		idx := i*389 + 314
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 888, 0})
	goto inst886
inst888_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst887
	}
	goto unreachable

	goto unreachable
	goto inst882
inst882: // rune "19" -> 884
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst884
		}
	}
	goto inst882_fail
	goto unreachable
	goto inst882_fail
inst882_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 883:
			goto inst883_alt
		}
	}
	goto fail

	goto unreachable
	goto inst883
inst883: // alt -> 882, 884
	{
		idx := i*389 + 315
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 883, 0})
	goto inst882
inst883_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst884
	}
	goto unreachable

	goto unreachable
	goto inst892
inst892: // rune "09AFaf" -> 898
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst898
			}
			goto inst892_fail
		}
	}
	goto inst892_fail
	goto unreachable
	goto inst892_fail
inst892_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1058:
			goto inst1058_alt
		}
	}
	goto fail

	goto unreachable
	goto inst891
inst891: // string ":" -> 892
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst892
		}
	}
	goto inst891_fail
	goto unreachable
	goto inst891_fail
inst891_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1058:
			goto inst1058_alt
		}
	}
	goto fail

	goto unreachable
	goto inst885
inst885: // alt -> 881, 883
	{
		idx := i*389 + 316
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 885, 0})
	goto inst881
inst885_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst883
	}
	goto unreachable

	goto unreachable
	goto inst886
inst886: // alt -> 737, 825
	{
		idx := i*389 + 317
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 886, 0})
	goto inst737
inst886_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst825
	}
	goto unreachable

	goto unreachable
	goto inst887
inst887: // string ":" -> 1065
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1065
		}
	}
	goto inst887_fail
	goto unreachable
	goto inst887_fail
inst887_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 733:
			goto inst733_alt
		case 734:
			goto inst734_alt
		case 735:
			goto inst735_alt
		case 1061:
			goto inst1061_alt
		}
	}
	goto fail

	goto unreachable
	goto inst893
inst893: // rune "09AFaf" -> 897
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst897
			}
			goto inst893_fail
		}
	}
	goto inst893_fail
	goto unreachable
	goto inst893_fail
inst893_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 898:
			goto inst898_alt
		}
	}
	goto fail

	goto unreachable
	goto inst952
inst952: // alt -> 899, 1065
	{
		idx := i*389 + 318
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 952, 0})
	goto inst899
inst952_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst905
inst905: // alt -> 902, 951
	{
		idx := i*389 + 319
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 905, 0})
	goto inst902
inst905_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst951
	}
	goto unreachable

	goto unreachable
	goto inst736
inst736: // string ":" -> 888
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst888
		}
	}
	goto inst736_fail
	goto unreachable
	goto inst736_fail
inst736_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 733:
			goto inst733_alt
		case 734:
			goto inst734_alt
		case 735:
			goto inst735_alt
		case 1061:
			goto inst1061_alt
		}
	}
	goto fail

	goto unreachable
	goto inst951
inst951: // alt -> 907, 1065
	{
		idx := i*389 + 320
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 951, 0})
	goto inst907
inst951_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst906
inst906: // alt -> 901, 951
	{
		idx := i*389 + 321
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 906, 0})
	goto inst901
inst906_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst951
	}
	goto unreachable

	goto unreachable
	goto inst895
inst895: // rune "09AFaf" -> 952
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst952
			}
			goto inst895_fail
		}
	}
	goto inst895_fail
	goto unreachable
	goto inst895_fail
inst895_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 896:
			goto inst896_alt
		}
	}
	goto fail

	goto unreachable
	goto inst896
inst896: // alt -> 895, 952
	{
		idx := i*389 + 322
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 896, 0})
	goto inst895
inst896_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst952
	}
	goto unreachable

	goto unreachable
	goto inst897
inst897: // alt -> 894, 952
	{
		idx := i*389 + 323
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 897, 0})
	goto inst894
inst897_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst952
	}
	goto unreachable

	goto unreachable
	goto inst898
inst898: // alt -> 893, 952
	{
		idx := i*389 + 324
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 898, 0})
	goto inst893
inst898_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst952
	}
	goto unreachable

	goto unreachable
	goto inst899
inst899: // string ":" -> 900
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst900
		}
	}
	goto inst899_fail
	goto unreachable
	goto inst899_fail
inst899_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 952:
			goto inst952_alt
		}
	}
	goto fail

	goto unreachable
	goto inst900
inst900: // rune "09AFaf" -> 906
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst906
			}
			goto inst900_fail
		}
	}
	goto inst900_fail
	goto unreachable
	goto inst900_fail
inst900_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 952:
			goto inst952_alt
		}
	}
	goto fail

	goto unreachable
	goto inst901
inst901: // rune "09AFaf" -> 905
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst905
			}
			goto inst901_fail
		}
	}
	goto inst901_fail
	goto unreachable
	goto inst901_fail
inst901_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 906:
			goto inst906_alt
		}
	}
	goto fail

	goto unreachable
	goto inst902
inst902: // rune "09AFaf" -> 904
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst904
			}
			goto inst902_fail
		}
	}
	goto inst902_fail
	goto unreachable
	goto inst902_fail
inst902_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 905:
			goto inst905_alt
		}
	}
	goto fail

	goto unreachable
	goto inst903
inst903: // rune "09AFaf" -> 951
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst951
			}
			goto inst903_fail
		}
	}
	goto inst903_fail
	goto unreachable
	goto inst903_fail
inst903_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 904:
			goto inst904_alt
		}
	}
	goto fail

	goto unreachable
	goto inst894
inst894: // rune "09AFaf" -> 896
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst896
			}
			goto inst894_fail
		}
	}
	goto inst894_fail
	goto unreachable
	goto inst894_fail
inst894_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 897:
			goto inst897_alt
		}
	}
	goto fail

	goto unreachable
	goto inst904
inst904: // alt -> 903, 951
	{
		idx := i*389 + 325
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 904, 0})
	goto inst903
inst904_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst951
	}
	goto unreachable

	goto unreachable
	goto inst737
inst737: // string ":" -> 738
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst738
		}
	}
	goto inst737_fail
	goto unreachable
	goto inst737_fail
inst737_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 886:
			goto inst886_alt
		}
	}
	goto fail

	goto unreachable
	goto inst908
inst908: // rune "09AFaf" -> 914
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst914
			}
			goto inst908_fail
		}
	}
	goto inst908_fail
	goto unreachable
	goto inst908_fail
inst908_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 951:
			goto inst951_alt
		}
	}
	goto fail

	goto unreachable
	goto inst913
inst913: // alt -> 910, 950
	{
		idx := i*389 + 326
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 913, 0})
	goto inst910
inst913_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst950
	}
	goto unreachable

	goto unreachable
	goto inst914
inst914: // alt -> 909, 950
	{
		idx := i*389 + 327
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 914, 0})
	goto inst909
inst914_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst950
	}
	goto unreachable

	goto unreachable
	goto inst909
inst909: // rune "09AFaf" -> 913
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst913
			}
			goto inst909_fail
		}
	}
	goto inst909_fail
	goto unreachable
	goto inst909_fail
inst909_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 914:
			goto inst914_alt
		}
	}
	goto fail

	goto unreachable
	goto inst910
inst910: // rune "09AFaf" -> 912
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst912
			}
			goto inst910_fail
		}
	}
	goto inst910_fail
	goto unreachable
	goto inst910_fail
inst910_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 913:
			goto inst913_alt
		}
	}
	goto fail

	goto unreachable
	goto inst911
inst911: // rune "09AFaf" -> 950
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst950
			}
			goto inst911_fail
		}
	}
	goto inst911_fail
	goto unreachable
	goto inst911_fail
inst911_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 912:
			goto inst912_alt
		}
	}
	goto fail

	goto unreachable
	goto inst912
inst912: // alt -> 911, 950
	{
		idx := i*389 + 328
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 912, 0})
	goto inst911
inst912_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst950
	}
	goto unreachable

	goto unreachable
	goto inst915
inst915: // string ":" -> 916
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst916
		}
	}
	goto inst915_fail
	goto unreachable
	goto inst915_fail
inst915_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 950:
			goto inst950_alt
		}
	}
	goto fail

	goto unreachable
	goto inst949
inst949: // alt -> 923, 1065
	{
		idx := i*389 + 329
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 949, 0})
	goto inst923
inst949_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst950
inst950: // alt -> 915, 1065
	{
		idx := i*389 + 330
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 950, 0})
	goto inst915
inst950_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst916
inst916: // rune "09AFaf" -> 922
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst922
			}
			goto inst916_fail
		}
	}
	goto inst916_fail
	goto unreachable
	goto inst916_fail
inst916_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 950:
			goto inst950_alt
		}
	}
	goto fail

	goto unreachable
	goto inst917
inst917: // rune "09AFaf" -> 921
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst921
			}
			goto inst917_fail
		}
	}
	goto inst917_fail
	goto unreachable
	goto inst917_fail
inst917_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 922:
			goto inst922_alt
		}
	}
	goto fail

	goto unreachable
	goto inst918
inst918: // rune "09AFaf" -> 920
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst920
			}
			goto inst918_fail
		}
	}
	goto inst918_fail
	goto unreachable
	goto inst918_fail
inst918_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 921:
			goto inst921_alt
		}
	}
	goto fail

	goto unreachable
	goto inst919
inst919: // rune "09AFaf" -> 949
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst949
			}
			goto inst919_fail
		}
	}
	goto inst919_fail
	goto unreachable
	goto inst919_fail
inst919_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 920:
			goto inst920_alt
		}
	}
	goto fail

	goto unreachable
	goto inst920
inst920: // alt -> 919, 949
	{
		idx := i*389 + 331
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 920, 0})
	goto inst919
inst920_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst949
	}
	goto unreachable

	goto unreachable
	goto inst921
inst921: // alt -> 918, 949
	{
		idx := i*389 + 332
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 921, 0})
	goto inst918
inst921_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst949
	}
	goto unreachable

	goto unreachable
	goto inst922
inst922: // alt -> 917, 949
	{
		idx := i*389 + 333
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 922, 0})
	goto inst917
inst922_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst949
	}
	goto unreachable

	goto unreachable
	goto inst923
inst923: // string ":" -> 924
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst924
		}
	}
	goto inst923_fail
	goto unreachable
	goto inst923_fail
inst923_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 949:
			goto inst949_alt
		}
	}
	goto fail

	goto unreachable
	goto inst924
inst924: // rune "09AFaf" -> 930
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst930
			}
			goto inst924_fail
		}
	}
	goto inst924_fail
	goto unreachable
	goto inst924_fail
inst924_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 949:
			goto inst949_alt
		}
	}
	goto fail

	goto unreachable
	goto inst925
inst925: // rune "09AFaf" -> 929
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst929
			}
			goto inst925_fail
		}
	}
	goto inst925_fail
	goto unreachable
	goto inst925_fail
inst925_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 930:
			goto inst930_alt
		}
	}
	goto fail

	goto unreachable
	goto inst926
inst926: // rune "09AFaf" -> 928
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst928
			}
			goto inst926_fail
		}
	}
	goto inst926_fail
	goto unreachable
	goto inst926_fail
inst926_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 929:
			goto inst929_alt
		}
	}
	goto fail

	goto unreachable
	goto inst944
inst944: // alt -> 943, 1065
	{
		idx := i*389 + 334
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 944, 0})
	goto inst943
inst944_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst928
inst928: // alt -> 927, 948
	{
		idx := i*389 + 335
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 928, 0})
	goto inst927
inst928_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst948
	}
	goto unreachable

	goto unreachable
	goto inst929
inst929: // alt -> 926, 948
	{
		idx := i*389 + 336
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 929, 0})
	goto inst926
inst929_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst948
	}
	goto unreachable

	goto unreachable
	goto inst930
inst930: // alt -> 925, 948
	{
		idx := i*389 + 337
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 930, 0})
	goto inst925
inst930_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst948
	}
	goto unreachable

	goto unreachable
	goto inst943
inst943: // rune "09AFaf" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1065
			}
			goto inst943_fail
		}
	}
	goto inst943_fail
	goto unreachable
	goto inst943_fail
inst943_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 944:
			goto inst944_alt
		}
	}
	goto fail

	goto unreachable
	goto inst932
inst932: // rune "09AFaf" -> 938
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst938
			}
			goto inst932_fail
		}
	}
	goto inst932_fail
	goto unreachable
	goto inst932_fail
inst932_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 948:
			goto inst948_alt
		}
	}
	goto fail

	goto unreachable
	goto inst933
inst933: // rune "09AFaf" -> 937
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst937
			}
			goto inst933_fail
		}
	}
	goto inst933_fail
	goto unreachable
	goto inst933_fail
inst933_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 938:
			goto inst938_alt
		}
	}
	goto fail

	goto unreachable
	goto inst934
inst934: // rune "09AFaf" -> 936
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst936
			}
			goto inst934_fail
		}
	}
	goto inst934_fail
	goto unreachable
	goto inst934_fail
inst934_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 937:
			goto inst937_alt
		}
	}
	goto fail

	goto unreachable
	goto inst935
inst935: // rune "09AFaf" -> 947
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst947
			}
			goto inst935_fail
		}
	}
	goto inst935_fail
	goto unreachable
	goto inst935_fail
inst935_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 936:
			goto inst936_alt
		}
	}
	goto fail

	goto unreachable
	goto inst936
inst936: // alt -> 935, 947
	{
		idx := i*389 + 338
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 936, 0})
	goto inst935
inst936_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst947
	}
	goto unreachable

	goto unreachable
	goto inst937
inst937: // alt -> 934, 947
	{
		idx := i*389 + 339
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 937, 0})
	goto inst934
inst937_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst947
	}
	goto unreachable

	goto unreachable
	goto inst907
inst907: // string ":" -> 908
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst908
		}
	}
	goto inst907_fail
	goto unreachable
	goto inst907_fail
inst907_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 951:
			goto inst951_alt
		}
	}
	goto fail

	goto unreachable
	goto inst939
inst939: // string ":" -> 940
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst940
		}
	}
	goto inst939_fail
	goto unreachable
	goto inst939_fail
inst939_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 947:
			goto inst947_alt
		}
	}
	goto fail

	goto unreachable
	goto inst940
inst940: // rune "09AFaf" -> 946
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst946
			}
			goto inst940_fail
		}
	}
	goto inst940_fail
	goto unreachable
	goto inst940_fail
inst940_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 947:
			goto inst947_alt
		}
	}
	goto fail

	goto unreachable
	goto inst941
inst941: // rune "09AFaf" -> 945
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst945
			}
			goto inst941_fail
		}
	}
	goto inst941_fail
	goto unreachable
	goto inst941_fail
inst941_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 946:
			goto inst946_alt
		}
	}
	goto fail

	goto unreachable
	goto inst942
inst942: // rune "09AFaf" -> 944
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst944
			}
			goto inst942_fail
		}
	}
	goto inst942_fail
	goto unreachable
	goto inst942_fail
inst942_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 945:
			goto inst945_alt
		}
	}
	goto fail

	goto unreachable
	goto inst947
inst947: // alt -> 939, 1065
	{
		idx := i*389 + 340
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 947, 0})
	goto inst939
inst947_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst945
inst945: // alt -> 942, 1065
	{
		idx := i*389 + 341
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 945, 0})
	goto inst942
inst945_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst946
inst946: // alt -> 941, 1065
	{
		idx := i*389 + 342
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 946, 0})
	goto inst941
inst946_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst931
inst931: // string ":" -> 932
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst932
		}
	}
	goto inst931_fail
	goto unreachable
	goto inst931_fail
inst931_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 948:
			goto inst948_alt
		}
	}
	goto fail

	goto unreachable
	goto inst948
inst948: // alt -> 931, 1065
	{
		idx := i*389 + 343
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 948, 0})
	goto inst931
inst948_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1065
	}
	goto unreachable

	goto unreachable
	goto inst927
inst927: // rune "09AFaf" -> 948
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst948
			}
			goto inst927_fail
		}
	}
	goto inst927_fail
	goto unreachable
	goto inst927_fail
inst927_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 928:
			goto inst928_alt
		}
	}
	goto fail

	goto unreachable
	goto inst954
inst954: // rune "09AFaf" -> 960
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst960
			}
			goto inst954_fail
		}
	}
	goto inst954_fail
	goto unreachable
	goto inst954_fail
inst954_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 997:
			goto inst997_alt
		}
	}
	goto fail

	goto unreachable
	goto inst955
inst955: // rune "09AFaf" -> 959
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst959
			}
			goto inst955_fail
		}
	}
	goto inst955_fail
	goto unreachable
	goto inst955_fail
inst955_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 960:
			goto inst960_alt
		}
	}
	goto fail

	goto unreachable
	goto inst960
inst960: // alt -> 955, 996
	{
		idx := i*389 + 344
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 960, 0})
	goto inst955
inst960_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst996
	}
	goto unreachable

	goto unreachable
	goto inst938
inst938: // alt -> 933, 947
	{
		idx := i*389 + 345
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 938, 0})
	goto inst933
inst938_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst947
	}
	goto unreachable

	goto unreachable
	goto inst953
inst953: // string ":" -> 954
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst954
		}
	}
	goto inst953_fail
	goto unreachable
	goto inst953_fail
inst953_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 997:
			goto inst997_alt
		}
	}
	goto fail

	goto unreachable
	goto inst735
inst735: // alt -> 730, 736
	{
		idx := i*389 + 346
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 735, 0})
	goto inst730
inst735_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst736
	}
	goto unreachable

	goto unreachable
	goto inst996
inst996: // alt -> 961, 998
	{
		idx := i*389 + 347
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 996, 0})
	goto inst961
inst996_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst998
	}
	goto unreachable

	goto unreachable
	goto inst957
inst957: // rune "09AFaf" -> 996
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst996
			}
			goto inst957_fail
		}
	}
	goto inst957_fail
	goto unreachable
	goto inst957_fail
inst957_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 958:
			goto inst958_alt
		}
	}
	goto fail

	goto unreachable
	goto inst958
inst958: // alt -> 957, 996
	{
		idx := i*389 + 348
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 958, 0})
	goto inst957
inst958_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst996
	}
	goto unreachable

	goto unreachable
	goto inst956
inst956: // rune "09AFaf" -> 958
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst958
			}
			goto inst956_fail
		}
	}
	goto inst956_fail
	goto unreachable
	goto inst956_fail
inst956_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 959:
			goto inst959_alt
		}
	}
	goto fail

	goto unreachable
	goto inst959
inst959: // alt -> 956, 996
	{
		idx := i*389 + 349
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 959, 0})
	goto inst956
inst959_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst996
	}
	goto unreachable

	goto unreachable
	goto inst965
inst965: // rune "09AFaf" -> 995
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst995
			}
			goto inst965_fail
		}
	}
	goto inst965_fail
	goto unreachable
	goto inst965_fail
inst965_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 966:
			goto inst966_alt
		}
	}
	goto fail

	goto unreachable
	goto inst966
inst966: // alt -> 965, 995
	{
		idx := i*389 + 350
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 966, 0})
	goto inst965
inst966_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst995
	}
	goto unreachable

	goto unreachable
	goto inst967
inst967: // alt -> 964, 995
	{
		idx := i*389 + 351
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 967, 0})
	goto inst964
inst967_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst995
	}
	goto unreachable

	goto unreachable
	goto inst961
inst961: // string ":" -> 962
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst962
		}
	}
	goto inst961_fail
	goto unreachable
	goto inst961_fail
inst961_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 996:
			goto inst996_alt
		}
	}
	goto fail

	goto unreachable
	goto inst962
inst962: // rune "09AFaf" -> 968
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst968
			}
			goto inst962_fail
		}
	}
	goto inst962_fail
	goto unreachable
	goto inst962_fail
inst962_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 996:
			goto inst996_alt
		}
	}
	goto fail

	goto unreachable
	goto inst963
inst963: // rune "09AFaf" -> 967
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst967
			}
			goto inst963_fail
		}
	}
	goto inst963_fail
	goto unreachable
	goto inst963_fail
inst963_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 968:
			goto inst968_alt
		}
	}
	goto fail

	goto unreachable
	goto inst964
inst964: // rune "09AFaf" -> 966
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst966
			}
			goto inst964_fail
		}
	}
	goto inst964_fail
	goto unreachable
	goto inst964_fail
inst964_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 967:
			goto inst967_alt
		}
	}
	goto fail

	goto unreachable
	goto inst968
inst968: // alt -> 963, 995
	{
		idx := i*389 + 352
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 968, 0})
	goto inst963
inst968_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst995
	}
	goto unreachable

	goto unreachable
	goto inst994
inst994: // alt -> 977, 998
	{
		idx := i*389 + 353
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 994, 0})
	goto inst977
inst994_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst998
	}
	goto unreachable

	goto unreachable
	goto inst995
inst995: // alt -> 969, 998
	{
		idx := i*389 + 354
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 995, 0})
	goto inst969
inst995_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst998
	}
	goto unreachable

	goto unreachable
	goto inst969
inst969: // string ":" -> 970
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst970
		}
	}
	goto inst969_fail
	goto unreachable
	goto inst969_fail
inst969_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 995:
			goto inst995_alt
		}
	}
	goto fail

	goto unreachable
	goto inst970
inst970: // rune "09AFaf" -> 976
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst976
			}
			goto inst970_fail
		}
	}
	goto inst970_fail
	goto unreachable
	goto inst970_fail
inst970_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 995:
			goto inst995_alt
		}
	}
	goto fail

	goto unreachable
	goto inst971
inst971: // rune "09AFaf" -> 975
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst975
			}
			goto inst971_fail
		}
	}
	goto inst971_fail
	goto unreachable
	goto inst971_fail
inst971_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 976:
			goto inst976_alt
		}
	}
	goto fail

	goto unreachable
	goto inst972
inst972: // rune "09AFaf" -> 974
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst974
			}
			goto inst972_fail
		}
	}
	goto inst972_fail
	goto unreachable
	goto inst972_fail
inst972_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 975:
			goto inst975_alt
		}
	}
	goto fail

	goto unreachable
	goto inst973
inst973: // rune "09AFaf" -> 994
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst994
			}
			goto inst973_fail
		}
	}
	goto inst973_fail
	goto unreachable
	goto inst973_fail
inst973_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 974:
			goto inst974_alt
		}
	}
	goto fail

	goto unreachable
	goto inst974
inst974: // alt -> 973, 994
	{
		idx := i*389 + 355
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 974, 0})
	goto inst973
inst974_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst994
	}
	goto unreachable

	goto unreachable
	goto inst975
inst975: // alt -> 972, 994
	{
		idx := i*389 + 356
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 975, 0})
	goto inst972
inst975_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst994
	}
	goto unreachable

	goto unreachable
	goto inst976
inst976: // alt -> 971, 994
	{
		idx := i*389 + 357
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 976, 0})
	goto inst971
inst976_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst994
	}
	goto unreachable

	goto unreachable
	goto inst977
inst977: // string ":" -> 978
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst978
		}
	}
	goto inst977_fail
	goto unreachable
	goto inst977_fail
inst977_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 994:
			goto inst994_alt
		}
	}
	goto fail

	goto unreachable
	goto inst978
inst978: // rune "09AFaf" -> 984
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst984
			}
			goto inst978_fail
		}
	}
	goto inst978_fail
	goto unreachable
	goto inst978_fail
inst978_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 994:
			goto inst994_alt
		}
	}
	goto fail

	goto unreachable
	goto inst979
inst979: // rune "09AFaf" -> 983
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst983
			}
			goto inst979_fail
		}
	}
	goto inst979_fail
	goto unreachable
	goto inst979_fail
inst979_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 984:
			goto inst984_alt
		}
	}
	goto fail

	goto unreachable
	goto inst980
inst980: // rune "09AFaf" -> 982
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst982
			}
			goto inst980_fail
		}
	}
	goto inst980_fail
	goto unreachable
	goto inst980_fail
inst980_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 983:
			goto inst983_alt
		}
	}
	goto fail

	goto unreachable
	goto inst981
inst981: // rune "09AFaf" -> 993
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst993
			}
			goto inst981_fail
		}
	}
	goto inst981_fail
	goto unreachable
	goto inst981_fail
inst981_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 982:
			goto inst982_alt
		}
	}
	goto fail

	goto unreachable
	goto inst982
inst982: // alt -> 981, 993
	{
		idx := i*389 + 358
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 982, 0})
	goto inst981
inst982_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst993
	}
	goto unreachable

	goto unreachable
	goto inst983
inst983: // alt -> 980, 993
	{
		idx := i*389 + 359
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 983, 0})
	goto inst980
inst983_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst993
	}
	goto unreachable

	goto unreachable
	goto inst984
inst984: // alt -> 979, 993
	{
		idx := i*389 + 360
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 984, 0})
	goto inst979
inst984_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst993
	}
	goto unreachable

	goto unreachable
	goto inst985
inst985: // string ":" -> 986
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst986
		}
	}
	goto inst985_fail
	goto unreachable
	goto inst985_fail
inst985_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 993:
			goto inst993_alt
		}
	}
	goto fail

	goto unreachable
	goto inst986
inst986: // rune "09AFaf" -> 992
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst992
			}
			goto inst986_fail
		}
	}
	goto inst986_fail
	goto unreachable
	goto inst986_fail
inst986_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 993:
			goto inst993_alt
		}
	}
	goto fail

	goto unreachable
	goto inst987
inst987: // rune "09AFaf" -> 991
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst991
			}
			goto inst987_fail
		}
	}
	goto inst987_fail
	goto unreachable
	goto inst987_fail
inst987_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 992:
			goto inst992_alt
		}
	}
	goto fail

	goto unreachable
	goto inst988
inst988: // rune "09AFaf" -> 990
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst990
			}
			goto inst988_fail
		}
	}
	goto inst988_fail
	goto unreachable
	goto inst988_fail
inst988_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 991:
			goto inst991_alt
		}
	}
	goto fail

	goto unreachable
	goto inst989
inst989: // rune "09AFaf" -> 998
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst998
			}
			goto inst989_fail
		}
	}
	goto inst989_fail
	goto unreachable
	goto inst989_fail
inst989_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 990:
			goto inst990_alt
		}
	}
	goto fail

	goto unreachable
	goto inst990
inst990: // alt -> 989, 998
	{
		idx := i*389 + 361
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 990, 0})
	goto inst989
inst990_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst998
	}
	goto unreachable

	goto unreachable
	goto inst991
inst991: // alt -> 988, 998
	{
		idx := i*389 + 362
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 991, 0})
	goto inst988
inst991_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst998
	}
	goto unreachable

	goto unreachable
	goto inst992
inst992: // alt -> 987, 998
	{
		idx := i*389 + 363
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 992, 0})
	goto inst987
inst992_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst998
	}
	goto unreachable

	goto unreachable
	goto inst993
inst993: // alt -> 985, 998
	{
		idx := i*389 + 364
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 993, 0})
	goto inst985
inst993_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst998
	}
	goto unreachable

	goto unreachable
	goto inst998
inst998: // string ":" -> 1012
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1012
		}
	}
	goto inst998_fail
	goto unreachable
	goto inst998_fail
inst998_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 958:
			goto inst958_alt
		case 959:
			goto inst959_alt
		case 960:
			goto inst960_alt
		case 966:
			goto inst966_alt
		case 967:
			goto inst967_alt
		case 968:
			goto inst968_alt
		case 974:
			goto inst974_alt
		case 975:
			goto inst975_alt
		case 976:
			goto inst976_alt
		case 982:
			goto inst982_alt
		case 983:
			goto inst983_alt
		case 984:
			goto inst984_alt
		case 990:
			goto inst990_alt
		case 991:
			goto inst991_alt
		case 992:
			goto inst992_alt
		case 993:
			goto inst993_alt
		case 994:
			goto inst994_alt
		case 995:
			goto inst995_alt
		case 996:
			goto inst996_alt
		case 997:
			goto inst997_alt
		case 1060:
			goto inst1060_alt
		}
	}
	goto fail

	goto unreachable
	goto inst734
inst734: // alt -> 731, 736
	{
		idx := i*389 + 365
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 734, 0})
	goto inst731
inst734_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst736
	}
	goto unreachable

	goto unreachable
	goto inst997
inst997: // alt -> 953, 998
	{
		idx := i*389 + 366
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 997, 0})
	goto inst953
inst997_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst998
	}
	goto unreachable

	goto unreachable
	goto inst730
inst730: // rune "09AFaf" -> 734
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst734
			}
			goto inst730_fail
		}
	}
	goto inst730_fail
	goto unreachable
	goto inst730_fail
inst730_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 735:
			goto inst735_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1046
inst1046: // rune "05" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1065
		}
	}
	goto inst1046_fail
	goto unreachable
	goto inst1046_fail
inst1046_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1049:
			goto inst1049_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1000
inst1000: // string "5" -> 1001
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst1001
		}
	}
	goto inst1000_fail
	goto unreachable
	goto inst1000_fail
inst1000_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1004:
			goto inst1004_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1045
inst1045: // string "5" -> 1046
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst1046
		}
	}
	goto inst1045_fail
	goto unreachable
	goto inst1045_fail
inst1045_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1049:
			goto inst1049_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1001
inst1001: // rune "05" -> 1013
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1013
		}
	}
	goto inst1001_fail
	goto unreachable
	goto inst1001_fail
inst1001_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1004:
			goto inst1004_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1002
inst1002: // rune "04" -> 1003
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst1003
		}
	}
	goto inst1002_fail
	goto unreachable
	goto inst1002_fail
inst1002_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1008:
			goto inst1008_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1003
inst1003: // rune "09" -> 1013
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1013
		}
	}
	goto inst1003_fail
	goto unreachable
	goto inst1003_fail
inst1003_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1008:
			goto inst1008_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1004
inst1004: // alt -> 1000, 1002
	{
		idx := i*389 + 367
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1004, 0})
	goto inst1000
inst1004_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1002
	}
	goto unreachable

	goto unreachable
	goto inst1006
inst1006: // rune "09" -> 1007
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1007
		}
	}
	goto inst1006_fail
	goto unreachable
	goto inst1006_fail
inst1006_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1012:
			goto inst1012_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1008
inst1008: // alt -> 999, 1005
	{
		idx := i*389 + 368
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1008, 0})
	goto inst999
inst1008_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1005
	}
	goto unreachable

	goto unreachable
	goto inst999
inst999: // string "2" -> 1004
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst1004
		}
	}
	goto inst999_fail
	goto unreachable
	goto inst999_fail
inst999_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1008:
			goto inst1008_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1007
inst1007: // rune "09" -> 1013
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1013
		}
	}
	goto inst1007_fail
	goto unreachable
	goto inst1007_fail
inst1007_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1012:
			goto inst1012_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1005
inst1005: // string "1" -> 1006
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst1006
		}
	}
	goto inst1005_fail
	goto unreachable
	goto inst1005_fail
inst1005_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1012:
			goto inst1012_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1012
inst1012: // alt -> 1008, 1010
	{
		idx := i*389 + 369
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1012, 0})
	goto inst1008
inst1012_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1010
	}
	goto unreachable

	goto unreachable
	goto inst1009
inst1009: // rune "19" -> 1011
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst1011
		}
	}
	goto inst1009_fail
	goto unreachable
	goto inst1009_fail
inst1009_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1010:
			goto inst1010_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1010
inst1010: // alt -> 1009, 1011
	{
		idx := i*389 + 370
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1010, 0})
	goto inst1009
inst1010_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1011
	}
	goto unreachable

	goto unreachable
	goto inst1011
inst1011: // rune "09" -> 1013
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1013
		}
	}
	goto inst1011_fail
	goto unreachable
	goto inst1011_fail
inst1011_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 958:
			goto inst958_alt
		case 959:
			goto inst959_alt
		case 960:
			goto inst960_alt
		case 966:
			goto inst966_alt
		case 967:
			goto inst967_alt
		case 968:
			goto inst968_alt
		case 974:
			goto inst974_alt
		case 975:
			goto inst975_alt
		case 976:
			goto inst976_alt
		case 982:
			goto inst982_alt
		case 983:
			goto inst983_alt
		case 984:
			goto inst984_alt
		case 990:
			goto inst990_alt
		case 991:
			goto inst991_alt
		case 992:
			goto inst992_alt
		case 993:
			goto inst993_alt
		case 994:
			goto inst994_alt
		case 995:
			goto inst995_alt
		case 996:
			goto inst996_alt
		case 997:
			goto inst997_alt
		case 1010:
			goto inst1010_alt
		case 1060:
			goto inst1060_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1013
inst1013: // string "." -> 1027
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst1027
		}
	}
	goto inst1013_fail
	goto unreachable
	goto inst1013_fail
inst1013_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 958:
			goto inst958_alt
		case 959:
			goto inst959_alt
		case 960:
			goto inst960_alt
		case 966:
			goto inst966_alt
		case 967:
			goto inst967_alt
		case 968:
			goto inst968_alt
		case 974:
			goto inst974_alt
		case 975:
			goto inst975_alt
		case 976:
			goto inst976_alt
		case 982:
			goto inst982_alt
		case 983:
			goto inst983_alt
		case 984:
			goto inst984_alt
		case 990:
			goto inst990_alt
		case 991:
			goto inst991_alt
		case 992:
			goto inst992_alt
		case 993:
			goto inst993_alt
		case 994:
			goto inst994_alt
		case 995:
			goto inst995_alt
		case 996:
			goto inst996_alt
		case 997:
			goto inst997_alt
		case 1004:
			goto inst1004_alt
		case 1008:
			goto inst1008_alt
		case 1010:
			goto inst1010_alt
		case 1012:
			goto inst1012_alt
		case 1060:
			goto inst1060_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1019
inst1019: // alt -> 1015, 1017
	{
		idx := i*389 + 371
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1019, 0})
	goto inst1015
inst1019_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1017
	}
	goto unreachable

	goto unreachable
	goto inst1014
inst1014: // string "2" -> 1019
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst1019
		}
	}
	goto inst1014_fail
	goto unreachable
	goto inst1014_fail
inst1014_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1023:
			goto inst1023_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1015
inst1015: // string "5" -> 1016
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst1016
		}
	}
	goto inst1015_fail
	goto unreachable
	goto inst1015_fail
inst1015_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1019:
			goto inst1019_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1016
inst1016: // rune "05" -> 1028
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1028
		}
	}
	goto inst1016_fail
	goto unreachable
	goto inst1016_fail
inst1016_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1019:
			goto inst1019_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1017
inst1017: // rune "04" -> 1018
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst1018
		}
	}
	goto inst1017_fail
	goto unreachable
	goto inst1017_fail
inst1017_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1023:
			goto inst1023_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1018
inst1018: // rune "09" -> 1028
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1028
		}
	}
	goto inst1018_fail
	goto unreachable
	goto inst1018_fail
inst1018_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1023:
			goto inst1023_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1023
inst1023: // alt -> 1014, 1020
	{
		idx := i*389 + 372
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1023, 0})
	goto inst1014
inst1023_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1020
	}
	goto unreachable

	goto unreachable
	goto inst1020
inst1020: // string "1" -> 1021
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst1021
		}
	}
	goto inst1020_fail
	goto unreachable
	goto inst1020_fail
inst1020_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1027:
			goto inst1027_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1021
inst1021: // rune "09" -> 1022
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1022
		}
	}
	goto inst1021_fail
	goto unreachable
	goto inst1021_fail
inst1021_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1027:
			goto inst1027_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1022
inst1022: // rune "09" -> 1028
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1028
		}
	}
	goto inst1022_fail
	goto unreachable
	goto inst1022_fail
inst1022_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1027:
			goto inst1027_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1027
inst1027: // alt -> 1023, 1025
	{
		idx := i*389 + 373
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1027, 0})
	goto inst1023
inst1027_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1025
	}
	goto unreachable

	goto unreachable
	goto inst1024
inst1024: // rune "19" -> 1026
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst1026
		}
	}
	goto inst1024_fail
	goto unreachable
	goto inst1024_fail
inst1024_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1025:
			goto inst1025_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1025
inst1025: // alt -> 1024, 1026
	{
		idx := i*389 + 374
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1025, 0})
	goto inst1024
inst1025_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1026
	}
	goto unreachable

	goto unreachable
	goto inst1026
inst1026: // rune "09" -> 1028
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1028
		}
	}
	goto inst1026_fail
	goto unreachable
	goto inst1026_fail
inst1026_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 958:
			goto inst958_alt
		case 959:
			goto inst959_alt
		case 960:
			goto inst960_alt
		case 966:
			goto inst966_alt
		case 967:
			goto inst967_alt
		case 968:
			goto inst968_alt
		case 974:
			goto inst974_alt
		case 975:
			goto inst975_alt
		case 976:
			goto inst976_alt
		case 982:
			goto inst982_alt
		case 983:
			goto inst983_alt
		case 984:
			goto inst984_alt
		case 990:
			goto inst990_alt
		case 991:
			goto inst991_alt
		case 992:
			goto inst992_alt
		case 993:
			goto inst993_alt
		case 994:
			goto inst994_alt
		case 995:
			goto inst995_alt
		case 996:
			goto inst996_alt
		case 997:
			goto inst997_alt
		case 1004:
			goto inst1004_alt
		case 1008:
			goto inst1008_alt
		case 1010:
			goto inst1010_alt
		case 1012:
			goto inst1012_alt
		case 1025:
			goto inst1025_alt
		case 1060:
			goto inst1060_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1028
inst1028: // string "." -> 1042
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst1042
		}
	}
	goto inst1028_fail
	goto unreachable
	goto inst1028_fail
inst1028_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 958:
			goto inst958_alt
		case 959:
			goto inst959_alt
		case 960:
			goto inst960_alt
		case 966:
			goto inst966_alt
		case 967:
			goto inst967_alt
		case 968:
			goto inst968_alt
		case 974:
			goto inst974_alt
		case 975:
			goto inst975_alt
		case 976:
			goto inst976_alt
		case 982:
			goto inst982_alt
		case 983:
			goto inst983_alt
		case 984:
			goto inst984_alt
		case 990:
			goto inst990_alt
		case 991:
			goto inst991_alt
		case 992:
			goto inst992_alt
		case 993:
			goto inst993_alt
		case 994:
			goto inst994_alt
		case 995:
			goto inst995_alt
		case 996:
			goto inst996_alt
		case 997:
			goto inst997_alt
		case 1004:
			goto inst1004_alt
		case 1008:
			goto inst1008_alt
		case 1010:
			goto inst1010_alt
		case 1012:
			goto inst1012_alt
		case 1019:
			goto inst1019_alt
		case 1023:
			goto inst1023_alt
		case 1025:
			goto inst1025_alt
		case 1027:
			goto inst1027_alt
		case 1060:
			goto inst1060_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1034
inst1034: // alt -> 1030, 1032
	{
		idx := i*389 + 375
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1034, 0})
	goto inst1030
inst1034_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1032
	}
	goto unreachable

	goto unreachable
	goto inst1029
inst1029: // string "2" -> 1034
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst1034
		}
	}
	goto inst1029_fail
	goto unreachable
	goto inst1029_fail
inst1029_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1038:
			goto inst1038_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1030
inst1030: // string "5" -> 1031
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst1031
		}
	}
	goto inst1030_fail
	goto unreachable
	goto inst1030_fail
inst1030_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1034:
			goto inst1034_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1031
inst1031: // rune "05" -> 1043
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1043
		}
	}
	goto inst1031_fail
	goto unreachable
	goto inst1031_fail
inst1031_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1034:
			goto inst1034_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1032
inst1032: // rune "04" -> 1033
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst1033
		}
	}
	goto inst1032_fail
	goto unreachable
	goto inst1032_fail
inst1032_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1038:
			goto inst1038_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1033
inst1033: // rune "09" -> 1043
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1043
		}
	}
	goto inst1033_fail
	goto unreachable
	goto inst1033_fail
inst1033_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1038:
			goto inst1038_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1038
inst1038: // alt -> 1029, 1035
	{
		idx := i*389 + 376
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1038, 0})
	goto inst1029
inst1038_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1035
	}
	goto unreachable

	goto unreachable
	goto inst1035
inst1035: // string "1" -> 1036
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst1036
		}
	}
	goto inst1035_fail
	goto unreachable
	goto inst1035_fail
inst1035_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1042:
			goto inst1042_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1036
inst1036: // rune "09" -> 1037
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1037
		}
	}
	goto inst1036_fail
	goto unreachable
	goto inst1036_fail
inst1036_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1042:
			goto inst1042_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1037
inst1037: // rune "09" -> 1043
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1043
		}
	}
	goto inst1037_fail
	goto unreachable
	goto inst1037_fail
inst1037_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1042:
			goto inst1042_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1042
inst1042: // alt -> 1038, 1040
	{
		idx := i*389 + 377
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1042, 0})
	goto inst1038
inst1042_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1040
	}
	goto unreachable

	goto unreachable
	goto inst1039
inst1039: // rune "19" -> 1041
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst1041
		}
	}
	goto inst1039_fail
	goto unreachable
	goto inst1039_fail
inst1039_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1040:
			goto inst1040_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1040
inst1040: // alt -> 1039, 1041
	{
		idx := i*389 + 378
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1040, 0})
	goto inst1039
inst1040_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1041
	}
	goto unreachable

	goto unreachable
	goto inst1041
inst1041: // rune "09" -> 1043
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1043
		}
	}
	goto inst1041_fail
	goto unreachable
	goto inst1041_fail
inst1041_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 958:
			goto inst958_alt
		case 959:
			goto inst959_alt
		case 960:
			goto inst960_alt
		case 966:
			goto inst966_alt
		case 967:
			goto inst967_alt
		case 968:
			goto inst968_alt
		case 974:
			goto inst974_alt
		case 975:
			goto inst975_alt
		case 976:
			goto inst976_alt
		case 982:
			goto inst982_alt
		case 983:
			goto inst983_alt
		case 984:
			goto inst984_alt
		case 990:
			goto inst990_alt
		case 991:
			goto inst991_alt
		case 992:
			goto inst992_alt
		case 993:
			goto inst993_alt
		case 994:
			goto inst994_alt
		case 995:
			goto inst995_alt
		case 996:
			goto inst996_alt
		case 997:
			goto inst997_alt
		case 1004:
			goto inst1004_alt
		case 1008:
			goto inst1008_alt
		case 1010:
			goto inst1010_alt
		case 1012:
			goto inst1012_alt
		case 1019:
			goto inst1019_alt
		case 1023:
			goto inst1023_alt
		case 1025:
			goto inst1025_alt
		case 1027:
			goto inst1027_alt
		case 1040:
			goto inst1040_alt
		case 1060:
			goto inst1060_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1043
inst1043: // string "." -> 1057
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst1057
		}
	}
	goto inst1043_fail
	goto unreachable
	goto inst1043_fail
inst1043_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 958:
			goto inst958_alt
		case 959:
			goto inst959_alt
		case 960:
			goto inst960_alt
		case 966:
			goto inst966_alt
		case 967:
			goto inst967_alt
		case 968:
			goto inst968_alt
		case 974:
			goto inst974_alt
		case 975:
			goto inst975_alt
		case 976:
			goto inst976_alt
		case 982:
			goto inst982_alt
		case 983:
			goto inst983_alt
		case 984:
			goto inst984_alt
		case 990:
			goto inst990_alt
		case 991:
			goto inst991_alt
		case 992:
			goto inst992_alt
		case 993:
			goto inst993_alt
		case 994:
			goto inst994_alt
		case 995:
			goto inst995_alt
		case 996:
			goto inst996_alt
		case 997:
			goto inst997_alt
		case 1004:
			goto inst1004_alt
		case 1008:
			goto inst1008_alt
		case 1010:
			goto inst1010_alt
		case 1012:
			goto inst1012_alt
		case 1019:
			goto inst1019_alt
		case 1023:
			goto inst1023_alt
		case 1025:
			goto inst1025_alt
		case 1027:
			goto inst1027_alt
		case 1034:
			goto inst1034_alt
		case 1038:
			goto inst1038_alt
		case 1040:
			goto inst1040_alt
		case 1042:
			goto inst1042_alt
		case 1060:
			goto inst1060_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1049
inst1049: // alt -> 1045, 1047
	{
		idx := i*389 + 379
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1049, 0})
	goto inst1045
inst1049_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1047
	}
	goto unreachable

	goto unreachable
	goto inst1044
inst1044: // string "2" -> 1049
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst1049
		}
	}
	goto inst1044_fail
	goto unreachable
	goto inst1044_fail
inst1044_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1053:
			goto inst1053_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1047
inst1047: // rune "04" -> 1048
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst1048
		}
	}
	goto inst1047_fail
	goto unreachable
	goto inst1047_fail
inst1047_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1053:
			goto inst1053_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1048
inst1048: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst1048_fail
	goto unreachable
	goto inst1048_fail
inst1048_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1053:
			goto inst1053_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1057
inst1057: // alt -> 1053, 1055
	{
		idx := i*389 + 380
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1057, 0})
	goto inst1053
inst1057_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1055
	}
	goto unreachable

	goto unreachable
	goto inst1052
inst1052: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst1052_fail
	goto unreachable
	goto inst1052_fail
inst1052_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1057:
			goto inst1057_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1053
inst1053: // alt -> 1044, 1050
	{
		idx := i*389 + 381
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1053, 0})
	goto inst1044
inst1053_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1050
	}
	goto unreachable

	goto unreachable
	goto inst1050
inst1050: // string "1" -> 1051
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst1051
		}
	}
	goto inst1050_fail
	goto unreachable
	goto inst1050_fail
inst1050_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1057:
			goto inst1057_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1051
inst1051: // rune "09" -> 1052
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1052
		}
	}
	goto inst1051_fail
	goto unreachable
	goto inst1051_fail
inst1051_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1057:
			goto inst1057_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1056
inst1056: // rune "09" -> 1065
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1065
		}
	}
	goto inst1056_fail
	goto unreachable
	goto inst1056_fail
inst1056_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 958:
			goto inst958_alt
		case 959:
			goto inst959_alt
		case 960:
			goto inst960_alt
		case 966:
			goto inst966_alt
		case 967:
			goto inst967_alt
		case 968:
			goto inst968_alt
		case 974:
			goto inst974_alt
		case 975:
			goto inst975_alt
		case 976:
			goto inst976_alt
		case 982:
			goto inst982_alt
		case 983:
			goto inst983_alt
		case 984:
			goto inst984_alt
		case 990:
			goto inst990_alt
		case 991:
			goto inst991_alt
		case 992:
			goto inst992_alt
		case 993:
			goto inst993_alt
		case 994:
			goto inst994_alt
		case 995:
			goto inst995_alt
		case 996:
			goto inst996_alt
		case 997:
			goto inst997_alt
		case 1004:
			goto inst1004_alt
		case 1008:
			goto inst1008_alt
		case 1010:
			goto inst1010_alt
		case 1012:
			goto inst1012_alt
		case 1019:
			goto inst1019_alt
		case 1023:
			goto inst1023_alt
		case 1025:
			goto inst1025_alt
		case 1027:
			goto inst1027_alt
		case 1034:
			goto inst1034_alt
		case 1038:
			goto inst1038_alt
		case 1040:
			goto inst1040_alt
		case 1042:
			goto inst1042_alt
		case 1055:
			goto inst1055_alt
		case 1060:
			goto inst1060_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1058
inst1058: // alt -> 891, 997
	{
		idx := i*389 + 382
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1058, 0})
	goto inst891
inst1058_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst997
	}
	goto unreachable

	goto unreachable
	goto inst1054
inst1054: // rune "19" -> 1056
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst1056
		}
	}
	goto inst1054_fail
	goto unreachable
	goto inst1054_fail
inst1054_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1055:
			goto inst1055_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1055
inst1055: // alt -> 1054, 1056
	{
		idx := i*389 + 383
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1055, 0})
	goto inst1054
inst1055_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1056
	}
	goto unreachable

	goto unreachable
	goto inst729
inst729: // rune "09AFaf" -> 735
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst735
			}
			goto inst729_fail
		}
	}
	goto inst729_fail
	goto unreachable
	goto inst729_fail
inst729_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1061:
			goto inst1061_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1059
inst1059: // string ":" -> 1065
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1065
		}
	}
	goto inst1059_fail
	goto unreachable
	goto inst1059_fail
inst1059_fail:
	goto fail

	goto unreachable
	goto inst1060
inst1060: // alt -> 1058, 1059
	{
		idx := i*389 + 384
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1060, 0})
	goto inst1058
inst1060_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1059
	}
	goto unreachable

	goto unreachable
	goto inst889
inst889: // alt -> 728, 729
	{
		idx := i*389 + 385
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 889, 0})
	goto inst728
inst889_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst729
	}
	goto unreachable

	goto unreachable
	goto inst1061
inst1061: // alt -> 889, 890
	{
		idx := i*389 + 386
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIPv6{c, i, 1061, 0})
	goto inst889
inst1061_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst890
	}
	goto unreachable

	goto unreachable
	goto inst890
inst890: // string ":" -> 1060
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1060
		}
	}
	goto inst890_fail
	goto unreachable
	goto inst890_fail
inst890_fail:
	goto fail

	goto unreachable
	goto inst1062
inst1062: // string "%" -> 1063
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "%" {
			i += 1
			goto inst1063
		}
	}
	goto inst1062_fail
	goto unreachable
	goto inst1062_fail
inst1062_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1065:
			goto inst1065_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1063
inst1063: // anynotnl -> 1064
	if i < 0 || i >= len(r) {
		goto inst1063_fail
	}
	{
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cr == rune('\n') {
			goto inst1063_fail
		}
		i += sz
		goto inst1064
	}
	goto unreachable
	goto inst1063_fail
inst1063_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1065:
			goto inst1065_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1064
inst1064: // alt -> 1063, 1067
	{
		idx := i*389 + 387
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 1064 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst1063
		}
	}
	bt = append(bt, stateIPv6{c, i, 1064, 0})
	goto inst1063
inst1064_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst1067
	}
	goto unreachable

	goto unreachable
	goto inst1067
inst1067: // alt -> 1066, 1068
	{
		idx := i*389 + 388
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 1067 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst1066
		}
	}
	bt = append(bt, stateIPv6{c, i, 1067, 0})
	goto inst1066
inst1067_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst1068
	}
	goto unreachable

	goto unreachable
	goto inst1066
inst1066: // rune "\t\n\f\r  " -> 1067
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1067
			}
			goto inst1066_fail
		}
	}
	goto inst1066_fail
	goto unreachable
	goto inst1066_fail
inst1066_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1067:
			goto inst1067_alt
		}
	}
	goto fail

	// inst0 unreacheable

	goto unreachable
	goto inst1068
inst1068: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 7:
				goto inst7_alt
			case 6:
				goto inst6_alt
			case 5:
				goto inst5_alt
			case 15:
				goto inst15_alt
			case 14:
				goto inst14_alt
			case 13:
				goto inst13_alt
			case 23:
				goto inst23_alt
			case 22:
				goto inst22_alt
			case 21:
				goto inst21_alt
			case 31:
				goto inst31_alt
			case 30:
				goto inst30_alt
			case 29:
				goto inst29_alt
			case 39:
				goto inst39_alt
			case 38:
				goto inst38_alt
			case 37:
				goto inst37_alt
			case 47:
				goto inst47_alt
			case 46:
				goto inst46_alt
			case 45:
				goto inst45_alt
			case 55:
				goto inst55_alt
			case 54:
				goto inst54_alt
			case 53:
				goto inst53_alt
			case 65:
				goto inst65_alt
			case 63:
				goto inst63_alt
			case 62:
				goto inst62_alt
			case 184:
				goto inst184_alt
			case 72:
				goto inst72_alt
			case 71:
				goto inst71_alt
			case 70:
				goto inst70_alt
			case 80:
				goto inst80_alt
			case 79:
				goto inst79_alt
			case 78:
				goto inst78_alt
			case 88:
				goto inst88_alt
			case 87:
				goto inst87_alt
			case 86:
				goto inst86_alt
			case 96:
				goto inst96_alt
			case 95:
				goto inst95_alt
			case 94:
				goto inst94_alt
			case 104:
				goto inst104_alt
			case 103:
				goto inst103_alt
			case 102:
				goto inst102_alt
			case 112:
				goto inst112_alt
			case 111:
				goto inst111_alt
			case 110:
				goto inst110_alt
			case 181:
				goto inst181_alt
			case 183:
				goto inst183_alt
			case 121:
				goto inst121_alt
			case 120:
				goto inst120_alt
			case 135:
				goto inst135_alt
			case 127:
				goto inst127_alt
			case 131:
				goto inst131_alt
			case 133:
				goto inst133_alt
			case 142:
				goto inst142_alt
			case 150:
				goto inst150_alt
			case 146:
				goto inst146_alt
			case 148:
				goto inst148_alt
			case 157:
				goto inst157_alt
			case 165:
				goto inst165_alt
			case 161:
				goto inst161_alt
			case 163:
				goto inst163_alt
			case 180:
				goto inst180_alt
			case 176:
				goto inst176_alt
			case 178:
				goto inst178_alt
			case 305:
				goto inst305_alt
			case 172:
				goto inst172_alt
			case 191:
				goto inst191_alt
			case 190:
				goto inst190_alt
			case 189:
				goto inst189_alt
			case 199:
				goto inst199_alt
			case 198:
				goto inst198_alt
			case 197:
				goto inst197_alt
			case 207:
				goto inst207_alt
			case 206:
				goto inst206_alt
			case 205:
				goto inst205_alt
			case 215:
				goto inst215_alt
			case 214:
				goto inst214_alt
			case 213:
				goto inst213_alt
			case 223:
				goto inst223_alt
			case 222:
				goto inst222_alt
			case 221:
				goto inst221_alt
			case 304:
				goto inst304_alt
			case 232:
				goto inst232_alt
			case 231:
				goto inst231_alt
			case 241:
				goto inst241_alt
			case 230:
				goto inst230_alt
			case 240:
				goto inst240_alt
			case 239:
				goto inst239_alt
			case 238:
				goto inst238_alt
			case 303:
				goto inst303_alt
			case 248:
				goto inst248_alt
			case 252:
				goto inst252_alt
			case 256:
				goto inst256_alt
			case 254:
				goto inst254_alt
			case 263:
				goto inst263_alt
			case 271:
				goto inst271_alt
			case 267:
				goto inst267_alt
			case 269:
				goto inst269_alt
			case 278:
				goto inst278_alt
			case 286:
				goto inst286_alt
			case 282:
				goto inst282_alt
			case 284:
				goto inst284_alt
			case 301:
				goto inst301_alt
			case 297:
				goto inst297_alt
			case 299:
				goto inst299_alt
			case 293:
				goto inst293_alt
			case 436:
				goto inst436_alt
			case 312:
				goto inst312_alt
			case 311:
				goto inst311_alt
			case 310:
				goto inst310_alt
			case 320:
				goto inst320_alt
			case 319:
				goto inst319_alt
			case 318:
				goto inst318_alt
			case 328:
				goto inst328_alt
			case 327:
				goto inst327_alt
			case 326:
				goto inst326_alt
			case 336:
				goto inst336_alt
			case 335:
				goto inst335_alt
			case 334:
				goto inst334_alt
			case 344:
				goto inst344_alt
			case 343:
				goto inst343_alt
			case 363:
				goto inst363_alt
			case 345:
				goto inst345_alt
			case 353:
				goto inst353_alt
			case 352:
				goto inst352_alt
			case 351:
				goto inst351_alt
			case 362:
				goto inst362_alt
			case 361:
				goto inst361_alt
			case 435:
				goto inst435_alt
			case 433:
				goto inst433_alt
			case 360:
				goto inst360_alt
			case 372:
				goto inst372_alt
			case 371:
				goto inst371_alt
			case 370:
				goto inst370_alt
			case 369:
				goto inst369_alt
			case 379:
				goto inst379_alt
			case 387:
				goto inst387_alt
			case 383:
				goto inst383_alt
			case 385:
				goto inst385_alt
			case 394:
				goto inst394_alt
			case 402:
				goto inst402_alt
			case 398:
				goto inst398_alt
			case 400:
				goto inst400_alt
			case 409:
				goto inst409_alt
			case 417:
				goto inst417_alt
			case 413:
				goto inst413_alt
			case 415:
				goto inst415_alt
			case 424:
				goto inst424_alt
			case 432:
				goto inst432_alt
			case 428:
				goto inst428_alt
			case 430:
				goto inst430_alt
			case 577:
				goto inst577_alt
			case 443:
				goto inst443_alt
			case 442:
				goto inst442_alt
			case 441:
				goto inst441_alt
			case 451:
				goto inst451_alt
			case 450:
				goto inst450_alt
			case 449:
				goto inst449_alt
			case 459:
				goto inst459_alt
			case 458:
				goto inst458_alt
			case 457:
				goto inst457_alt
			case 466:
				goto inst466_alt
			case 467:
				goto inst467_alt
			case 495:
				goto inst495_alt
			case 468:
				goto inst468_alt
			case 476:
				goto inst476_alt
			case 474:
				goto inst474_alt
			case 494:
				goto inst494_alt
			case 475:
				goto inst475_alt
			case 484:
				goto inst484_alt
			case 483:
				goto inst483_alt
			case 482:
				goto inst482_alt
			case 493:
				goto inst493_alt
			case 576:
				goto inst576_alt
			case 574:
				goto inst574_alt
			case 492:
				goto inst492_alt
			case 491:
				goto inst491_alt
			case 513:
				goto inst513_alt
			case 503:
				goto inst503_alt
			case 502:
				goto inst502_alt
			case 501:
				goto inst501_alt
			case 512:
				goto inst512_alt
			case 511:
				goto inst511_alt
			case 510:
				goto inst510_alt
			case 509:
				goto inst509_alt
			case 359:
				goto inst359_alt
			case 520:
				goto inst520_alt
			case 524:
				goto inst524_alt
			case 528:
				goto inst528_alt
			case 526:
				goto inst526_alt
			case 535:
				goto inst535_alt
			case 539:
				goto inst539_alt
			case 541:
				goto inst541_alt
			case 543:
				goto inst543_alt
			case 550:
				goto inst550_alt
			case 554:
				goto inst554_alt
			case 556:
				goto inst556_alt
			case 558:
				goto inst558_alt
			case 565:
				goto inst565_alt
			case 569:
				goto inst569_alt
			case 571:
				goto inst571_alt
			case 573:
				goto inst573_alt
			case 490:
				goto inst490_alt
			case 583:
				goto inst583_alt
			case 582:
				goto inst582_alt
			case 119:
				goto inst119_alt
			case 592:
				goto inst592_alt
			case 590:
				goto inst590_alt
			case 591:
				goto inst591_alt
			case 61:
				goto inst61_alt
			case 637:
				goto inst637_alt
			case 599:
				goto inst599_alt
			case 607:
				goto inst607_alt
			case 608:
				goto inst608_alt
			case 609:
				goto inst609_alt
			case 1065:
				goto inst1065_alt
			case 636:
				goto inst636_alt
			case 615:
				goto inst615_alt
			case 616:
				goto inst616_alt
			case 635:
				goto inst635_alt
			case 617:
				goto inst617_alt
			case 623:
				goto inst623_alt
			case 624:
				goto inst624_alt
			case 625:
				goto inst625_alt
			case 634:
				goto inst634_alt
			case 631:
				goto inst631_alt
			case 632:
				goto inst632_alt
			case 633:
				goto inst633_alt
			case 600:
				goto inst600_alt
			case 601:
				goto inst601_alt
			case 643:
				goto inst643_alt
			case 644:
				goto inst644_alt
			case 651:
				goto inst651_alt
			case 652:
				goto inst652_alt
			case 653:
				goto inst653_alt
			case 645:
				goto inst645_alt
			case 659:
				goto inst659_alt
			case 660:
				goto inst660_alt
			case 661:
				goto inst661_alt
			case 662:
				goto inst662_alt
			case 663:
				goto inst663_alt
			case 664:
				goto inst664_alt
			case 671:
				goto inst671_alt
			case 677:
				goto inst677_alt
			case 675:
				goto inst675_alt
			case 679:
				goto inst679_alt
			case 686:
				goto inst686_alt
			case 692:
				goto inst692_alt
			case 690:
				goto inst690_alt
			case 694:
				goto inst694_alt
			case 705:
				goto inst705_alt
			case 701:
				goto inst701_alt
			case 707:
				goto inst707_alt
			case 709:
				goto inst709_alt
			case 716:
				goto inst716_alt
			case 720:
				goto inst720_alt
			case 727:
				goto inst727_alt
			case 722:
				goto inst722_alt
			case 724:
				goto inst724_alt
			case 725:
				goto inst725_alt
			case 728:
				goto inst728_alt
			case 733:
				goto inst733_alt
			case 789:
				goto inst789_alt
			case 752:
				goto inst752_alt
			case 584:
				goto inst584_alt
			case 742:
				goto inst742_alt
			case 788:
				goto inst788_alt
			case 744:
				goto inst744_alt
			case 743:
				goto inst743_alt
			case 750:
				goto inst750_alt
			case 751:
				goto inst751_alt
			case 787:
				goto inst787_alt
			case 758:
				goto inst758_alt
			case 759:
				goto inst759_alt
			case 760:
				goto inst760_alt
			case 766:
				goto inst766_alt
			case 767:
				goto inst767_alt
			case 768:
				goto inst768_alt
			case 774:
				goto inst774_alt
			case 775:
				goto inst775_alt
			case 776:
				goto inst776_alt
			case 782:
				goto inst782_alt
			case 783:
				goto inst783_alt
			case 784:
				goto inst784_alt
			case 785:
				goto inst785_alt
			case 786:
				goto inst786_alt
			case 825:
				goto inst825_alt
			case 796:
				goto inst796_alt
			case 795:
				goto inst795_alt
			case 824:
				goto inst824_alt
			case 803:
				goto inst803_alt
			case 804:
				goto inst804_alt
			case 805:
				goto inst805_alt
			case 797:
				goto inst797_alt
			case 811:
				goto inst811_alt
			case 812:
				goto inst812_alt
			case 813:
				goto inst813_alt
			case 819:
				goto inst819_alt
			case 820:
				goto inst820_alt
			case 821:
				goto inst821_alt
			case 822:
				goto inst822_alt
			case 823:
				goto inst823_alt
			case 832:
				goto inst832_alt
			case 838:
				goto inst838_alt
			case 836:
				goto inst836_alt
			case 840:
				goto inst840_alt
			case 847:
				goto inst847_alt
			case 853:
				goto inst853_alt
			case 851:
				goto inst851_alt
			case 855:
				goto inst855_alt
			case 862:
				goto inst862_alt
			case 868:
				goto inst868_alt
			case 866:
				goto inst866_alt
			case 870:
				goto inst870_alt
			case 877:
				goto inst877_alt
			case 881:
				goto inst881_alt
			case 888:
				goto inst888_alt
			case 883:
				goto inst883_alt
			case 885:
				goto inst885_alt
			case 886:
				goto inst886_alt
			case 952:
				goto inst952_alt
			case 905:
				goto inst905_alt
			case 951:
				goto inst951_alt
			case 906:
				goto inst906_alt
			case 896:
				goto inst896_alt
			case 897:
				goto inst897_alt
			case 898:
				goto inst898_alt
			case 904:
				goto inst904_alt
			case 913:
				goto inst913_alt
			case 914:
				goto inst914_alt
			case 912:
				goto inst912_alt
			case 949:
				goto inst949_alt
			case 950:
				goto inst950_alt
			case 920:
				goto inst920_alt
			case 921:
				goto inst921_alt
			case 922:
				goto inst922_alt
			case 944:
				goto inst944_alt
			case 928:
				goto inst928_alt
			case 929:
				goto inst929_alt
			case 930:
				goto inst930_alt
			case 936:
				goto inst936_alt
			case 937:
				goto inst937_alt
			case 947:
				goto inst947_alt
			case 945:
				goto inst945_alt
			case 946:
				goto inst946_alt
			case 948:
				goto inst948_alt
			case 960:
				goto inst960_alt
			case 938:
				goto inst938_alt
			case 735:
				goto inst735_alt
			case 996:
				goto inst996_alt
			case 958:
				goto inst958_alt
			case 959:
				goto inst959_alt
			case 966:
				goto inst966_alt
			case 967:
				goto inst967_alt
			case 968:
				goto inst968_alt
			case 994:
				goto inst994_alt
			case 995:
				goto inst995_alt
			case 974:
				goto inst974_alt
			case 975:
				goto inst975_alt
			case 976:
				goto inst976_alt
			case 982:
				goto inst982_alt
			case 983:
				goto inst983_alt
			case 984:
				goto inst984_alt
			case 990:
				goto inst990_alt
			case 991:
				goto inst991_alt
			case 992:
				goto inst992_alt
			case 993:
				goto inst993_alt
			case 734:
				goto inst734_alt
			case 997:
				goto inst997_alt
			case 1004:
				goto inst1004_alt
			case 1008:
				goto inst1008_alt
			case 1012:
				goto inst1012_alt
			case 1010:
				goto inst1010_alt
			case 1019:
				goto inst1019_alt
			case 1023:
				goto inst1023_alt
			case 1027:
				goto inst1027_alt
			case 1025:
				goto inst1025_alt
			case 1034:
				goto inst1034_alt
			case 1038:
				goto inst1038_alt
			case 1042:
				goto inst1042_alt
			case 1040:
				goto inst1040_alt
			case 1049:
				goto inst1049_alt
			case 1057:
				goto inst1057_alt
			case 1053:
				goto inst1053_alt
			case 1058:
				goto inst1058_alt
			case 1055:
				goto inst1055_alt
			case 1060:
				goto inst1060_alt
			case 889:
				goto inst889_alt
			case 1061:
				goto inst1061_alt
			case 1064:
				goto inst1064_alt
			case 1067:
				goto inst1067_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchIPv6 || m == modeFirstIPv6 {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
