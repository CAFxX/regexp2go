// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="GitRepo" -pool=true "((git|ssh|http(s)?)|(git@[\\w\\.]+))(:(\\/\\/)?)([\\w\\.@\\:/\\-~]+)(\\.git)(\\/)?"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const GitRepoRegexp = "((git|ssh|http(s)?)|(git@[\\w\\.]+))(:(\\/\\/)?)([\\w\\.@\\:/\\-~]+)(\\.git)(\\/)?"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeGitRepo uint8

const (
	modeMatchGitRepo modeTypeGitRepo = iota
	modeFirstGitRepo
	modeLongestGitRepo
)

// GitRepo implements the regular expression
// ((git|ssh|http(s)?)|(git@[\w\.]+))(:(\/\/)?)([\w\.@\:/\-~]+)(\.git)(\/)?
// with flags 212.
type GitRepo struct{}
type stateGitRepo struct {
	c   [20]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e GitRepo) FindString(r string) (matches [10]string, pos int, ok bool) {
	var bt [8]stateGitRepo // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstGitRepo, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e GitRepo) FindLongestString(r string) (matches [10]string, pos int, ok bool) {
	var bt [8]stateGitRepo // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestGitRepo, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e GitRepo) Find(s []byte) (matches [10][]byte, pos int, ok bool) {
	var bt [8]stateGitRepo // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstGitRepo, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e GitRepo) FindLongest(s []byte) (matches [10][]byte, pos int, ok bool) {
	var bt [8]stateGitRepo // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestGitRepo, bt[:0])
	return
}

func (e GitRepo) doByteSlice(s []byte, m modeTypeGitRepo, bt []stateGitRepo) (matches [10][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [10 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e GitRepo) doString(s string, m modeTypeGitRepo, bt []stateGitRepo) (matches [10]string, pos int, ok bool) {
	var pmatches [10 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e GitRepo) do(r string, m modeTypeGitRepo, bt []stateGitRepo) ([20]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*8 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]                                                                                  // fast reset dynamic backtracking state
	c := [20]int{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1} // captures
	var bc [20]int                                                                               // captures for the longest match so far
	matched := false                                                                             // succesful match flag
	i := si                                                                                      // current byte index
	c[0] = i                                                                                     // start of match
	goto inst1                                                                                   // initial instruction

	// inst5 unreacheable

	// inst0 unreacheable

	// inst12 unreacheable

	// inst7 unreacheable

	// inst13 unreacheable

	// inst8 unreacheable

	goto unreachable
	goto inst2
inst2: // cap 4 -> 18
	c[4] = i
	goto inst18

	goto unreachable
	goto inst18
inst18: // alt -> 9, 10
	{
		idx := i*8 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateGitRepo{c, i, 18, 0})
	goto inst9
inst18_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst10
	}
	goto unreachable

	goto unreachable
	goto inst10
inst10: // string "http" -> 17
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 4 && rs[:4] == "http" {
			i += 4
			goto inst17
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 28:
			goto inst28_alt
		}
	}
	goto fail

	goto unreachable
	goto inst9
inst9: // alt -> 3, 6
	{
		idx := i*8 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateGitRepo{c, i, 9, 0})
	goto inst3
inst9_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst6
	}
	goto unreachable

	goto unreachable
	goto inst3
inst3: // string "git" -> 19
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 3 && rs[:3] == "git" {
			i += 3
			goto inst19
		}
	}
	goto inst3_fail
	goto unreachable
	goto inst3_fail
inst3_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 9:
			goto inst9_alt
		}
	}
	goto fail

	goto unreachable
	goto inst6
inst6: // string "ssh" -> 19
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 3 && rs[:3] == "ssh" {
			i += 3
			goto inst19
		}
	}
	goto inst6_fail
	goto unreachable
	goto inst6_fail
inst6_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 18:
			goto inst18_alt
		}
	}
	goto fail

	goto unreachable
	goto inst17
inst17: // alt -> 14, 19
	{
		idx := i*8 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateGitRepo{c, i, 17, 0})
	goto inst14
inst17_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst19
	}
	goto unreachable

	goto unreachable
	goto inst19
inst19: // cap 5 -> 29
	c[5] = i
	goto inst29

	goto unreachable
	goto inst1
inst1: // cap 2 -> 28
	c[2] = i
	goto inst28

	goto unreachable
	goto inst28
inst28: // alt -> 2, 20
	{
		idx := i*8 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateGitRepo{c, i, 28, 0})
	goto inst2
inst28_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst20
	}
	goto unreachable

	goto unreachable
	goto inst16
inst16: // cap 7 -> 19
	c[7] = i
	goto inst19

	goto unreachable
	goto inst14
inst14: // cap 6 -> 15
	c[6] = i
	goto inst15

	goto unreachable
	goto inst15
inst15: // string "s" -> 16
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "s" {
			i += 1
			goto inst16
		}
	}
	goto inst15_fail
	goto unreachable
	goto inst15_fail
inst15_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 17:
			goto inst17_alt
		}
	}
	goto fail

	goto unreachable
	goto inst20
inst20: // cap 8 -> 21
	c[8] = i
	goto inst21

	goto unreachable
	goto inst21
inst21: // string "git@" -> 25
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 4 && rs[:4] == "git@" {
			i += 4
			goto inst25
		}
	}
	goto inst21_fail
	goto unreachable
	goto inst21_fail
inst21_fail:
	goto fail

	// inst22 unreacheable

	// inst23 unreacheable

	// inst24 unreacheable

	goto unreachable
	goto inst25
inst25: // rune "..09AZ__az" -> 26
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00@\xff\x03\xfe\xff\xff\x87\xfe\xff\xff\a"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst26
			}
			goto inst25_fail
		}
	}
	goto inst25_fail
	goto unreachable
	goto inst25_fail
inst25_fail:
	goto fail

	goto unreachable
	goto inst26
inst26: // alt -> 25, 27
	{
		idx := i*8 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 26 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst25
		}
	}
	bt = append(bt, stateGitRepo{c, i, 26, 0})
	goto inst25
inst26_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst27
	}
	goto unreachable

	goto unreachable
	goto inst27
inst27: // cap 9 -> 29
	c[9] = i
	goto inst29

	goto unreachable
	goto inst29
inst29: // cap 3 -> 30
	c[3] = i
	goto inst30

	goto unreachable
	goto inst30
inst30: // cap 10 -> 31
	c[10] = i
	goto inst31

	// inst11 unreacheable

	goto unreachable
	goto inst31
inst31: // string ":" -> 36
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst36
		}
	}
	goto inst31_fail
	goto unreachable
	goto inst31_fail
inst31_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 9:
			goto inst9_alt
		case 17:
			goto inst17_alt
		case 18:
			goto inst18_alt
		case 28:
			goto inst28_alt
		}
	}
	goto fail

	goto unreachable
	goto inst32
inst32: // cap 12 -> 33
	c[12] = i
	goto inst33

	goto unreachable
	goto inst33
inst33: // string "//" -> 35
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 2 && rs[:2] == "//" {
			i += 2
			goto inst35
		}
	}
	goto inst33_fail
	goto unreachable
	goto inst33_fail
inst33_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 36:
			goto inst36_alt
		}
	}
	goto fail

	// inst34 unreacheable

	goto unreachable
	goto inst35
inst35: // cap 13 -> 37
	c[13] = i
	goto inst37

	goto unreachable
	goto inst36
inst36: // alt -> 32, 37
	{
		idx := i*8 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateGitRepo{c, i, 36, 0})
	goto inst32
inst36_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst37
	}
	goto unreachable

	goto unreachable
	goto inst37
inst37: // cap 11 -> 38
	c[11] = i
	goto inst38

	// inst4 unreacheable

	goto unreachable
	goto inst38
inst38: // cap 14 -> 39
	c[14] = i
	goto inst39

	goto unreachable
	goto inst39
inst39: // rune "-:@Z__az~~" -> 40
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\xe0\xff\a\xff\xff\xff\x87\xfe\xff\xffG"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst40
			}
			goto inst39_fail
		}
	}
	goto inst39_fail
	goto unreachable
	goto inst39_fail
inst39_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 9:
			goto inst9_alt
		case 17:
			goto inst17_alt
		case 18:
			goto inst18_alt
		case 28:
			goto inst28_alt
		case 36:
			goto inst36_alt
		}
	}
	goto fail

	goto unreachable
	goto inst40
inst40: // alt -> 39, 41
	{
		idx := i*8 + 6
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 40 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst39
		}
	}
	bt = append(bt, stateGitRepo{c, i, 40, 0})
	goto inst39
inst40_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst41
	}
	goto unreachable

	goto unreachable
	goto inst41
inst41: // cap 15 -> 42
	c[15] = i
	goto inst42

	goto unreachable
	goto inst42
inst42: // cap 16 -> 43
	c[16] = i
	goto inst43

	goto unreachable
	goto inst43
inst43: // string ".git" -> 47
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 4 && rs[:4] == ".git" {
			i += 4
			goto inst47
		}
	}
	goto inst43_fail
	goto unreachable
	goto inst43_fail
inst43_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 9:
			goto inst9_alt
		case 17:
			goto inst17_alt
		case 18:
			goto inst18_alt
		case 28:
			goto inst28_alt
		case 36:
			goto inst36_alt
		}
	}
	goto fail

	// inst44 unreacheable

	// inst45 unreacheable

	// inst46 unreacheable

	goto unreachable
	goto inst47
inst47: // cap 17 -> 51
	c[17] = i
	goto inst51

	goto unreachable
	goto inst51
inst51: // alt -> 48, 52
	{
		idx := i*8 + 7
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateGitRepo{c, i, 51, 0})
	goto inst48
inst51_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst52
	}
	goto unreachable

	goto unreachable
	goto inst52
inst52: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto inst48
inst48: // cap 18 -> 49
	c[18] = i
	goto inst49

	goto unreachable
	goto inst49
inst49: // string "/" -> 50
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "/" {
			i += 1
			goto inst50
		}
	}
	goto inst49_fail
	goto unreachable
	goto inst49_fail
inst49_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst50
inst50: // cap 19 -> 52
	c[19] = i
	goto inst52

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 18:
				goto inst18_alt
			case 9:
				goto inst9_alt
			case 17:
				goto inst17_alt
			case 28:
				goto inst28_alt
			case 26:
				goto inst26_alt
			case 36:
				goto inst36_alt
			case 40:
				goto inst40_alt
			case 51:
				goto inst51_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchGitRepo || m == modeFirstGitRepo {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
