// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="NotKnownPort" -pool=true "6[0-5]{2}[0-3][0-5]|[1-5][\\d]{4}|[2-9][\\d]{3}|1[1-9][\\d]{2}|10[3-9][\\d]|102[4-9]"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const NotKnownPortRegexp = "6[0-5]{2}[0-3][0-5]|[1-5][\\d]{4}|[2-9][\\d]{3}|1[1-9][\\d]{2}|10[3-9][\\d]|102[4-9]"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeNotKnownPort uint8

const (
	modeMatchNotKnownPort modeTypeNotKnownPort = iota
	modeFirstNotKnownPort
	modeLongestNotKnownPort
)

// NotKnownPort implements the regular expression
// 6[0-5]{2}[0-3][0-5]|[1-5][\d]{4}|[2-9][\d]{3}|1[1-9][\d]{2}|10[3-9][\d]|102[4-9]
// with flags 212.
type NotKnownPort struct{}
type stateNotKnownPort struct {
	c   [2]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e NotKnownPort) FindString(r string) (matches [1]string, pos int, ok bool) {
	var bt [5]stateNotKnownPort // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstNotKnownPort, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e NotKnownPort) FindLongestString(r string) (matches [1]string, pos int, ok bool) {
	var bt [5]stateNotKnownPort // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestNotKnownPort, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e NotKnownPort) Find(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [5]stateNotKnownPort // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstNotKnownPort, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e NotKnownPort) FindLongest(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [5]stateNotKnownPort // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestNotKnownPort, bt[:0])
	return
}

func (e NotKnownPort) doByteSlice(s []byte, m modeTypeNotKnownPort, bt []stateNotKnownPort) (matches [1][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [1 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e NotKnownPort) doString(s string, m modeTypeNotKnownPort, bt []stateNotKnownPort) (matches [1]string, pos int, ok bool) {
	var pmatches [1 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e NotKnownPort) do(r string, m modeTypeNotKnownPort, bt []stateNotKnownPort) ([2]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*5 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]         // fast reset dynamic backtracking state
	c := [2]int{-1, -1} // captures
	var bc [2]int       // captures for the longest match so far
	matched := false    // succesful match flag
	i := si             // current byte index
	c[0] = i            // start of match
	goto inst28         // initial instruction

	// inst0 unreacheable

	goto unreachable
	goto inst1
inst1: // string "6" -> 2
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "6" {
			i += 1
			goto inst2
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 11:
			goto inst11_alt
		}
	}
	goto fail

	goto unreachable
	goto inst2
inst2: // rune "05" -> 3
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst3
		}
	}
	goto inst2_fail
	goto unreachable
	goto inst2_fail
inst2_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 11:
			goto inst11_alt
		}
	}
	goto fail

	goto unreachable
	goto inst11
inst11: // alt -> 1, 6
	{
		idx := i*5 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateNotKnownPort{c, i, 11, 0})
	goto inst1
inst11_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst6
	}
	goto unreachable

	goto unreachable
	goto inst6
inst6: // rune "15" -> 7
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 53 {
			i += sz
			goto inst7
		}
	}
	goto inst6_fail
	goto unreachable
	goto inst6_fail
inst6_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 16:
			goto inst16_alt
		}
	}
	goto fail

	goto unreachable
	goto inst7
inst7: // rune "09" -> 8
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst8
		}
	}
	goto inst7_fail
	goto unreachable
	goto inst7_fail
inst7_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 16:
			goto inst16_alt
		}
	}
	goto fail

	goto unreachable
	goto inst8
inst8: // rune "09" -> 9
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst9
		}
	}
	goto inst8_fail
	goto unreachable
	goto inst8_fail
inst8_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 16:
			goto inst16_alt
		}
	}
	goto fail

	goto unreachable
	goto inst9
inst9: // rune "09" -> 10
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst10
		}
	}
	goto inst9_fail
	goto unreachable
	goto inst9_fail
inst9_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 16:
			goto inst16_alt
		}
	}
	goto fail

	goto unreachable
	goto inst3
inst3: // rune "05" -> 4
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst4
		}
	}
	goto inst3_fail
	goto unreachable
	goto inst3_fail
inst3_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 11:
			goto inst11_alt
		}
	}
	goto fail

	goto unreachable
	goto inst16
inst16: // alt -> 11, 12
	{
		idx := i*5 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateNotKnownPort{c, i, 16, 0})
	goto inst11
inst16_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst12
	}
	goto unreachable

	goto unreachable
	goto inst12
inst12: // rune "29" -> 13
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 50 && cr <= 57 {
			i += sz
			goto inst13
		}
	}
	goto inst12_fail
	goto unreachable
	goto inst12_fail
inst12_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 28:
			goto inst28_alt
		}
	}
	goto fail

	goto unreachable
	goto inst28
inst28: // alt -> 16, 17
	{
		idx := i*5 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateNotKnownPort{c, i, 28, 0})
	goto inst16
inst28_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst17
	}
	goto unreachable

	goto unreachable
	goto inst17
inst17: // string "1" -> 27
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst27
		}
	}
	goto inst17_fail
	goto unreachable
	goto inst17_fail
inst17_fail:
	goto fail

	goto unreachable
	goto inst4
inst4: // rune "03" -> 5
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 51 {
			i += sz
			goto inst5
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 11:
			goto inst11_alt
		}
	}
	goto fail

	goto unreachable
	goto inst10
inst10: // rune "09" -> 29
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst29
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 16:
			goto inst16_alt
		}
	}
	goto fail

	goto unreachable
	goto inst13
inst13: // rune "09" -> 14
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst14
		}
	}
	goto inst13_fail
	goto unreachable
	goto inst13_fail
inst13_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 28:
			goto inst28_alt
		}
	}
	goto fail

	goto unreachable
	goto inst14
inst14: // rune "09" -> 15
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst15
		}
	}
	goto inst14_fail
	goto unreachable
	goto inst14_fail
inst14_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 28:
			goto inst28_alt
		}
	}
	goto fail

	goto unreachable
	goto inst5
inst5: // rune "05" -> 29
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst29
		}
	}
	goto inst5_fail
	goto unreachable
	goto inst5_fail
inst5_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 11:
			goto inst11_alt
		}
	}
	goto fail

	goto unreachable
	goto inst18
inst18: // rune "19" -> 19
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst19
		}
	}
	goto inst18_fail
	goto unreachable
	goto inst18_fail
inst18_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 27:
			goto inst27_alt
		}
	}
	goto fail

	goto unreachable
	goto inst27
inst27: // alt -> 18, 21
	{
		idx := i*5 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateNotKnownPort{c, i, 27, 0})
	goto inst18
inst27_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst21
	}
	goto unreachable

	goto unreachable
	goto inst19
inst19: // rune "09" -> 20
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst20
		}
	}
	goto inst19_fail
	goto unreachable
	goto inst19_fail
inst19_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 27:
			goto inst27_alt
		}
	}
	goto fail

	goto unreachable
	goto inst20
inst20: // rune "09" -> 29
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst29
		}
	}
	goto inst20_fail
	goto unreachable
	goto inst20_fail
inst20_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 27:
			goto inst27_alt
		}
	}
	goto fail

	goto unreachable
	goto inst23
inst23: // rune "09" -> 29
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst29
		}
	}
	goto inst23_fail
	goto unreachable
	goto inst23_fail
inst23_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 26:
			goto inst26_alt
		}
	}
	goto fail

	goto unreachable
	goto inst29
inst29: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto inst15
inst15: // rune "09" -> 29
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst29
		}
	}
	goto inst15_fail
	goto unreachable
	goto inst15_fail
inst15_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 28:
			goto inst28_alt
		}
	}
	goto fail

	goto unreachable
	goto inst21
inst21: // string "0" -> 26
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "0" {
			i += 1
			goto inst26
		}
	}
	goto inst21_fail
	goto unreachable
	goto inst21_fail
inst21_fail:
	goto fail

	goto unreachable
	goto inst25
inst25: // rune "49" -> 29
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 52 && cr <= 57 {
			i += sz
			goto inst29
		}
	}
	goto inst25_fail
	goto unreachable
	goto inst25_fail
inst25_fail:
	goto fail

	goto unreachable
	goto inst24
inst24: // string "2" -> 25
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst25
		}
	}
	goto inst24_fail
	goto unreachable
	goto inst24_fail
inst24_fail:
	goto fail

	goto unreachable
	goto inst22
inst22: // rune "39" -> 23
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 51 && cr <= 57 {
			i += sz
			goto inst23
		}
	}
	goto inst22_fail
	goto unreachable
	goto inst22_fail
inst22_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 26:
			goto inst26_alt
		}
	}
	goto fail

	goto unreachable
	goto inst26
inst26: // alt -> 22, 24
	{
		idx := i*5 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateNotKnownPort{c, i, 26, 0})
	goto inst22
inst26_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst24
	}
	goto unreachable

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 11:
				goto inst11_alt
			case 16:
				goto inst16_alt
			case 28:
				goto inst28_alt
			case 27:
				goto inst27_alt
			case 26:
				goto inst26_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchNotKnownPort || m == modeFirstNotKnownPort {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
