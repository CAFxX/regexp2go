// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="IP" -pool=true "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const IPRegexp = "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypeIP uint8

const (
	modeMatchIP modeTypeIP = iota
	modeFirstIP
	modeLongestIP
)

// IP implements the regular expression
// (?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*
// with flags 212.
type IP struct{}
type stateIP struct {
	c   [2]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e IP) FindString(r string) (matches [1]string, pos int, ok bool) {
	var bt [406]stateIP // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstIP, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e IP) FindLongestString(r string) (matches [1]string, pos int, ok bool) {
	var bt [406]stateIP // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestIP, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e IP) Find(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [406]stateIP // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstIP, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e IP) FindLongest(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [406]stateIP // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestIP, bt[:0])
	return
}

func (e IP) doByteSlice(s []byte, m modeTypeIP, bt []stateIP) (matches [1][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [1 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e IP) doString(s string, m modeTypeIP, bt []stateIP) (matches [1]string, pos int, ok bool) {
	var pmatches [1 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e IP) do(r string, m modeTypeIP, bt []stateIP) ([2]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*406 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]         // fast reset dynamic backtracking state
	c := [2]int{-1, -1} // captures
	var bc [2]int       // captures for the longest match so far
	matched := false    // succesful match flag
	i := si             // current byte index
	c[0] = i            // start of match
	goto inst1119       // initial instruction

	goto unreachable
	goto inst4
inst4: // rune "04" -> 5
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst5
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 12:
			goto inst12_alt
		}
	}
	goto fail

	goto unreachable
	goto inst6
inst6: // alt -> 2, 4
	{
		idx := i*406 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 6, 0})
	goto inst2
inst6_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst4
	}
	goto unreachable

	goto unreachable
	goto inst2
inst2: // string "5" -> 3
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst3
		}
	}
	goto inst2_fail
	goto unreachable
	goto inst2_fail
inst2_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1
inst1: // string "2" -> 6
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst6
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 12:
			goto inst12_alt
		}
	}
	goto fail

	goto unreachable
	goto inst3
inst3: // rune "05" -> 13
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst13
		}
	}
	goto inst3_fail
	goto unreachable
	goto inst3_fail
inst3_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		}
	}
	goto fail

	goto unreachable
	goto inst5
inst5: // rune "09" -> 13
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst13
		}
	}
	goto inst5_fail
	goto unreachable
	goto inst5_fail
inst5_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 12:
			goto inst12_alt
		}
	}
	goto fail

	goto unreachable
	goto inst13
inst13: // string "." -> 25
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst25
		}
	}
	goto inst13_fail
	goto unreachable
	goto inst13_fail
inst13_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 12:
			goto inst12_alt
		case 1119:
			goto inst1119_alt
		}
	}
	goto fail

	goto unreachable
	goto inst10
inst10: // rune "09" -> 13
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst13
		}
	}
	goto inst10_fail
	goto unreachable
	goto inst10_fail
inst10_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 11:
			goto inst11_alt
		}
	}
	goto fail

	goto unreachable
	goto inst11
inst11: // alt -> 10, 13
	{
		idx := i*406 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 11, 0})
	goto inst10
inst11_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst13
	}
	goto unreachable

	goto unreachable
	goto inst9
inst9: // rune "09" -> 11
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst11
		}
	}
	goto inst9_fail
	goto unreachable
	goto inst9_fail
inst9_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 8:
			goto inst8_alt
		case 1119:
			goto inst1119_alt
		}
	}
	goto fail

	goto unreachable
	goto inst7
inst7: // rune "01" -> 9
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || cr == 49 {
			i += sz
			goto inst9
		}
	}
	goto inst7_fail
	goto unreachable
	goto inst7_fail
inst7_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst8
inst8: // alt -> 7, 9
	{
		idx := i*406 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 8, 0})
	goto inst7
inst8_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst9
	}
	goto unreachable

	goto unreachable
	goto inst12
inst12: // alt -> 1, 8
	{
		idx := i*406 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 12, 0})
	goto inst1
inst12_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst8
	}
	goto unreachable

	goto unreachable
	goto inst25
inst25: // alt -> 14, 21
	{
		idx := i*406 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 25, 0})
	goto inst14
inst25_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst21
	}
	goto unreachable

	goto unreachable
	goto inst14
inst14: // string "2" -> 19
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst19
		}
	}
	goto inst14_fail
	goto unreachable
	goto inst14_fail
inst14_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 25:
			goto inst25_alt
		}
	}
	goto fail

	goto unreachable
	goto inst19
inst19: // alt -> 15, 17
	{
		idx := i*406 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 19, 0})
	goto inst15
inst19_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst17
	}
	goto unreachable

	goto unreachable
	goto inst21
inst21: // alt -> 20, 22
	{
		idx := i*406 + 6
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 21, 0})
	goto inst20
inst21_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst22
	}
	goto unreachable

	goto unreachable
	goto inst20
inst20: // rune "01" -> 22
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || cr == 49 {
			i += sz
			goto inst22
		}
	}
	goto inst20_fail
	goto unreachable
	goto inst20_fail
inst20_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 21:
			goto inst21_alt
		}
	}
	goto fail

	goto unreachable
	goto inst22
inst22: // rune "09" -> 24
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst24
		}
	}
	goto inst22_fail
	goto unreachable
	goto inst22_fail
inst22_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 12:
			goto inst12_alt
		case 21:
			goto inst21_alt
		case 1119:
			goto inst1119_alt
		}
	}
	goto fail

	goto unreachable
	goto inst15
inst15: // string "5" -> 16
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst16
		}
	}
	goto inst15_fail
	goto unreachable
	goto inst15_fail
inst15_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 19:
			goto inst19_alt
		}
	}
	goto fail

	goto unreachable
	goto inst17
inst17: // rune "04" -> 18
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst18
		}
	}
	goto inst17_fail
	goto unreachable
	goto inst17_fail
inst17_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 25:
			goto inst25_alt
		}
	}
	goto fail

	goto unreachable
	goto inst18
inst18: // rune "09" -> 26
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst26
		}
	}
	goto inst18_fail
	goto unreachable
	goto inst18_fail
inst18_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 25:
			goto inst25_alt
		}
	}
	goto fail

	goto unreachable
	goto inst24
inst24: // alt -> 23, 26
	{
		idx := i*406 + 7
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 24, 0})
	goto inst23
inst24_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst26
	}
	goto unreachable

	goto unreachable
	goto inst23
inst23: // rune "09" -> 26
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst26
		}
	}
	goto inst23_fail
	goto unreachable
	goto inst23_fail
inst23_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 24:
			goto inst24_alt
		}
	}
	goto fail

	goto unreachable
	goto inst26
inst26: // string "." -> 38
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst38
		}
	}
	goto inst26_fail
	goto unreachable
	goto inst26_fail
inst26_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 12:
			goto inst12_alt
		case 19:
			goto inst19_alt
		case 21:
			goto inst21_alt
		case 24:
			goto inst24_alt
		case 25:
			goto inst25_alt
		case 1119:
			goto inst1119_alt
		}
	}
	goto fail

	goto unreachable
	goto inst16
inst16: // rune "05" -> 26
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst26
		}
	}
	goto inst16_fail
	goto unreachable
	goto inst16_fail
inst16_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 19:
			goto inst19_alt
		}
	}
	goto fail

	goto unreachable
	goto inst38
inst38: // alt -> 27, 34
	{
		idx := i*406 + 8
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 38, 0})
	goto inst27
inst38_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst34
	}
	goto unreachable

	goto unreachable
	goto inst27
inst27: // string "2" -> 32
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst32
		}
	}
	goto inst27_fail
	goto unreachable
	goto inst27_fail
inst27_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 38:
			goto inst38_alt
		}
	}
	goto fail

	// inst0 unreacheable

	goto unreachable
	goto inst32
inst32: // alt -> 28, 30
	{
		idx := i*406 + 9
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 32, 0})
	goto inst28
inst32_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst30
	}
	goto unreachable

	goto unreachable
	goto inst30
inst30: // rune "04" -> 31
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst31
		}
	}
	goto inst30_fail
	goto unreachable
	goto inst30_fail
inst30_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 38:
			goto inst38_alt
		}
	}
	goto fail

	goto unreachable
	goto inst31
inst31: // rune "09" -> 39
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst39
		}
	}
	goto inst31_fail
	goto unreachable
	goto inst31_fail
inst31_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 38:
			goto inst38_alt
		}
	}
	goto fail

	goto unreachable
	goto inst28
inst28: // string "5" -> 29
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst29
		}
	}
	goto inst28_fail
	goto unreachable
	goto inst28_fail
inst28_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 32:
			goto inst32_alt
		}
	}
	goto fail

	goto unreachable
	goto inst34
inst34: // alt -> 33, 35
	{
		idx := i*406 + 10
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 34, 0})
	goto inst33
inst34_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst35
	}
	goto unreachable

	goto unreachable
	goto inst33
inst33: // rune "01" -> 35
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || cr == 49 {
			i += sz
			goto inst35
		}
	}
	goto inst33_fail
	goto unreachable
	goto inst33_fail
inst33_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 34:
			goto inst34_alt
		}
	}
	goto fail

	goto unreachable
	goto inst35
inst35: // rune "09" -> 37
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst37
		}
	}
	goto inst35_fail
	goto unreachable
	goto inst35_fail
inst35_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 12:
			goto inst12_alt
		case 19:
			goto inst19_alt
		case 21:
			goto inst21_alt
		case 24:
			goto inst24_alt
		case 25:
			goto inst25_alt
		case 34:
			goto inst34_alt
		case 1119:
			goto inst1119_alt
		}
	}
	goto fail

	goto unreachable
	goto inst37
inst37: // alt -> 36, 39
	{
		idx := i*406 + 11
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 37, 0})
	goto inst36
inst37_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst39
	}
	goto unreachable

	goto unreachable
	goto inst36
inst36: // rune "09" -> 39
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst39
		}
	}
	goto inst36_fail
	goto unreachable
	goto inst36_fail
inst36_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 37:
			goto inst37_alt
		}
	}
	goto fail

	goto unreachable
	goto inst39
inst39: // string "." -> 51
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst51
		}
	}
	goto inst39_fail
	goto unreachable
	goto inst39_fail
inst39_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 12:
			goto inst12_alt
		case 19:
			goto inst19_alt
		case 21:
			goto inst21_alt
		case 24:
			goto inst24_alt
		case 25:
			goto inst25_alt
		case 32:
			goto inst32_alt
		case 34:
			goto inst34_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 1119:
			goto inst1119_alt
		}
	}
	goto fail

	goto unreachable
	goto inst29
inst29: // rune "05" -> 39
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst39
		}
	}
	goto inst29_fail
	goto unreachable
	goto inst29_fail
inst29_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 32:
			goto inst32_alt
		}
	}
	goto fail

	goto unreachable
	goto inst51
inst51: // alt -> 40, 47
	{
		idx := i*406 + 12
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 51, 0})
	goto inst40
inst51_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst47
	}
	goto unreachable

	goto unreachable
	goto inst47
inst47: // alt -> 46, 48
	{
		idx := i*406 + 13
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 47, 0})
	goto inst46
inst47_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst48
	}
	goto unreachable

	goto unreachable
	goto inst46
inst46: // rune "01" -> 48
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || cr == 49 {
			i += sz
			goto inst48
		}
	}
	goto inst46_fail
	goto unreachable
	goto inst46_fail
inst46_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 47:
			goto inst47_alt
		}
	}
	goto fail

	goto unreachable
	goto inst48
inst48: // rune "09" -> 50
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst50
		}
	}
	goto inst48_fail
	goto unreachable
	goto inst48_fail
inst48_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 6:
			goto inst6_alt
		case 8:
			goto inst8_alt
		case 11:
			goto inst11_alt
		case 12:
			goto inst12_alt
		case 19:
			goto inst19_alt
		case 21:
			goto inst21_alt
		case 24:
			goto inst24_alt
		case 25:
			goto inst25_alt
		case 32:
			goto inst32_alt
		case 34:
			goto inst34_alt
		case 37:
			goto inst37_alt
		case 38:
			goto inst38_alt
		case 47:
			goto inst47_alt
		case 1119:
			goto inst1119_alt
		}
	}
	goto fail

	goto unreachable
	goto inst40
inst40: // string "2" -> 45
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst45
		}
	}
	goto inst40_fail
	goto unreachable
	goto inst40_fail
inst40_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst45
inst45: // alt -> 41, 43
	{
		idx := i*406 + 14
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 45, 0})
	goto inst41
inst45_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst43
	}
	goto unreachable

	goto unreachable
	goto inst43
inst43: // rune "04" -> 44
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst44
		}
	}
	goto inst43_fail
	goto unreachable
	goto inst43_fail
inst43_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst44
inst44: // rune "09" -> 1120
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1120
		}
	}
	goto inst44_fail
	goto unreachable
	goto inst44_fail
inst44_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst50
inst50: // alt -> 49, 1120
	{
		idx := i*406 + 15
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 50, 0})
	goto inst49
inst50_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1120
	}
	goto unreachable

	goto unreachable
	goto inst1119
inst1119: // alt -> 12, 1112
	{
		idx := i*406 + 16
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1119, 0})
	goto inst12
inst1119_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1112
	}
	goto unreachable

	goto unreachable
	goto inst49
inst49: // rune "09" -> 1120
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1120
		}
	}
	goto inst49_fail
	goto unreachable
	goto inst49_fail
inst49_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 50:
			goto inst50_alt
		}
	}
	goto fail

	goto unreachable
	goto inst54
inst54: // rune "09AFaf" -> 56
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst56
			}
			goto inst54_fail
		}
	}
	goto inst54_fail
	goto unreachable
	goto inst54_fail
inst54_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 57:
			goto inst57_alt
		}
	}
	goto fail

	goto unreachable
	goto inst56
inst56: // alt -> 55, 59
	{
		idx := i*406 + 17
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 56, 0})
	goto inst55
inst56_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst59
	}
	goto unreachable

	goto unreachable
	goto inst55
inst55: // rune "09AFaf" -> 59
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst59
			}
			goto inst55_fail
		}
	}
	goto inst55_fail
	goto unreachable
	goto inst55_fail
inst55_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		}
	}
	goto fail

	goto unreachable
	goto inst59
inst59: // string ":" -> 60
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst60
		}
	}
	goto inst59_fail
	goto unreachable
	goto inst59_fail
inst59_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		case 57:
			goto inst57_alt
		case 58:
			goto inst58_alt
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst57
inst57: // alt -> 54, 59
	{
		idx := i*406 + 18
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 57, 0})
	goto inst54
inst57_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst59
	}
	goto unreachable

	goto unreachable
	goto inst53
inst53: // rune "09AFaf" -> 57
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst57
			}
			goto inst53_fail
		}
	}
	goto inst53_fail
	goto unreachable
	goto inst53_fail
inst53_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 58:
			goto inst58_alt
		}
	}
	goto fail

	goto unreachable
	goto inst58
inst58: // alt -> 53, 59
	{
		idx := i*406 + 19
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 58, 0})
	goto inst53
inst58_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst59
	}
	goto unreachable

	goto unreachable
	goto inst60
inst60: // rune "09AFaf" -> 66
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst66
			}
			goto inst60_fail
		}
	}
	goto inst60_fail
	goto unreachable
	goto inst60_fail
inst60_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		case 57:
			goto inst57_alt
		case 58:
			goto inst58_alt
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst66
inst66: // alt -> 61, 67
	{
		idx := i*406 + 20
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 66, 0})
	goto inst61
inst66_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst67
	}
	goto unreachable

	goto unreachable
	goto inst61
inst61: // rune "09AFaf" -> 65
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst65
			}
			goto inst61_fail
		}
	}
	goto inst61_fail
	goto unreachable
	goto inst61_fail
inst61_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 66:
			goto inst66_alt
		}
	}
	goto fail

	goto unreachable
	goto inst65
inst65: // alt -> 62, 67
	{
		idx := i*406 + 21
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 65, 0})
	goto inst62
inst65_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst67
	}
	goto unreachable

	goto unreachable
	goto inst62
inst62: // rune "09AFaf" -> 64
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst64
			}
			goto inst62_fail
		}
	}
	goto inst62_fail
	goto unreachable
	goto inst62_fail
inst62_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 65:
			goto inst65_alt
		}
	}
	goto fail

	goto unreachable
	goto inst67
inst67: // string ":" -> 68
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst68
		}
	}
	goto inst67_fail
	goto unreachable
	goto inst67_fail
inst67_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		case 57:
			goto inst57_alt
		case 58:
			goto inst58_alt
		case 64:
			goto inst64_alt
		case 65:
			goto inst65_alt
		case 66:
			goto inst66_alt
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst64
inst64: // alt -> 63, 67
	{
		idx := i*406 + 22
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 64, 0})
	goto inst63
inst64_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst67
	}
	goto unreachable

	goto unreachable
	goto inst63
inst63: // rune "09AFaf" -> 67
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst67
			}
			goto inst63_fail
		}
	}
	goto inst63_fail
	goto unreachable
	goto inst63_fail
inst63_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 64:
			goto inst64_alt
		}
	}
	goto fail

	goto unreachable
	goto inst68
inst68: // rune "09AFaf" -> 74
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst74
			}
			goto inst68_fail
		}
	}
	goto inst68_fail
	goto unreachable
	goto inst68_fail
inst68_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		case 57:
			goto inst57_alt
		case 58:
			goto inst58_alt
		case 64:
			goto inst64_alt
		case 65:
			goto inst65_alt
		case 66:
			goto inst66_alt
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst74
inst74: // alt -> 69, 75
	{
		idx := i*406 + 23
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 74, 0})
	goto inst69
inst74_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst75
	}
	goto unreachable

	goto unreachable
	goto inst69
inst69: // rune "09AFaf" -> 73
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst73
			}
			goto inst69_fail
		}
	}
	goto inst69_fail
	goto unreachable
	goto inst69_fail
inst69_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 74:
			goto inst74_alt
		}
	}
	goto fail

	goto unreachable
	goto inst73
inst73: // alt -> 70, 75
	{
		idx := i*406 + 24
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 73, 0})
	goto inst70
inst73_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst75
	}
	goto unreachable

	goto unreachable
	goto inst1120
inst1120: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto inst70
inst70: // rune "09AFaf" -> 72
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst72
			}
			goto inst70_fail
		}
	}
	goto inst70_fail
	goto unreachable
	goto inst70_fail
inst70_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 73:
			goto inst73_alt
		}
	}
	goto fail

	goto unreachable
	goto inst72
inst72: // alt -> 71, 75
	{
		idx := i*406 + 25
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 72, 0})
	goto inst71
inst72_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst75
	}
	goto unreachable

	goto unreachable
	goto inst75
inst75: // string ":" -> 76
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst76
		}
	}
	goto inst75_fail
	goto unreachable
	goto inst75_fail
inst75_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		case 57:
			goto inst57_alt
		case 58:
			goto inst58_alt
		case 64:
			goto inst64_alt
		case 65:
			goto inst65_alt
		case 66:
			goto inst66_alt
		case 72:
			goto inst72_alt
		case 73:
			goto inst73_alt
		case 74:
			goto inst74_alt
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst71
inst71: // rune "09AFaf" -> 75
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst75
			}
			goto inst71_fail
		}
	}
	goto inst71_fail
	goto unreachable
	goto inst71_fail
inst71_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 72:
			goto inst72_alt
		}
	}
	goto fail

	goto unreachable
	goto inst76
inst76: // rune "09AFaf" -> 82
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst82
			}
			goto inst76_fail
		}
	}
	goto inst76_fail
	goto unreachable
	goto inst76_fail
inst76_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		case 57:
			goto inst57_alt
		case 58:
			goto inst58_alt
		case 64:
			goto inst64_alt
		case 65:
			goto inst65_alt
		case 66:
			goto inst66_alt
		case 72:
			goto inst72_alt
		case 73:
			goto inst73_alt
		case 74:
			goto inst74_alt
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst82
inst82: // alt -> 77, 83
	{
		idx := i*406 + 26
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 82, 0})
	goto inst77
inst82_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst83
	}
	goto unreachable

	goto unreachable
	goto inst77
inst77: // rune "09AFaf" -> 81
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst81
			}
			goto inst77_fail
		}
	}
	goto inst77_fail
	goto unreachable
	goto inst77_fail
inst77_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 82:
			goto inst82_alt
		}
	}
	goto fail

	goto unreachable
	goto inst81
inst81: // alt -> 78, 83
	{
		idx := i*406 + 27
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 81, 0})
	goto inst78
inst81_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst83
	}
	goto unreachable

	goto unreachable
	goto inst78
inst78: // rune "09AFaf" -> 80
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst80
			}
			goto inst78_fail
		}
	}
	goto inst78_fail
	goto unreachable
	goto inst78_fail
inst78_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 81:
			goto inst81_alt
		}
	}
	goto fail

	goto unreachable
	goto inst83
inst83: // string ":" -> 84
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst84
		}
	}
	goto inst83_fail
	goto unreachable
	goto inst83_fail
inst83_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		case 57:
			goto inst57_alt
		case 58:
			goto inst58_alt
		case 64:
			goto inst64_alt
		case 65:
			goto inst65_alt
		case 66:
			goto inst66_alt
		case 72:
			goto inst72_alt
		case 73:
			goto inst73_alt
		case 74:
			goto inst74_alt
		case 80:
			goto inst80_alt
		case 81:
			goto inst81_alt
		case 82:
			goto inst82_alt
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst80
inst80: // alt -> 79, 83
	{
		idx := i*406 + 28
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 80, 0})
	goto inst79
inst80_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst83
	}
	goto unreachable

	goto unreachable
	goto inst79
inst79: // rune "09AFaf" -> 83
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst83
			}
			goto inst79_fail
		}
	}
	goto inst79_fail
	goto unreachable
	goto inst79_fail
inst79_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 80:
			goto inst80_alt
		}
	}
	goto fail

	goto unreachable
	goto inst84
inst84: // rune "09AFaf" -> 90
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst90
			}
			goto inst84_fail
		}
	}
	goto inst84_fail
	goto unreachable
	goto inst84_fail
inst84_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		case 57:
			goto inst57_alt
		case 58:
			goto inst58_alt
		case 64:
			goto inst64_alt
		case 65:
			goto inst65_alt
		case 66:
			goto inst66_alt
		case 72:
			goto inst72_alt
		case 73:
			goto inst73_alt
		case 74:
			goto inst74_alt
		case 80:
			goto inst80_alt
		case 81:
			goto inst81_alt
		case 82:
			goto inst82_alt
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst90
inst90: // alt -> 85, 91
	{
		idx := i*406 + 29
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 90, 0})
	goto inst85
inst90_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst91
	}
	goto unreachable

	goto unreachable
	goto inst85
inst85: // rune "09AFaf" -> 89
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst89
			}
			goto inst85_fail
		}
	}
	goto inst85_fail
	goto unreachable
	goto inst85_fail
inst85_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 90:
			goto inst90_alt
		}
	}
	goto fail

	goto unreachable
	goto inst89
inst89: // alt -> 86, 91
	{
		idx := i*406 + 30
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 89, 0})
	goto inst86
inst89_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst91
	}
	goto unreachable

	goto unreachable
	goto inst86
inst86: // rune "09AFaf" -> 88
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst88
			}
			goto inst86_fail
		}
	}
	goto inst86_fail
	goto unreachable
	goto inst86_fail
inst86_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 89:
			goto inst89_alt
		}
	}
	goto fail

	goto unreachable
	goto inst91
inst91: // string ":" -> 92
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst92
		}
	}
	goto inst91_fail
	goto unreachable
	goto inst91_fail
inst91_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		case 57:
			goto inst57_alt
		case 58:
			goto inst58_alt
		case 64:
			goto inst64_alt
		case 65:
			goto inst65_alt
		case 66:
			goto inst66_alt
		case 72:
			goto inst72_alt
		case 73:
			goto inst73_alt
		case 74:
			goto inst74_alt
		case 80:
			goto inst80_alt
		case 81:
			goto inst81_alt
		case 82:
			goto inst82_alt
		case 88:
			goto inst88_alt
		case 89:
			goto inst89_alt
		case 90:
			goto inst90_alt
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst88
inst88: // alt -> 87, 91
	{
		idx := i*406 + 31
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 88, 0})
	goto inst87
inst88_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst91
	}
	goto unreachable

	goto unreachable
	goto inst87
inst87: // rune "09AFaf" -> 91
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst91
			}
			goto inst87_fail
		}
	}
	goto inst87_fail
	goto unreachable
	goto inst87_fail
inst87_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 88:
			goto inst88_alt
		}
	}
	goto fail

	goto unreachable
	goto inst92
inst92: // rune "09AFaf" -> 98
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst98
			}
			goto inst92_fail
		}
	}
	goto inst92_fail
	goto unreachable
	goto inst92_fail
inst92_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		case 57:
			goto inst57_alt
		case 58:
			goto inst58_alt
		case 64:
			goto inst64_alt
		case 65:
			goto inst65_alt
		case 66:
			goto inst66_alt
		case 72:
			goto inst72_alt
		case 73:
			goto inst73_alt
		case 74:
			goto inst74_alt
		case 80:
			goto inst80_alt
		case 81:
			goto inst81_alt
		case 82:
			goto inst82_alt
		case 88:
			goto inst88_alt
		case 89:
			goto inst89_alt
		case 90:
			goto inst90_alt
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst94
inst94: // rune "09AFaf" -> 96
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst96
			}
			goto inst94_fail
		}
	}
	goto inst94_fail
	goto unreachable
	goto inst94_fail
inst94_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 97:
			goto inst97_alt
		}
	}
	goto fail

	goto unreachable
	goto inst96
inst96: // alt -> 95, 99
	{
		idx := i*406 + 32
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 96, 0})
	goto inst95
inst96_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst99
	}
	goto unreachable

	goto unreachable
	goto inst95
inst95: // rune "09AFaf" -> 99
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst99
			}
			goto inst95_fail
		}
	}
	goto inst95_fail
	goto unreachable
	goto inst95_fail
inst95_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 96:
			goto inst96_alt
		}
	}
	goto fail

	goto unreachable
	goto inst97
inst97: // alt -> 94, 99
	{
		idx := i*406 + 33
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 97, 0})
	goto inst94
inst97_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst99
	}
	goto unreachable

	goto unreachable
	goto inst99
inst99: // string ":" -> 100
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst100
		}
	}
	goto inst99_fail
	goto unreachable
	goto inst99_fail
inst99_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		case 57:
			goto inst57_alt
		case 58:
			goto inst58_alt
		case 64:
			goto inst64_alt
		case 65:
			goto inst65_alt
		case 66:
			goto inst66_alt
		case 72:
			goto inst72_alt
		case 73:
			goto inst73_alt
		case 74:
			goto inst74_alt
		case 80:
			goto inst80_alt
		case 81:
			goto inst81_alt
		case 82:
			goto inst82_alt
		case 88:
			goto inst88_alt
		case 89:
			goto inst89_alt
		case 90:
			goto inst90_alt
		case 96:
			goto inst96_alt
		case 97:
			goto inst97_alt
		case 98:
			goto inst98_alt
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst98
inst98: // alt -> 93, 99
	{
		idx := i*406 + 34
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 98, 0})
	goto inst93
inst98_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst99
	}
	goto unreachable

	goto unreachable
	goto inst93
inst93: // rune "09AFaf" -> 97
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst97
			}
			goto inst93_fail
		}
	}
	goto inst93_fail
	goto unreachable
	goto inst93_fail
inst93_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 98:
			goto inst98_alt
		}
	}
	goto fail

	goto unreachable
	goto inst100
inst100: // rune "09AFaf" -> 106
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst106
			}
			goto inst100_fail
		}
	}
	goto inst100_fail
	goto unreachable
	goto inst100_fail
inst100_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		case 57:
			goto inst57_alt
		case 58:
			goto inst58_alt
		case 64:
			goto inst64_alt
		case 65:
			goto inst65_alt
		case 66:
			goto inst66_alt
		case 72:
			goto inst72_alt
		case 73:
			goto inst73_alt
		case 74:
			goto inst74_alt
		case 80:
			goto inst80_alt
		case 81:
			goto inst81_alt
		case 82:
			goto inst82_alt
		case 88:
			goto inst88_alt
		case 89:
			goto inst89_alt
		case 90:
			goto inst90_alt
		case 96:
			goto inst96_alt
		case 97:
			goto inst97_alt
		case 98:
			goto inst98_alt
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst106
inst106: // alt -> 101, 107
	{
		idx := i*406 + 35
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 106, 0})
	goto inst101
inst106_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst107
	}
	goto unreachable

	goto unreachable
	goto inst101
inst101: // rune "09AFaf" -> 105
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst105
			}
			goto inst101_fail
		}
	}
	goto inst101_fail
	goto unreachable
	goto inst101_fail
inst101_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 106:
			goto inst106_alt
		}
	}
	goto fail

	goto unreachable
	goto inst105
inst105: // alt -> 102, 107
	{
		idx := i*406 + 36
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 105, 0})
	goto inst102
inst105_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst107
	}
	goto unreachable

	goto unreachable
	goto inst107
inst107: // string ":" -> 116
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst116
		}
	}
	goto inst107_fail
	goto unreachable
	goto inst107_fail
inst107_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		case 57:
			goto inst57_alt
		case 58:
			goto inst58_alt
		case 64:
			goto inst64_alt
		case 65:
			goto inst65_alt
		case 66:
			goto inst66_alt
		case 72:
			goto inst72_alt
		case 73:
			goto inst73_alt
		case 74:
			goto inst74_alt
		case 80:
			goto inst80_alt
		case 81:
			goto inst81_alt
		case 82:
			goto inst82_alt
		case 88:
			goto inst88_alt
		case 89:
			goto inst89_alt
		case 90:
			goto inst90_alt
		case 96:
			goto inst96_alt
		case 97:
			goto inst97_alt
		case 98:
			goto inst98_alt
		case 104:
			goto inst104_alt
		case 105:
			goto inst105_alt
		case 106:
			goto inst106_alt
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst103
inst103: // rune "09AFaf" -> 107
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst107
			}
			goto inst103_fail
		}
	}
	goto inst103_fail
	goto unreachable
	goto inst103_fail
inst103_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 104:
			goto inst104_alt
		}
	}
	goto fail

	goto unreachable
	goto inst104
inst104: // alt -> 103, 107
	{
		idx := i*406 + 37
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 104, 0})
	goto inst103
inst104_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst107
	}
	goto unreachable

	goto unreachable
	goto inst102
inst102: // rune "09AFaf" -> 104
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst104
			}
			goto inst102_fail
		}
	}
	goto inst102_fail
	goto unreachable
	goto inst102_fail
inst102_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 105:
			goto inst105_alt
		}
	}
	goto fail

	goto unreachable
	goto inst42
inst42: // rune "05" -> 1120
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1120
		}
	}
	goto inst42_fail
	goto unreachable
	goto inst42_fail
inst42_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 45:
			goto inst45_alt
		}
	}
	goto fail

	goto unreachable
	goto inst41
inst41: // string "5" -> 42
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst42
		}
	}
	goto inst41_fail
	goto unreachable
	goto inst41_fail
inst41_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 45:
			goto inst45_alt
		}
	}
	goto fail

	goto unreachable
	goto inst52
inst52: // rune "09AFaf" -> 58
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst58
			}
			goto inst52_fail
		}
	}
	goto inst52_fail
	goto unreachable
	goto inst52_fail
inst52_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst119
inst119: // rune "09AFaf" -> 121
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst121
			}
			goto inst119_fail
		}
	}
	goto inst119_fail
	goto unreachable
	goto inst119_fail
inst119_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 122:
			goto inst122_alt
		}
	}
	goto fail

	goto unreachable
	goto inst122
inst122: // alt -> 119, 124
	{
		idx := i*406 + 38
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 122, 0})
	goto inst119
inst122_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst124
	}
	goto unreachable

	goto unreachable
	goto inst121
inst121: // alt -> 120, 124
	{
		idx := i*406 + 39
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 121, 0})
	goto inst120
inst121_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst124
	}
	goto unreachable

	goto unreachable
	goto inst120
inst120: // rune "09AFaf" -> 124
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst124
			}
			goto inst120_fail
		}
	}
	goto inst120_fail
	goto unreachable
	goto inst120_fail
inst120_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		}
	}
	goto fail

	goto unreachable
	goto inst124
inst124: // string ":" -> 125
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst125
		}
	}
	goto inst124_fail
	goto unreachable
	goto inst124_fail
inst124_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		case 122:
			goto inst122_alt
		case 123:
			goto inst123_alt
		case 356:
			goto inst356_alt
		}
	}
	goto fail

	goto unreachable
	goto inst125
inst125: // rune "09AFaf" -> 131
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst131
			}
			goto inst125_fail
		}
	}
	goto inst125_fail
	goto unreachable
	goto inst125_fail
inst125_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		case 122:
			goto inst122_alt
		case 123:
			goto inst123_alt
		case 356:
			goto inst356_alt
		}
	}
	goto fail

	goto unreachable
	goto inst118
inst118: // rune "09AFaf" -> 122
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst122
			}
			goto inst118_fail
		}
	}
	goto inst118_fail
	goto unreachable
	goto inst118_fail
inst118_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 123:
			goto inst123_alt
		}
	}
	goto fail

	goto unreachable
	goto inst123
inst123: // alt -> 118, 124
	{
		idx := i*406 + 40
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 123, 0})
	goto inst118
inst123_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst124
	}
	goto unreachable

	goto unreachable
	goto inst131
inst131: // alt -> 126, 132
	{
		idx := i*406 + 41
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 131, 0})
	goto inst126
inst131_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst132
	}
	goto unreachable

	goto unreachable
	goto inst126
inst126: // rune "09AFaf" -> 130
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst130
			}
			goto inst126_fail
		}
	}
	goto inst126_fail
	goto unreachable
	goto inst126_fail
inst126_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 131:
			goto inst131_alt
		}
	}
	goto fail

	goto unreachable
	goto inst130
inst130: // alt -> 127, 132
	{
		idx := i*406 + 42
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 130, 0})
	goto inst127
inst130_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst132
	}
	goto unreachable

	goto unreachable
	goto inst132
inst132: // string ":" -> 133
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst133
		}
	}
	goto inst132_fail
	goto unreachable
	goto inst132_fail
inst132_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		case 122:
			goto inst122_alt
		case 123:
			goto inst123_alt
		case 129:
			goto inst129_alt
		case 130:
			goto inst130_alt
		case 131:
			goto inst131_alt
		case 356:
			goto inst356_alt
		}
	}
	goto fail

	goto unreachable
	goto inst128
inst128: // rune "09AFaf" -> 132
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst132
			}
			goto inst128_fail
		}
	}
	goto inst128_fail
	goto unreachable
	goto inst128_fail
inst128_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 129:
			goto inst129_alt
		}
	}
	goto fail

	goto unreachable
	goto inst129
inst129: // alt -> 128, 132
	{
		idx := i*406 + 43
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 129, 0})
	goto inst128
inst129_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst132
	}
	goto unreachable

	goto unreachable
	goto inst127
inst127: // rune "09AFaf" -> 129
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst129
			}
			goto inst127_fail
		}
	}
	goto inst127_fail
	goto unreachable
	goto inst127_fail
inst127_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 130:
			goto inst130_alt
		}
	}
	goto fail

	goto unreachable
	goto inst133
inst133: // rune "09AFaf" -> 139
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst139
			}
			goto inst133_fail
		}
	}
	goto inst133_fail
	goto unreachable
	goto inst133_fail
inst133_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		case 122:
			goto inst122_alt
		case 123:
			goto inst123_alt
		case 129:
			goto inst129_alt
		case 130:
			goto inst130_alt
		case 131:
			goto inst131_alt
		case 356:
			goto inst356_alt
		}
	}
	goto fail

	goto unreachable
	goto inst139
inst139: // alt -> 134, 140
	{
		idx := i*406 + 44
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 139, 0})
	goto inst134
inst139_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst140
	}
	goto unreachable

	goto unreachable
	goto inst134
inst134: // rune "09AFaf" -> 138
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst138
			}
			goto inst134_fail
		}
	}
	goto inst134_fail
	goto unreachable
	goto inst134_fail
inst134_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 139:
			goto inst139_alt
		}
	}
	goto fail

	goto unreachable
	goto inst138
inst138: // alt -> 135, 140
	{
		idx := i*406 + 45
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 138, 0})
	goto inst135
inst138_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst140
	}
	goto unreachable

	goto unreachable
	goto inst140
inst140: // string ":" -> 141
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst141
		}
	}
	goto inst140_fail
	goto unreachable
	goto inst140_fail
inst140_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		case 122:
			goto inst122_alt
		case 123:
			goto inst123_alt
		case 129:
			goto inst129_alt
		case 130:
			goto inst130_alt
		case 131:
			goto inst131_alt
		case 137:
			goto inst137_alt
		case 138:
			goto inst138_alt
		case 139:
			goto inst139_alt
		case 356:
			goto inst356_alt
		}
	}
	goto fail

	goto unreachable
	goto inst136
inst136: // rune "09AFaf" -> 140
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst140
			}
			goto inst136_fail
		}
	}
	goto inst136_fail
	goto unreachable
	goto inst136_fail
inst136_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 137:
			goto inst137_alt
		}
	}
	goto fail

	goto unreachable
	goto inst137
inst137: // alt -> 136, 140
	{
		idx := i*406 + 46
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 137, 0})
	goto inst136
inst137_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst140
	}
	goto unreachable

	goto unreachable
	goto inst135
inst135: // rune "09AFaf" -> 137
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst137
			}
			goto inst135_fail
		}
	}
	goto inst135_fail
	goto unreachable
	goto inst135_fail
inst135_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 138:
			goto inst138_alt
		}
	}
	goto fail

	goto unreachable
	goto inst141
inst141: // rune "09AFaf" -> 147
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst147
			}
			goto inst141_fail
		}
	}
	goto inst141_fail
	goto unreachable
	goto inst141_fail
inst141_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		case 122:
			goto inst122_alt
		case 123:
			goto inst123_alt
		case 129:
			goto inst129_alt
		case 130:
			goto inst130_alt
		case 131:
			goto inst131_alt
		case 137:
			goto inst137_alt
		case 138:
			goto inst138_alt
		case 139:
			goto inst139_alt
		case 356:
			goto inst356_alt
		}
	}
	goto fail

	goto unreachable
	goto inst147
inst147: // alt -> 142, 148
	{
		idx := i*406 + 47
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 147, 0})
	goto inst142
inst147_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst148
	}
	goto unreachable

	goto unreachable
	goto inst142
inst142: // rune "09AFaf" -> 146
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst146
			}
			goto inst142_fail
		}
	}
	goto inst142_fail
	goto unreachable
	goto inst142_fail
inst142_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 147:
			goto inst147_alt
		}
	}
	goto fail

	goto unreachable
	goto inst146
inst146: // alt -> 143, 148
	{
		idx := i*406 + 48
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 146, 0})
	goto inst143
inst146_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst148
	}
	goto unreachable

	goto unreachable
	goto inst148
inst148: // string ":" -> 149
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst149
		}
	}
	goto inst148_fail
	goto unreachable
	goto inst148_fail
inst148_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		case 122:
			goto inst122_alt
		case 123:
			goto inst123_alt
		case 129:
			goto inst129_alt
		case 130:
			goto inst130_alt
		case 131:
			goto inst131_alt
		case 137:
			goto inst137_alt
		case 138:
			goto inst138_alt
		case 139:
			goto inst139_alt
		case 145:
			goto inst145_alt
		case 146:
			goto inst146_alt
		case 147:
			goto inst147_alt
		case 356:
			goto inst356_alt
		}
	}
	goto fail

	goto unreachable
	goto inst144
inst144: // rune "09AFaf" -> 148
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst148
			}
			goto inst144_fail
		}
	}
	goto inst144_fail
	goto unreachable
	goto inst144_fail
inst144_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 145:
			goto inst145_alt
		}
	}
	goto fail

	goto unreachable
	goto inst145
inst145: // alt -> 144, 148
	{
		idx := i*406 + 49
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 145, 0})
	goto inst144
inst145_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst148
	}
	goto unreachable

	goto unreachable
	goto inst143
inst143: // rune "09AFaf" -> 145
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst145
			}
			goto inst143_fail
		}
	}
	goto inst143_fail
	goto unreachable
	goto inst143_fail
inst143_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 146:
			goto inst146_alt
		}
	}
	goto fail

	goto unreachable
	goto inst149
inst149: // rune "09AFaf" -> 155
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst155
			}
			goto inst149_fail
		}
	}
	goto inst149_fail
	goto unreachable
	goto inst149_fail
inst149_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		case 122:
			goto inst122_alt
		case 123:
			goto inst123_alt
		case 129:
			goto inst129_alt
		case 130:
			goto inst130_alt
		case 131:
			goto inst131_alt
		case 137:
			goto inst137_alt
		case 138:
			goto inst138_alt
		case 139:
			goto inst139_alt
		case 145:
			goto inst145_alt
		case 146:
			goto inst146_alt
		case 147:
			goto inst147_alt
		case 356:
			goto inst356_alt
		}
	}
	goto fail

	goto unreachable
	goto inst155
inst155: // alt -> 150, 156
	{
		idx := i*406 + 50
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 155, 0})
	goto inst150
inst155_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst156
	}
	goto unreachable

	goto unreachable
	goto inst150
inst150: // rune "09AFaf" -> 154
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst154
			}
			goto inst150_fail
		}
	}
	goto inst150_fail
	goto unreachable
	goto inst150_fail
inst150_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 155:
			goto inst155_alt
		}
	}
	goto fail

	goto unreachable
	goto inst154
inst154: // alt -> 151, 156
	{
		idx := i*406 + 51
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 154, 0})
	goto inst151
inst154_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst156
	}
	goto unreachable

	goto unreachable
	goto inst156
inst156: // string ":" -> 157
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst157
		}
	}
	goto inst156_fail
	goto unreachable
	goto inst156_fail
inst156_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		case 122:
			goto inst122_alt
		case 123:
			goto inst123_alt
		case 129:
			goto inst129_alt
		case 130:
			goto inst130_alt
		case 131:
			goto inst131_alt
		case 137:
			goto inst137_alt
		case 138:
			goto inst138_alt
		case 139:
			goto inst139_alt
		case 145:
			goto inst145_alt
		case 146:
			goto inst146_alt
		case 147:
			goto inst147_alt
		case 153:
			goto inst153_alt
		case 154:
			goto inst154_alt
		case 155:
			goto inst155_alt
		case 356:
			goto inst356_alt
		}
	}
	goto fail

	goto unreachable
	goto inst152
inst152: // rune "09AFaf" -> 156
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst156
			}
			goto inst152_fail
		}
	}
	goto inst152_fail
	goto unreachable
	goto inst152_fail
inst152_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 153:
			goto inst153_alt
		}
	}
	goto fail

	goto unreachable
	goto inst153
inst153: // alt -> 152, 156
	{
		idx := i*406 + 52
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 153, 0})
	goto inst152
inst153_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst156
	}
	goto unreachable

	goto unreachable
	goto inst151
inst151: // rune "09AFaf" -> 153
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst153
			}
			goto inst151_fail
		}
	}
	goto inst151_fail
	goto unreachable
	goto inst151_fail
inst151_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 154:
			goto inst154_alt
		}
	}
	goto fail

	goto unreachable
	goto inst157
inst157: // rune "09AFaf" -> 163
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst163
			}
			goto inst157_fail
		}
	}
	goto inst157_fail
	goto unreachable
	goto inst157_fail
inst157_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		case 122:
			goto inst122_alt
		case 123:
			goto inst123_alt
		case 129:
			goto inst129_alt
		case 130:
			goto inst130_alt
		case 131:
			goto inst131_alt
		case 137:
			goto inst137_alt
		case 138:
			goto inst138_alt
		case 139:
			goto inst139_alt
		case 145:
			goto inst145_alt
		case 146:
			goto inst146_alt
		case 147:
			goto inst147_alt
		case 153:
			goto inst153_alt
		case 154:
			goto inst154_alt
		case 155:
			goto inst155_alt
		case 356:
			goto inst356_alt
		}
	}
	goto fail

	goto unreachable
	goto inst117
inst117: // rune "09AFaf" -> 123
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst123
			}
			goto inst117_fail
		}
	}
	goto inst117_fail
	goto unreachable
	goto inst117_fail
inst117_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 356:
			goto inst356_alt
		}
	}
	goto fail

	goto unreachable
	goto inst235
inst235: // alt -> 52, 117
	{
		idx := i*406 + 53
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 235, 0})
	goto inst52
inst235_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst117
	}
	goto unreachable

	goto unreachable
	goto inst163
inst163: // alt -> 158, 164
	{
		idx := i*406 + 54
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 163, 0})
	goto inst158
inst163_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst164
	}
	goto unreachable

	goto unreachable
	goto inst158
inst158: // rune "09AFaf" -> 162
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst162
			}
			goto inst158_fail
		}
	}
	goto inst158_fail
	goto unreachable
	goto inst158_fail
inst158_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 163:
			goto inst163_alt
		}
	}
	goto fail

	goto unreachable
	goto inst162
inst162: // alt -> 159, 164
	{
		idx := i*406 + 55
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 162, 0})
	goto inst159
inst162_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst164
	}
	goto unreachable

	goto unreachable
	goto inst159
inst159: // rune "09AFaf" -> 161
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst161
			}
			goto inst159_fail
		}
	}
	goto inst159_fail
	goto unreachable
	goto inst159_fail
inst159_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 162:
			goto inst162_alt
		}
	}
	goto fail

	goto unreachable
	goto inst161
inst161: // alt -> 160, 164
	{
		idx := i*406 + 56
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 161, 0})
	goto inst160
inst161_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst164
	}
	goto unreachable

	goto unreachable
	goto inst164
inst164: // string ":" -> 234
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst234
		}
	}
	goto inst164_fail
	goto unreachable
	goto inst164_fail
inst164_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		case 122:
			goto inst122_alt
		case 123:
			goto inst123_alt
		case 129:
			goto inst129_alt
		case 130:
			goto inst130_alt
		case 131:
			goto inst131_alt
		case 137:
			goto inst137_alt
		case 138:
			goto inst138_alt
		case 139:
			goto inst139_alt
		case 145:
			goto inst145_alt
		case 146:
			goto inst146_alt
		case 147:
			goto inst147_alt
		case 153:
			goto inst153_alt
		case 154:
			goto inst154_alt
		case 155:
			goto inst155_alt
		case 161:
			goto inst161_alt
		case 162:
			goto inst162_alt
		case 163:
			goto inst163_alt
		case 356:
			goto inst356_alt
		}
	}
	goto fail

	goto unreachable
	goto inst160
inst160: // rune "09AFaf" -> 164
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst164
			}
			goto inst160_fail
		}
	}
	goto inst160_fail
	goto unreachable
	goto inst160_fail
inst160_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 161:
			goto inst161_alt
		}
	}
	goto fail

	goto unreachable
	goto inst234
inst234: // alt -> 232, 233
	{
		idx := i*406 + 57
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 234, 0})
	goto inst232
inst234_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst233
	}
	goto unreachable

	goto unreachable
	goto inst232
inst232: // alt -> 165, 186
	{
		idx := i*406 + 58
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 232, 0})
	goto inst165
inst232_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst186
	}
	goto unreachable

	goto unreachable
	goto inst165
inst165: // string ":" -> 166
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst166
		}
	}
	goto inst165_fail
	goto unreachable
	goto inst165_fail
inst165_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 232:
			goto inst232_alt
		}
	}
	goto fail

	goto unreachable
	goto inst166
inst166: // rune "09AFaf" -> 172
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst172
			}
			goto inst166_fail
		}
	}
	goto inst166_fail
	goto unreachable
	goto inst166_fail
inst166_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 232:
			goto inst232_alt
		}
	}
	goto fail

	goto unreachable
	goto inst186
inst186: // alt -> 182, 184
	{
		idx := i*406 + 59
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 186, 0})
	goto inst182
inst186_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst184
	}
	goto unreachable

	goto unreachable
	goto inst116
inst116: // alt -> 108, 115
	{
		idx := i*406 + 60
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 116, 0})
	goto inst108
inst116_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst115
	}
	goto unreachable

	goto unreachable
	goto inst108
inst108: // rune "09AFaf" -> 114
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst114
			}
			goto inst108_fail
		}
	}
	goto inst108_fail
	goto unreachable
	goto inst108_fail
inst108_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 116:
			goto inst116_alt
		}
	}
	goto fail

	goto unreachable
	goto inst182
inst182: // alt -> 173, 179
	{
		idx := i*406 + 61
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 182, 0})
	goto inst173
inst182_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst179
	}
	goto unreachable

	goto unreachable
	goto inst173
inst173: // string "2" -> 178
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst178
		}
	}
	goto inst173_fail
	goto unreachable
	goto inst173_fail
inst173_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 182:
			goto inst182_alt
		}
	}
	goto fail

	goto unreachable
	goto inst178
inst178: // alt -> 174, 176
	{
		idx := i*406 + 62
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 178, 0})
	goto inst174
inst178_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst176
	}
	goto unreachable

	goto unreachable
	goto inst176
inst176: // rune "04" -> 177
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst177
		}
	}
	goto inst176_fail
	goto unreachable
	goto inst176_fail
inst176_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 182:
			goto inst182_alt
		}
	}
	goto fail

	goto unreachable
	goto inst174
inst174: // string "5" -> 175
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst175
		}
	}
	goto inst174_fail
	goto unreachable
	goto inst174_fail
inst174_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		}
	}
	goto fail

	goto unreachable
	goto inst179
inst179: // string "1" -> 180
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst180
		}
	}
	goto inst179_fail
	goto unreachable
	goto inst179_fail
inst179_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 186:
			goto inst186_alt
		}
	}
	goto fail

	goto unreachable
	goto inst177
inst177: // rune "09" -> 187
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst187
		}
	}
	goto inst177_fail
	goto unreachable
	goto inst177_fail
inst177_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 182:
			goto inst182_alt
		}
	}
	goto fail

	goto unreachable
	goto inst175
inst175: // rune "05" -> 187
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst187
		}
	}
	goto inst175_fail
	goto unreachable
	goto inst175_fail
inst175_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		}
	}
	goto fail

	goto unreachable
	goto inst180
inst180: // rune "09" -> 181
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst181
		}
	}
	goto inst180_fail
	goto unreachable
	goto inst180_fail
inst180_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 186:
			goto inst186_alt
		}
	}
	goto fail

	goto unreachable
	goto inst181
inst181: // rune "09" -> 187
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst187
		}
	}
	goto inst181_fail
	goto unreachable
	goto inst181_fail
inst181_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 186:
			goto inst186_alt
		}
	}
	goto fail

	goto unreachable
	goto inst187
inst187: // string "." -> 201
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst201
		}
	}
	goto inst187_fail
	goto unreachable
	goto inst187_fail
inst187_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		case 182:
			goto inst182_alt
		case 184:
			goto inst184_alt
		case 186:
			goto inst186_alt
		case 234:
			goto inst234_alt
		}
	}
	goto fail

	goto unreachable
	goto inst185
inst185: // rune "09" -> 187
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst187
		}
	}
	goto inst185_fail
	goto unreachable
	goto inst185_fail
inst185_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 184:
			goto inst184_alt
		case 234:
			goto inst234_alt
		}
	}
	goto fail

	goto unreachable
	goto inst184
inst184: // alt -> 183, 185
	{
		idx := i*406 + 63
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 184, 0})
	goto inst183
inst184_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst185
	}
	goto unreachable

	goto unreachable
	goto inst183
inst183: // rune "19" -> 185
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst185
		}
	}
	goto inst183_fail
	goto unreachable
	goto inst183_fail
inst183_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 184:
			goto inst184_alt
		}
	}
	goto fail

	goto unreachable
	goto inst189
inst189: // string "5" -> 190
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst190
		}
	}
	goto inst189_fail
	goto unreachable
	goto inst189_fail
inst189_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 193:
			goto inst193_alt
		}
	}
	goto fail

	goto unreachable
	goto inst193
inst193: // alt -> 189, 191
	{
		idx := i*406 + 64
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 193, 0})
	goto inst189
inst193_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst191
	}
	goto unreachable

	goto unreachable
	goto inst191
inst191: // rune "04" -> 192
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst192
		}
	}
	goto inst191_fail
	goto unreachable
	goto inst191_fail
inst191_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 197:
			goto inst197_alt
		}
	}
	goto fail

	goto unreachable
	goto inst188
inst188: // string "2" -> 193
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst193
		}
	}
	goto inst188_fail
	goto unreachable
	goto inst188_fail
inst188_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 197:
			goto inst197_alt
		}
	}
	goto fail

	goto unreachable
	goto inst192
inst192: // rune "09" -> 202
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst202
		}
	}
	goto inst192_fail
	goto unreachable
	goto inst192_fail
inst192_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 197:
			goto inst197_alt
		}
	}
	goto fail

	goto unreachable
	goto inst190
inst190: // rune "05" -> 202
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst202
		}
	}
	goto inst190_fail
	goto unreachable
	goto inst190_fail
inst190_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 193:
			goto inst193_alt
		}
	}
	goto fail

	goto unreachable
	goto inst201
inst201: // alt -> 197, 199
	{
		idx := i*406 + 65
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 201, 0})
	goto inst197
inst201_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst199
	}
	goto unreachable

	goto unreachable
	goto inst197
inst197: // alt -> 188, 194
	{
		idx := i*406 + 66
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 197, 0})
	goto inst188
inst197_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst194
	}
	goto unreachable

	goto unreachable
	goto inst202
inst202: // string "." -> 216
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst216
		}
	}
	goto inst202_fail
	goto unreachable
	goto inst202_fail
inst202_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		case 182:
			goto inst182_alt
		case 184:
			goto inst184_alt
		case 186:
			goto inst186_alt
		case 193:
			goto inst193_alt
		case 197:
			goto inst197_alt
		case 199:
			goto inst199_alt
		case 201:
			goto inst201_alt
		case 234:
			goto inst234_alt
		}
	}
	goto fail

	goto unreachable
	goto inst200
inst200: // rune "09" -> 202
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst202
		}
	}
	goto inst200_fail
	goto unreachable
	goto inst200_fail
inst200_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		case 182:
			goto inst182_alt
		case 184:
			goto inst184_alt
		case 186:
			goto inst186_alt
		case 199:
			goto inst199_alt
		case 234:
			goto inst234_alt
		}
	}
	goto fail

	goto unreachable
	goto inst199
inst199: // alt -> 198, 200
	{
		idx := i*406 + 67
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 199, 0})
	goto inst198
inst199_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst200
	}
	goto unreachable

	goto unreachable
	goto inst198
inst198: // rune "19" -> 200
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst200
		}
	}
	goto inst198_fail
	goto unreachable
	goto inst198_fail
inst198_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 199:
			goto inst199_alt
		}
	}
	goto fail

	goto unreachable
	goto inst196
inst196: // rune "09" -> 202
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst202
		}
	}
	goto inst196_fail
	goto unreachable
	goto inst196_fail
inst196_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 201:
			goto inst201_alt
		}
	}
	goto fail

	goto unreachable
	goto inst195
inst195: // rune "09" -> 196
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst196
		}
	}
	goto inst195_fail
	goto unreachable
	goto inst195_fail
inst195_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 201:
			goto inst201_alt
		}
	}
	goto fail

	goto unreachable
	goto inst194
inst194: // string "1" -> 195
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst195
		}
	}
	goto inst194_fail
	goto unreachable
	goto inst194_fail
inst194_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 201:
			goto inst201_alt
		}
	}
	goto fail

	goto unreachable
	goto inst204
inst204: // string "5" -> 205
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst205
		}
	}
	goto inst204_fail
	goto unreachable
	goto inst204_fail
inst204_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 208:
			goto inst208_alt
		}
	}
	goto fail

	goto unreachable
	goto inst208
inst208: // alt -> 204, 206
	{
		idx := i*406 + 68
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 208, 0})
	goto inst204
inst208_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst206
	}
	goto unreachable

	goto unreachable
	goto inst206
inst206: // rune "04" -> 207
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst207
		}
	}
	goto inst206_fail
	goto unreachable
	goto inst206_fail
inst206_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 212:
			goto inst212_alt
		}
	}
	goto fail

	goto unreachable
	goto inst205
inst205: // rune "05" -> 217
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst217
		}
	}
	goto inst205_fail
	goto unreachable
	goto inst205_fail
inst205_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 208:
			goto inst208_alt
		}
	}
	goto fail

	goto unreachable
	goto inst203
inst203: // string "2" -> 208
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst208
		}
	}
	goto inst203_fail
	goto unreachable
	goto inst203_fail
inst203_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 212:
			goto inst212_alt
		}
	}
	goto fail

	goto unreachable
	goto inst207
inst207: // rune "09" -> 217
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst217
		}
	}
	goto inst207_fail
	goto unreachable
	goto inst207_fail
inst207_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 212:
			goto inst212_alt
		}
	}
	goto fail

	goto unreachable
	goto inst216
inst216: // alt -> 212, 214
	{
		idx := i*406 + 69
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 216, 0})
	goto inst212
inst216_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst214
	}
	goto unreachable

	goto unreachable
	goto inst212
inst212: // alt -> 203, 209
	{
		idx := i*406 + 70
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 212, 0})
	goto inst203
inst212_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst209
	}
	goto unreachable

	goto unreachable
	goto inst214
inst214: // alt -> 213, 215
	{
		idx := i*406 + 71
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 214, 0})
	goto inst213
inst214_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst215
	}
	goto unreachable

	goto unreachable
	goto inst213
inst213: // rune "19" -> 215
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst215
		}
	}
	goto inst213_fail
	goto unreachable
	goto inst213_fail
inst213_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 214:
			goto inst214_alt
		}
	}
	goto fail

	goto unreachable
	goto inst215
inst215: // rune "09" -> 217
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst217
		}
	}
	goto inst215_fail
	goto unreachable
	goto inst215_fail
inst215_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		case 182:
			goto inst182_alt
		case 184:
			goto inst184_alt
		case 186:
			goto inst186_alt
		case 193:
			goto inst193_alt
		case 197:
			goto inst197_alt
		case 199:
			goto inst199_alt
		case 201:
			goto inst201_alt
		case 214:
			goto inst214_alt
		case 234:
			goto inst234_alt
		}
	}
	goto fail

	goto unreachable
	goto inst217
inst217: // string "." -> 231
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst231
		}
	}
	goto inst217_fail
	goto unreachable
	goto inst217_fail
inst217_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		case 182:
			goto inst182_alt
		case 184:
			goto inst184_alt
		case 186:
			goto inst186_alt
		case 193:
			goto inst193_alt
		case 197:
			goto inst197_alt
		case 199:
			goto inst199_alt
		case 201:
			goto inst201_alt
		case 208:
			goto inst208_alt
		case 212:
			goto inst212_alt
		case 214:
			goto inst214_alt
		case 216:
			goto inst216_alt
		case 234:
			goto inst234_alt
		}
	}
	goto fail

	goto unreachable
	goto inst209
inst209: // string "1" -> 210
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst210
		}
	}
	goto inst209_fail
	goto unreachable
	goto inst209_fail
inst209_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 216:
			goto inst216_alt
		}
	}
	goto fail

	goto unreachable
	goto inst210
inst210: // rune "09" -> 211
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst211
		}
	}
	goto inst210_fail
	goto unreachable
	goto inst210_fail
inst210_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 216:
			goto inst216_alt
		}
	}
	goto fail

	goto unreachable
	goto inst211
inst211: // rune "09" -> 217
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst217
		}
	}
	goto inst211_fail
	goto unreachable
	goto inst211_fail
inst211_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 216:
			goto inst216_alt
		}
	}
	goto fail

	goto unreachable
	goto inst219
inst219: // string "5" -> 220
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst220
		}
	}
	goto inst219_fail
	goto unreachable
	goto inst219_fail
inst219_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 223:
			goto inst223_alt
		}
	}
	goto fail

	goto unreachable
	goto inst223
inst223: // alt -> 219, 221
	{
		idx := i*406 + 72
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 223, 0})
	goto inst219
inst223_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst221
	}
	goto unreachable

	goto unreachable
	goto inst221
inst221: // rune "04" -> 222
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst222
		}
	}
	goto inst221_fail
	goto unreachable
	goto inst221_fail
inst221_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 227:
			goto inst227_alt
		}
	}
	goto fail

	goto unreachable
	goto inst172
inst172: // alt -> 167, 1116
	{
		idx := i*406 + 73
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 172, 0})
	goto inst167
inst172_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst167
inst167: // rune "09AFaf" -> 171
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst171
			}
			goto inst167_fail
		}
	}
	goto inst167_fail
	goto unreachable
	goto inst167_fail
inst167_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 172:
			goto inst172_alt
		}
	}
	goto fail

	goto unreachable
	goto inst220
inst220: // rune "05" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1116
		}
	}
	goto inst220_fail
	goto unreachable
	goto inst220_fail
inst220_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 223:
			goto inst223_alt
		}
	}
	goto fail

	goto unreachable
	goto inst222
inst222: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst222_fail
	goto unreachable
	goto inst222_fail
inst222_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 227:
			goto inst227_alt
		}
	}
	goto fail

	goto unreachable
	goto inst218
inst218: // string "2" -> 223
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst223
		}
	}
	goto inst218_fail
	goto unreachable
	goto inst218_fail
inst218_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 227:
			goto inst227_alt
		}
	}
	goto fail

	goto unreachable
	goto inst227
inst227: // alt -> 218, 224
	{
		idx := i*406 + 74
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 227, 0})
	goto inst218
inst227_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst224
	}
	goto unreachable

	goto unreachable
	goto inst231
inst231: // alt -> 227, 229
	{
		idx := i*406 + 75
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 231, 0})
	goto inst227
inst231_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst229
	}
	goto unreachable

	goto unreachable
	goto inst229
inst229: // alt -> 228, 230
	{
		idx := i*406 + 76
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 229, 0})
	goto inst228
inst229_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst230
	}
	goto unreachable

	goto unreachable
	goto inst228
inst228: // rune "19" -> 230
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst230
		}
	}
	goto inst228_fail
	goto unreachable
	goto inst228_fail
inst228_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 229:
			goto inst229_alt
		}
	}
	goto fail

	goto unreachable
	goto inst230
inst230: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst230_fail
	goto unreachable
	goto inst230_fail
inst230_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 178:
			goto inst178_alt
		case 182:
			goto inst182_alt
		case 184:
			goto inst184_alt
		case 186:
			goto inst186_alt
		case 193:
			goto inst193_alt
		case 197:
			goto inst197_alt
		case 199:
			goto inst199_alt
		case 201:
			goto inst201_alt
		case 208:
			goto inst208_alt
		case 212:
			goto inst212_alt
		case 214:
			goto inst214_alt
		case 216:
			goto inst216_alt
		case 229:
			goto inst229_alt
		case 234:
			goto inst234_alt
		}
	}
	goto fail

	goto unreachable
	goto inst224
inst224: // string "1" -> 225
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst225
		}
	}
	goto inst224_fail
	goto unreachable
	goto inst224_fail
inst224_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 231:
			goto inst231_alt
		}
	}
	goto fail

	goto unreachable
	goto inst225
inst225: // rune "09" -> 226
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst226
		}
	}
	goto inst225_fail
	goto unreachable
	goto inst225_fail
inst225_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 231:
			goto inst231_alt
		}
	}
	goto fail

	goto unreachable
	goto inst226
inst226: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst226_fail
	goto unreachable
	goto inst226_fail
inst226_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 231:
			goto inst231_alt
		}
	}
	goto fail

	goto unreachable
	goto inst356
inst356: // alt -> 235, 236
	{
		idx := i*406 + 77
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 356, 0})
	goto inst235
inst356_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst236
	}
	goto unreachable

	goto unreachable
	goto inst236
inst236: // rune "09AFaf" -> 242
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst242
			}
			goto inst236_fail
		}
	}
	goto inst236_fail
	goto unreachable
	goto inst236_fail
inst236_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 487:
			goto inst487_alt
		}
	}
	goto fail

	goto unreachable
	goto inst242
inst242: // alt -> 237, 243
	{
		idx := i*406 + 78
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 242, 0})
	goto inst237
inst242_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst243
	}
	goto unreachable

	goto unreachable
	goto inst237
inst237: // rune "09AFaf" -> 241
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst241
			}
			goto inst237_fail
		}
	}
	goto inst237_fail
	goto unreachable
	goto inst237_fail
inst237_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 242:
			goto inst242_alt
		}
	}
	goto fail

	goto unreachable
	goto inst171
inst171: // alt -> 168, 1116
	{
		idx := i*406 + 79
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 171, 0})
	goto inst168
inst171_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst241
inst241: // alt -> 238, 243
	{
		idx := i*406 + 80
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 241, 0})
	goto inst238
inst241_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst243
	}
	goto unreachable

	goto unreachable
	goto inst238
inst238: // rune "09AFaf" -> 240
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst240
			}
			goto inst238_fail
		}
	}
	goto inst238_fail
	goto unreachable
	goto inst238_fail
inst238_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 241:
			goto inst241_alt
		}
	}
	goto fail

	goto unreachable
	goto inst168
inst168: // rune "09AFaf" -> 170
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst170
			}
			goto inst168_fail
		}
	}
	goto inst168_fail
	goto unreachable
	goto inst168_fail
inst168_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 171:
			goto inst171_alt
		}
	}
	goto fail

	goto unreachable
	goto inst240
inst240: // alt -> 239, 243
	{
		idx := i*406 + 81
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 240, 0})
	goto inst239
inst240_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst243
	}
	goto unreachable

	goto unreachable
	goto inst243
inst243: // string ":" -> 244
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst244
		}
	}
	goto inst243_fail
	goto unreachable
	goto inst243_fail
inst243_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 240:
			goto inst240_alt
		case 241:
			goto inst241_alt
		case 242:
			goto inst242_alt
		case 487:
			goto inst487_alt
		}
	}
	goto fail

	goto unreachable
	goto inst239
inst239: // rune "09AFaf" -> 243
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst243
			}
			goto inst239_fail
		}
	}
	goto inst239_fail
	goto unreachable
	goto inst239_fail
inst239_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 240:
			goto inst240_alt
		}
	}
	goto fail

	goto unreachable
	goto inst233
inst233: // string ":" -> 1116
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1116
		}
	}
	goto inst233_fail
	goto unreachable
	goto inst233_fail
inst233_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 121:
			goto inst121_alt
		case 122:
			goto inst122_alt
		case 123:
			goto inst123_alt
		case 129:
			goto inst129_alt
		case 130:
			goto inst130_alt
		case 131:
			goto inst131_alt
		case 137:
			goto inst137_alt
		case 138:
			goto inst138_alt
		case 139:
			goto inst139_alt
		case 145:
			goto inst145_alt
		case 146:
			goto inst146_alt
		case 147:
			goto inst147_alt
		case 153:
			goto inst153_alt
		case 154:
			goto inst154_alt
		case 155:
			goto inst155_alt
		case 161:
			goto inst161_alt
		case 162:
			goto inst162_alt
		case 163:
			goto inst163_alt
		case 356:
			goto inst356_alt
		}
	}
	goto fail

	goto unreachable
	goto inst244
inst244: // rune "09AFaf" -> 250
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst250
			}
			goto inst244_fail
		}
	}
	goto inst244_fail
	goto unreachable
	goto inst244_fail
inst244_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 240:
			goto inst240_alt
		case 241:
			goto inst241_alt
		case 242:
			goto inst242_alt
		case 487:
			goto inst487_alt
		}
	}
	goto fail

	goto unreachable
	goto inst250
inst250: // alt -> 245, 251
	{
		idx := i*406 + 82
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 250, 0})
	goto inst245
inst250_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst251
	}
	goto unreachable

	goto unreachable
	goto inst247
inst247: // rune "09AFaf" -> 251
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst251
			}
			goto inst247_fail
		}
	}
	goto inst247_fail
	goto unreachable
	goto inst247_fail
inst247_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 248:
			goto inst248_alt
		}
	}
	goto fail

	goto unreachable
	goto inst248
inst248: // alt -> 247, 251
	{
		idx := i*406 + 83
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 248, 0})
	goto inst247
inst248_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst251
	}
	goto unreachable

	goto unreachable
	goto inst251
inst251: // string ":" -> 252
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst252
		}
	}
	goto inst251_fail
	goto unreachable
	goto inst251_fail
inst251_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 240:
			goto inst240_alt
		case 241:
			goto inst241_alt
		case 242:
			goto inst242_alt
		case 248:
			goto inst248_alt
		case 249:
			goto inst249_alt
		case 250:
			goto inst250_alt
		case 487:
			goto inst487_alt
		}
	}
	goto fail

	goto unreachable
	goto inst245
inst245: // rune "09AFaf" -> 249
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst249
			}
			goto inst245_fail
		}
	}
	goto inst245_fail
	goto unreachable
	goto inst245_fail
inst245_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 250:
			goto inst250_alt
		}
	}
	goto fail

	goto unreachable
	goto inst249
inst249: // alt -> 246, 251
	{
		idx := i*406 + 84
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 249, 0})
	goto inst246
inst249_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst251
	}
	goto unreachable

	goto unreachable
	goto inst246
inst246: // rune "09AFaf" -> 248
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst248
			}
			goto inst246_fail
		}
	}
	goto inst246_fail
	goto unreachable
	goto inst246_fail
inst246_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 249:
			goto inst249_alt
		}
	}
	goto fail

	goto unreachable
	goto inst252
inst252: // rune "09AFaf" -> 258
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst258
			}
			goto inst252_fail
		}
	}
	goto inst252_fail
	goto unreachable
	goto inst252_fail
inst252_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 240:
			goto inst240_alt
		case 241:
			goto inst241_alt
		case 242:
			goto inst242_alt
		case 248:
			goto inst248_alt
		case 249:
			goto inst249_alt
		case 250:
			goto inst250_alt
		case 487:
			goto inst487_alt
		}
	}
	goto fail

	goto unreachable
	goto inst258
inst258: // alt -> 253, 259
	{
		idx := i*406 + 85
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 258, 0})
	goto inst253
inst258_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst259
	}
	goto unreachable

	goto unreachable
	goto inst253
inst253: // rune "09AFaf" -> 257
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst257
			}
			goto inst253_fail
		}
	}
	goto inst253_fail
	goto unreachable
	goto inst253_fail
inst253_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 258:
			goto inst258_alt
		}
	}
	goto fail

	goto unreachable
	goto inst257
inst257: // alt -> 254, 259
	{
		idx := i*406 + 86
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 257, 0})
	goto inst254
inst257_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst259
	}
	goto unreachable

	goto unreachable
	goto inst254
inst254: // rune "09AFaf" -> 256
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst256
			}
			goto inst254_fail
		}
	}
	goto inst254_fail
	goto unreachable
	goto inst254_fail
inst254_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 257:
			goto inst257_alt
		}
	}
	goto fail

	goto unreachable
	goto inst256
inst256: // alt -> 255, 259
	{
		idx := i*406 + 87
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 256, 0})
	goto inst255
inst256_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst259
	}
	goto unreachable

	goto unreachable
	goto inst259
inst259: // string ":" -> 260
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst260
		}
	}
	goto inst259_fail
	goto unreachable
	goto inst259_fail
inst259_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 240:
			goto inst240_alt
		case 241:
			goto inst241_alt
		case 242:
			goto inst242_alt
		case 248:
			goto inst248_alt
		case 249:
			goto inst249_alt
		case 250:
			goto inst250_alt
		case 256:
			goto inst256_alt
		case 257:
			goto inst257_alt
		case 258:
			goto inst258_alt
		case 487:
			goto inst487_alt
		}
	}
	goto fail

	goto unreachable
	goto inst255
inst255: // rune "09AFaf" -> 259
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst259
			}
			goto inst255_fail
		}
	}
	goto inst255_fail
	goto unreachable
	goto inst255_fail
inst255_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 256:
			goto inst256_alt
		}
	}
	goto fail

	goto unreachable
	goto inst260
inst260: // rune "09AFaf" -> 266
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst266
			}
			goto inst260_fail
		}
	}
	goto inst260_fail
	goto unreachable
	goto inst260_fail
inst260_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 240:
			goto inst240_alt
		case 241:
			goto inst241_alt
		case 242:
			goto inst242_alt
		case 248:
			goto inst248_alt
		case 249:
			goto inst249_alt
		case 250:
			goto inst250_alt
		case 256:
			goto inst256_alt
		case 257:
			goto inst257_alt
		case 258:
			goto inst258_alt
		case 487:
			goto inst487_alt
		}
	}
	goto fail

	goto unreachable
	goto inst266
inst266: // alt -> 261, 267
	{
		idx := i*406 + 88
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 266, 0})
	goto inst261
inst266_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst267
	}
	goto unreachable

	goto unreachable
	goto inst261
inst261: // rune "09AFaf" -> 265
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst265
			}
			goto inst261_fail
		}
	}
	goto inst261_fail
	goto unreachable
	goto inst261_fail
inst261_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 266:
			goto inst266_alt
		}
	}
	goto fail

	goto unreachable
	goto inst265
inst265: // alt -> 262, 267
	{
		idx := i*406 + 89
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 265, 0})
	goto inst262
inst265_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst267
	}
	goto unreachable

	goto unreachable
	goto inst262
inst262: // rune "09AFaf" -> 264
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst264
			}
			goto inst262_fail
		}
	}
	goto inst262_fail
	goto unreachable
	goto inst262_fail
inst262_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 265:
			goto inst265_alt
		}
	}
	goto fail

	goto unreachable
	goto inst264
inst264: // alt -> 263, 267
	{
		idx := i*406 + 90
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 264, 0})
	goto inst263
inst264_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst267
	}
	goto unreachable

	goto unreachable
	goto inst267
inst267: // string ":" -> 268
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst268
		}
	}
	goto inst267_fail
	goto unreachable
	goto inst267_fail
inst267_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 240:
			goto inst240_alt
		case 241:
			goto inst241_alt
		case 242:
			goto inst242_alt
		case 248:
			goto inst248_alt
		case 249:
			goto inst249_alt
		case 250:
			goto inst250_alt
		case 256:
			goto inst256_alt
		case 257:
			goto inst257_alt
		case 258:
			goto inst258_alt
		case 264:
			goto inst264_alt
		case 265:
			goto inst265_alt
		case 266:
			goto inst266_alt
		case 487:
			goto inst487_alt
		}
	}
	goto fail

	goto unreachable
	goto inst263
inst263: // rune "09AFaf" -> 267
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst267
			}
			goto inst263_fail
		}
	}
	goto inst263_fail
	goto unreachable
	goto inst263_fail
inst263_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 264:
			goto inst264_alt
		}
	}
	goto fail

	goto unreachable
	goto inst268
inst268: // rune "09AFaf" -> 274
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst274
			}
			goto inst268_fail
		}
	}
	goto inst268_fail
	goto unreachable
	goto inst268_fail
inst268_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 240:
			goto inst240_alt
		case 241:
			goto inst241_alt
		case 242:
			goto inst242_alt
		case 248:
			goto inst248_alt
		case 249:
			goto inst249_alt
		case 250:
			goto inst250_alt
		case 256:
			goto inst256_alt
		case 257:
			goto inst257_alt
		case 258:
			goto inst258_alt
		case 264:
			goto inst264_alt
		case 265:
			goto inst265_alt
		case 266:
			goto inst266_alt
		case 487:
			goto inst487_alt
		}
	}
	goto fail

	goto unreachable
	goto inst274
inst274: // alt -> 269, 275
	{
		idx := i*406 + 91
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 274, 0})
	goto inst269
inst274_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst275
	}
	goto unreachable

	goto unreachable
	goto inst269
inst269: // rune "09AFaf" -> 273
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst273
			}
			goto inst269_fail
		}
	}
	goto inst269_fail
	goto unreachable
	goto inst269_fail
inst269_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 274:
			goto inst274_alt
		}
	}
	goto fail

	goto unreachable
	goto inst273
inst273: // alt -> 270, 275
	{
		idx := i*406 + 92
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 273, 0})
	goto inst270
inst273_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst275
	}
	goto unreachable

	goto unreachable
	goto inst270
inst270: // rune "09AFaf" -> 272
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst272
			}
			goto inst270_fail
		}
	}
	goto inst270_fail
	goto unreachable
	goto inst270_fail
inst270_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 273:
			goto inst273_alt
		}
	}
	goto fail

	goto unreachable
	goto inst275
inst275: // string ":" -> 355
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst355
		}
	}
	goto inst275_fail
	goto unreachable
	goto inst275_fail
inst275_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 240:
			goto inst240_alt
		case 241:
			goto inst241_alt
		case 242:
			goto inst242_alt
		case 248:
			goto inst248_alt
		case 249:
			goto inst249_alt
		case 250:
			goto inst250_alt
		case 256:
			goto inst256_alt
		case 257:
			goto inst257_alt
		case 258:
			goto inst258_alt
		case 264:
			goto inst264_alt
		case 265:
			goto inst265_alt
		case 266:
			goto inst266_alt
		case 272:
			goto inst272_alt
		case 273:
			goto inst273_alt
		case 274:
			goto inst274_alt
		case 487:
			goto inst487_alt
		}
	}
	goto fail

	goto unreachable
	goto inst272
inst272: // alt -> 271, 275
	{
		idx := i*406 + 93
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 272, 0})
	goto inst271
inst272_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst275
	}
	goto unreachable

	goto unreachable
	goto inst271
inst271: // rune "09AFaf" -> 275
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst275
			}
			goto inst271_fail
		}
	}
	goto inst271_fail
	goto unreachable
	goto inst271_fail
inst271_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 272:
			goto inst272_alt
		}
	}
	goto fail

	goto unreachable
	goto inst355
inst355: // alt -> 276, 293
	{
		idx := i*406 + 94
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 355, 0})
	goto inst276
inst355_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst293
	}
	goto unreachable

	goto unreachable
	goto inst276
inst276: // string ":" -> 277
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst277
		}
	}
	goto inst276_fail
	goto unreachable
	goto inst276_fail
inst276_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 355:
			goto inst355_alt
		}
	}
	goto fail

	goto unreachable
	goto inst277
inst277: // rune "09AFaf" -> 283
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst283
			}
			goto inst277_fail
		}
	}
	goto inst277_fail
	goto unreachable
	goto inst277_fail
inst277_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 355:
			goto inst355_alt
		}
	}
	goto fail

	goto unreachable
	goto inst115
inst115: // string ":" -> 1116
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1116
		}
	}
	goto inst115_fail
	goto unreachable
	goto inst115_fail
inst115_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 56:
			goto inst56_alt
		case 57:
			goto inst57_alt
		case 58:
			goto inst58_alt
		case 64:
			goto inst64_alt
		case 65:
			goto inst65_alt
		case 66:
			goto inst66_alt
		case 72:
			goto inst72_alt
		case 73:
			goto inst73_alt
		case 74:
			goto inst74_alt
		case 80:
			goto inst80_alt
		case 81:
			goto inst81_alt
		case 82:
			goto inst82_alt
		case 88:
			goto inst88_alt
		case 89:
			goto inst89_alt
		case 90:
			goto inst90_alt
		case 96:
			goto inst96_alt
		case 97:
			goto inst97_alt
		case 98:
			goto inst98_alt
		case 104:
			goto inst104_alt
		case 105:
			goto inst105_alt
		case 106:
			goto inst106_alt
		case 235:
			goto inst235_alt
		}
	}
	goto fail

	goto unreachable
	goto inst283
inst283: // alt -> 278, 292
	{
		idx := i*406 + 95
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 283, 0})
	goto inst278
inst283_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst292
	}
	goto unreachable

	goto unreachable
	goto inst278
inst278: // rune "09AFaf" -> 282
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst282
			}
			goto inst278_fail
		}
	}
	goto inst278_fail
	goto unreachable
	goto inst278_fail
inst278_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 283:
			goto inst283_alt
		}
	}
	goto fail

	goto unreachable
	goto inst282
inst282: // alt -> 279, 292
	{
		idx := i*406 + 96
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 282, 0})
	goto inst279
inst282_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst292
	}
	goto unreachable

	goto unreachable
	goto inst279
inst279: // rune "09AFaf" -> 281
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst281
			}
			goto inst279_fail
		}
	}
	goto inst279_fail
	goto unreachable
	goto inst279_fail
inst279_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 282:
			goto inst282_alt
		}
	}
	goto fail

	goto unreachable
	goto inst281
inst281: // alt -> 280, 292
	{
		idx := i*406 + 97
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 281, 0})
	goto inst280
inst281_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst292
	}
	goto unreachable

	goto unreachable
	goto inst292
inst292: // alt -> 284, 1116
	{
		idx := i*406 + 98
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 292, 0})
	goto inst284
inst292_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst280
inst280: // rune "09AFaf" -> 292
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst292
			}
			goto inst280_fail
		}
	}
	goto inst280_fail
	goto unreachable
	goto inst280_fail
inst280_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 281:
			goto inst281_alt
		}
	}
	goto fail

	goto unreachable
	goto inst284
inst284: // string ":" -> 285
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst285
		}
	}
	goto inst284_fail
	goto unreachable
	goto inst284_fail
inst284_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 292:
			goto inst292_alt
		}
	}
	goto fail

	goto unreachable
	goto inst285
inst285: // rune "09AFaf" -> 291
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst291
			}
			goto inst285_fail
		}
	}
	goto inst285_fail
	goto unreachable
	goto inst285_fail
inst285_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 292:
			goto inst292_alt
		}
	}
	goto fail

	goto unreachable
	goto inst293
inst293: // string ":" -> 354
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst354
		}
	}
	goto inst293_fail
	goto unreachable
	goto inst293_fail
inst293_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 240:
			goto inst240_alt
		case 241:
			goto inst241_alt
		case 242:
			goto inst242_alt
		case 248:
			goto inst248_alt
		case 249:
			goto inst249_alt
		case 250:
			goto inst250_alt
		case 256:
			goto inst256_alt
		case 257:
			goto inst257_alt
		case 258:
			goto inst258_alt
		case 264:
			goto inst264_alt
		case 265:
			goto inst265_alt
		case 266:
			goto inst266_alt
		case 272:
			goto inst272_alt
		case 273:
			goto inst273_alt
		case 274:
			goto inst274_alt
		case 487:
			goto inst487_alt
		}
	}
	goto fail

	goto unreachable
	goto inst295
inst295: // string "5" -> 296
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst296
		}
	}
	goto inst295_fail
	goto unreachable
	goto inst295_fail
inst295_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 299:
			goto inst299_alt
		}
	}
	goto fail

	goto unreachable
	goto inst299
inst299: // alt -> 295, 297
	{
		idx := i*406 + 99
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 299, 0})
	goto inst295
inst299_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst297
	}
	goto unreachable

	goto unreachable
	goto inst294
inst294: // string "2" -> 299
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst299
		}
	}
	goto inst294_fail
	goto unreachable
	goto inst294_fail
inst294_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 303:
			goto inst303_alt
		}
	}
	goto fail

	goto unreachable
	goto inst297
inst297: // rune "04" -> 298
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst298
		}
	}
	goto inst297_fail
	goto unreachable
	goto inst297_fail
inst297_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 303:
			goto inst303_alt
		}
	}
	goto fail

	goto unreachable
	goto inst298
inst298: // rune "09" -> 308
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst308
		}
	}
	goto inst298_fail
	goto unreachable
	goto inst298_fail
inst298_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 303:
			goto inst303_alt
		}
	}
	goto fail

	goto unreachable
	goto inst296
inst296: // rune "05" -> 308
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst308
		}
	}
	goto inst296_fail
	goto unreachable
	goto inst296_fail
inst296_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 299:
			goto inst299_alt
		}
	}
	goto fail

	goto unreachable
	goto inst303
inst303: // alt -> 294, 300
	{
		idx := i*406 + 100
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 303, 0})
	goto inst294
inst303_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst300
	}
	goto unreachable

	goto unreachable
	goto inst300
inst300: // string "1" -> 301
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst301
		}
	}
	goto inst300_fail
	goto unreachable
	goto inst300_fail
inst300_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 307:
			goto inst307_alt
		}
	}
	goto fail

	goto unreachable
	goto inst301
inst301: // rune "09" -> 302
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst302
		}
	}
	goto inst301_fail
	goto unreachable
	goto inst301_fail
inst301_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 307:
			goto inst307_alt
		}
	}
	goto fail

	goto unreachable
	goto inst302
inst302: // rune "09" -> 308
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst308
		}
	}
	goto inst302_fail
	goto unreachable
	goto inst302_fail
inst302_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 307:
			goto inst307_alt
		}
	}
	goto fail

	goto unreachable
	goto inst308
inst308: // string "." -> 322
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst322
		}
	}
	goto inst308_fail
	goto unreachable
	goto inst308_fail
inst308_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 299:
			goto inst299_alt
		case 303:
			goto inst303_alt
		case 305:
			goto inst305_alt
		case 307:
			goto inst307_alt
		case 354:
			goto inst354_alt
		}
	}
	goto fail

	goto unreachable
	goto inst291
inst291: // alt -> 286, 1116
	{
		idx := i*406 + 101
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 291, 0})
	goto inst286
inst291_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst286
inst286: // rune "09AFaf" -> 290
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst290
			}
			goto inst286_fail
		}
	}
	goto inst286_fail
	goto unreachable
	goto inst286_fail
inst286_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 291:
			goto inst291_alt
		}
	}
	goto fail

	goto unreachable
	goto inst354
inst354: // alt -> 307, 353
	{
		idx := i*406 + 102
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 354, 0})
	goto inst307
inst354_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst353
	}
	goto unreachable

	goto unreachable
	goto inst307
inst307: // alt -> 303, 305
	{
		idx := i*406 + 103
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 307, 0})
	goto inst303
inst307_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst305
	}
	goto unreachable

	goto unreachable
	goto inst306
inst306: // rune "09" -> 308
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst308
		}
	}
	goto inst306_fail
	goto unreachable
	goto inst306_fail
inst306_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 305:
			goto inst305_alt
		case 354:
			goto inst354_alt
		}
	}
	goto fail

	goto unreachable
	goto inst305
inst305: // alt -> 304, 306
	{
		idx := i*406 + 104
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 305, 0})
	goto inst304
inst305_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst306
	}
	goto unreachable

	goto unreachable
	goto inst304
inst304: // rune "19" -> 306
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst306
		}
	}
	goto inst304_fail
	goto unreachable
	goto inst304_fail
inst304_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 305:
			goto inst305_alt
		}
	}
	goto fail

	goto unreachable
	goto inst322
inst322: // alt -> 318, 320
	{
		idx := i*406 + 105
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 322, 0})
	goto inst318
inst322_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst320
	}
	goto unreachable

	goto unreachable
	goto inst318
inst318: // alt -> 309, 315
	{
		idx := i*406 + 106
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 318, 0})
	goto inst309
inst318_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst315
	}
	goto unreachable

	goto unreachable
	goto inst309
inst309: // string "2" -> 314
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst314
		}
	}
	goto inst309_fail
	goto unreachable
	goto inst309_fail
inst309_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 318:
			goto inst318_alt
		}
	}
	goto fail

	goto unreachable
	goto inst315
inst315: // string "1" -> 316
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst316
		}
	}
	goto inst315_fail
	goto unreachable
	goto inst315_fail
inst315_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 322:
			goto inst322_alt
		}
	}
	goto fail

	goto unreachable
	goto inst316
inst316: // rune "09" -> 317
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst317
		}
	}
	goto inst316_fail
	goto unreachable
	goto inst316_fail
inst316_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 322:
			goto inst322_alt
		}
	}
	goto fail

	goto unreachable
	goto inst314
inst314: // alt -> 310, 312
	{
		idx := i*406 + 107
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 314, 0})
	goto inst310
inst314_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst312
	}
	goto unreachable

	goto unreachable
	goto inst312
inst312: // rune "04" -> 313
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst313
		}
	}
	goto inst312_fail
	goto unreachable
	goto inst312_fail
inst312_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 318:
			goto inst318_alt
		}
	}
	goto fail

	goto unreachable
	goto inst313
inst313: // rune "09" -> 323
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst323
		}
	}
	goto inst313_fail
	goto unreachable
	goto inst313_fail
inst313_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 318:
			goto inst318_alt
		}
	}
	goto fail

	goto unreachable
	goto inst310
inst310: // string "5" -> 311
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst311
		}
	}
	goto inst310_fail
	goto unreachable
	goto inst310_fail
inst310_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 314:
			goto inst314_alt
		}
	}
	goto fail

	goto unreachable
	goto inst320
inst320: // alt -> 319, 321
	{
		idx := i*406 + 108
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 320, 0})
	goto inst319
inst320_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst321
	}
	goto unreachable

	goto unreachable
	goto inst319
inst319: // rune "19" -> 321
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst321
		}
	}
	goto inst319_fail
	goto unreachable
	goto inst319_fail
inst319_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 320:
			goto inst320_alt
		}
	}
	goto fail

	goto unreachable
	goto inst321
inst321: // rune "09" -> 323
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst323
		}
	}
	goto inst321_fail
	goto unreachable
	goto inst321_fail
inst321_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 299:
			goto inst299_alt
		case 303:
			goto inst303_alt
		case 305:
			goto inst305_alt
		case 307:
			goto inst307_alt
		case 320:
			goto inst320_alt
		case 354:
			goto inst354_alt
		}
	}
	goto fail

	goto unreachable
	goto inst317
inst317: // rune "09" -> 323
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst323
		}
	}
	goto inst317_fail
	goto unreachable
	goto inst317_fail
inst317_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 322:
			goto inst322_alt
		}
	}
	goto fail

	goto unreachable
	goto inst323
inst323: // string "." -> 337
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst337
		}
	}
	goto inst323_fail
	goto unreachable
	goto inst323_fail
inst323_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 299:
			goto inst299_alt
		case 303:
			goto inst303_alt
		case 305:
			goto inst305_alt
		case 307:
			goto inst307_alt
		case 314:
			goto inst314_alt
		case 318:
			goto inst318_alt
		case 320:
			goto inst320_alt
		case 322:
			goto inst322_alt
		case 354:
			goto inst354_alt
		}
	}
	goto fail

	goto unreachable
	goto inst311
inst311: // rune "05" -> 323
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst323
		}
	}
	goto inst311_fail
	goto unreachable
	goto inst311_fail
inst311_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 314:
			goto inst314_alt
		}
	}
	goto fail

	goto unreachable
	goto inst325
inst325: // string "5" -> 326
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst326
		}
	}
	goto inst325_fail
	goto unreachable
	goto inst325_fail
inst325_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 329:
			goto inst329_alt
		}
	}
	goto fail

	goto unreachable
	goto inst329
inst329: // alt -> 325, 327
	{
		idx := i*406 + 109
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 329, 0})
	goto inst325
inst329_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst327
	}
	goto unreachable

	goto unreachable
	goto inst327
inst327: // rune "04" -> 328
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst328
		}
	}
	goto inst327_fail
	goto unreachable
	goto inst327_fail
inst327_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 333:
			goto inst333_alt
		}
	}
	goto fail

	goto unreachable
	goto inst328
inst328: // rune "09" -> 338
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst338
		}
	}
	goto inst328_fail
	goto unreachable
	goto inst328_fail
inst328_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 333:
			goto inst333_alt
		}
	}
	goto fail

	goto unreachable
	goto inst326
inst326: // rune "05" -> 338
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst338
		}
	}
	goto inst326_fail
	goto unreachable
	goto inst326_fail
inst326_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 329:
			goto inst329_alt
		}
	}
	goto fail

	goto unreachable
	goto inst338
inst338: // string "." -> 352
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst352
		}
	}
	goto inst338_fail
	goto unreachable
	goto inst338_fail
inst338_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 299:
			goto inst299_alt
		case 303:
			goto inst303_alt
		case 305:
			goto inst305_alt
		case 307:
			goto inst307_alt
		case 314:
			goto inst314_alt
		case 318:
			goto inst318_alt
		case 320:
			goto inst320_alt
		case 322:
			goto inst322_alt
		case 329:
			goto inst329_alt
		case 333:
			goto inst333_alt
		case 335:
			goto inst335_alt
		case 337:
			goto inst337_alt
		case 354:
			goto inst354_alt
		}
	}
	goto fail

	goto unreachable
	goto inst332
inst332: // rune "09" -> 338
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst338
		}
	}
	goto inst332_fail
	goto unreachable
	goto inst332_fail
inst332_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 337:
			goto inst337_alt
		}
	}
	goto fail

	goto unreachable
	goto inst331
inst331: // rune "09" -> 332
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst332
		}
	}
	goto inst331_fail
	goto unreachable
	goto inst331_fail
inst331_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 337:
			goto inst337_alt
		}
	}
	goto fail

	goto unreachable
	goto inst336
inst336: // rune "09" -> 338
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst338
		}
	}
	goto inst336_fail
	goto unreachable
	goto inst336_fail
inst336_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 299:
			goto inst299_alt
		case 303:
			goto inst303_alt
		case 305:
			goto inst305_alt
		case 307:
			goto inst307_alt
		case 314:
			goto inst314_alt
		case 318:
			goto inst318_alt
		case 320:
			goto inst320_alt
		case 322:
			goto inst322_alt
		case 335:
			goto inst335_alt
		case 354:
			goto inst354_alt
		}
	}
	goto fail

	goto unreachable
	goto inst334
inst334: // rune "19" -> 336
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst336
		}
	}
	goto inst334_fail
	goto unreachable
	goto inst334_fail
inst334_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 335:
			goto inst335_alt
		}
	}
	goto fail

	goto unreachable
	goto inst335
inst335: // alt -> 334, 336
	{
		idx := i*406 + 110
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 335, 0})
	goto inst334
inst335_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst336
	}
	goto unreachable

	goto unreachable
	goto inst337
inst337: // alt -> 333, 335
	{
		idx := i*406 + 111
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 337, 0})
	goto inst333
inst337_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst335
	}
	goto unreachable

	goto unreachable
	goto inst324
inst324: // string "2" -> 329
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst329
		}
	}
	goto inst324_fail
	goto unreachable
	goto inst324_fail
inst324_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 333:
			goto inst333_alt
		}
	}
	goto fail

	goto unreachable
	goto inst333
inst333: // alt -> 324, 330
	{
		idx := i*406 + 112
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 333, 0})
	goto inst324
inst333_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst330
	}
	goto unreachable

	goto unreachable
	goto inst330
inst330: // string "1" -> 331
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst331
		}
	}
	goto inst330_fail
	goto unreachable
	goto inst330_fail
inst330_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 337:
			goto inst337_alt
		}
	}
	goto fail

	goto unreachable
	goto inst353
inst353: // nop -> 1116
	goto inst1116

	goto unreachable
	goto inst290
inst290: // alt -> 287, 1116
	{
		idx := i*406 + 113
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 290, 0})
	goto inst287
inst290_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst287
inst287: // rune "09AFaf" -> 289
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst289
			}
			goto inst287_fail
		}
	}
	goto inst287_fail
	goto unreachable
	goto inst287_fail
inst287_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 290:
			goto inst290_alt
		}
	}
	goto fail

	goto unreachable
	goto inst340
inst340: // string "5" -> 341
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst341
		}
	}
	goto inst340_fail
	goto unreachable
	goto inst340_fail
inst340_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 344:
			goto inst344_alt
		}
	}
	goto fail

	goto unreachable
	goto inst341
inst341: // rune "05" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1116
		}
	}
	goto inst341_fail
	goto unreachable
	goto inst341_fail
inst341_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 344:
			goto inst344_alt
		}
	}
	goto fail

	goto unreachable
	goto inst344
inst344: // alt -> 340, 342
	{
		idx := i*406 + 114
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 344, 0})
	goto inst340
inst344_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst342
	}
	goto unreachable

	goto unreachable
	goto inst339
inst339: // string "2" -> 344
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst344
		}
	}
	goto inst339_fail
	goto unreachable
	goto inst339_fail
inst339_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 348:
			goto inst348_alt
		}
	}
	goto fail

	goto unreachable
	goto inst352
inst352: // alt -> 348, 350
	{
		idx := i*406 + 115
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 352, 0})
	goto inst348
inst352_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst350
	}
	goto unreachable

	goto unreachable
	goto inst348
inst348: // alt -> 339, 345
	{
		idx := i*406 + 116
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 348, 0})
	goto inst339
inst348_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst345
	}
	goto unreachable

	goto unreachable
	goto inst487
inst487: // alt -> 356, 357
	{
		idx := i*406 + 117
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 487, 0})
	goto inst356
inst487_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst357
	}
	goto unreachable

	goto unreachable
	goto inst357
inst357: // rune "09AFaf" -> 363
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst363
			}
			goto inst357_fail
		}
	}
	goto inst357_fail
	goto unreachable
	goto inst357_fail
inst357_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 628:
			goto inst628_alt
		}
	}
	goto fail

	goto unreachable
	goto inst363
inst363: // alt -> 358, 364
	{
		idx := i*406 + 118
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 363, 0})
	goto inst358
inst363_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst364
	}
	goto unreachable

	goto unreachable
	goto inst358
inst358: // rune "09AFaf" -> 362
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst362
			}
			goto inst358_fail
		}
	}
	goto inst358_fail
	goto unreachable
	goto inst358_fail
inst358_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 363:
			goto inst363_alt
		}
	}
	goto fail

	goto unreachable
	goto inst350
inst350: // alt -> 349, 351
	{
		idx := i*406 + 119
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 350, 0})
	goto inst349
inst350_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst351
	}
	goto unreachable

	goto unreachable
	goto inst349
inst349: // rune "19" -> 351
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst351
		}
	}
	goto inst349_fail
	goto unreachable
	goto inst349_fail
inst349_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 350:
			goto inst350_alt
		}
	}
	goto fail

	goto unreachable
	goto inst351
inst351: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst351_fail
	goto unreachable
	goto inst351_fail
inst351_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 299:
			goto inst299_alt
		case 303:
			goto inst303_alt
		case 305:
			goto inst305_alt
		case 307:
			goto inst307_alt
		case 314:
			goto inst314_alt
		case 318:
			goto inst318_alt
		case 320:
			goto inst320_alt
		case 322:
			goto inst322_alt
		case 329:
			goto inst329_alt
		case 333:
			goto inst333_alt
		case 335:
			goto inst335_alt
		case 337:
			goto inst337_alt
		case 350:
			goto inst350_alt
		case 354:
			goto inst354_alt
		}
	}
	goto fail

	goto unreachable
	goto inst114
inst114: // alt -> 109, 1116
	{
		idx := i*406 + 120
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 114, 0})
	goto inst109
inst114_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst109
inst109: // rune "09AFaf" -> 113
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst113
			}
			goto inst109_fail
		}
	}
	goto inst109_fail
	goto unreachable
	goto inst109_fail
inst109_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 114:
			goto inst114_alt
		}
	}
	goto fail

	goto unreachable
	goto inst362
inst362: // alt -> 359, 364
	{
		idx := i*406 + 121
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 362, 0})
	goto inst359
inst362_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst364
	}
	goto unreachable

	goto unreachable
	goto inst359
inst359: // rune "09AFaf" -> 361
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst361
			}
			goto inst359_fail
		}
	}
	goto inst359_fail
	goto unreachable
	goto inst359_fail
inst359_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 362:
			goto inst362_alt
		}
	}
	goto fail

	goto unreachable
	goto inst361
inst361: // alt -> 360, 364
	{
		idx := i*406 + 122
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 361, 0})
	goto inst360
inst361_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst364
	}
	goto unreachable

	goto unreachable
	goto inst364
inst364: // string ":" -> 365
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst365
		}
	}
	goto inst364_fail
	goto unreachable
	goto inst364_fail
inst364_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 361:
			goto inst361_alt
		case 362:
			goto inst362_alt
		case 363:
			goto inst363_alt
		case 628:
			goto inst628_alt
		}
	}
	goto fail

	goto unreachable
	goto inst360
inst360: // rune "09AFaf" -> 364
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst364
			}
			goto inst360_fail
		}
	}
	goto inst360_fail
	goto unreachable
	goto inst360_fail
inst360_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 361:
			goto inst361_alt
		}
	}
	goto fail

	goto unreachable
	goto inst365
inst365: // rune "09AFaf" -> 371
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst371
			}
			goto inst365_fail
		}
	}
	goto inst365_fail
	goto unreachable
	goto inst365_fail
inst365_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 361:
			goto inst361_alt
		case 362:
			goto inst362_alt
		case 363:
			goto inst363_alt
		case 628:
			goto inst628_alt
		}
	}
	goto fail

	goto unreachable
	goto inst345
inst345: // string "1" -> 346
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst346
		}
	}
	goto inst345_fail
	goto unreachable
	goto inst345_fail
inst345_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 352:
			goto inst352_alt
		}
	}
	goto fail

	goto unreachable
	goto inst346
inst346: // rune "09" -> 347
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst347
		}
	}
	goto inst346_fail
	goto unreachable
	goto inst346_fail
inst346_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 352:
			goto inst352_alt
		}
	}
	goto fail

	goto unreachable
	goto inst342
inst342: // rune "04" -> 343
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst343
		}
	}
	goto inst342_fail
	goto unreachable
	goto inst342_fail
inst342_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 348:
			goto inst348_alt
		}
	}
	goto fail

	goto unreachable
	goto inst343
inst343: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst343_fail
	goto unreachable
	goto inst343_fail
inst343_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 348:
			goto inst348_alt
		}
	}
	goto fail

	goto unreachable
	goto inst371
inst371: // alt -> 366, 372
	{
		idx := i*406 + 123
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 371, 0})
	goto inst366
inst371_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst372
	}
	goto unreachable

	goto unreachable
	goto inst366
inst366: // rune "09AFaf" -> 370
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst370
			}
			goto inst366_fail
		}
	}
	goto inst366_fail
	goto unreachable
	goto inst366_fail
inst366_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 371:
			goto inst371_alt
		}
	}
	goto fail

	goto unreachable
	goto inst370
inst370: // alt -> 367, 372
	{
		idx := i*406 + 124
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 370, 0})
	goto inst367
inst370_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst372
	}
	goto unreachable

	goto unreachable
	goto inst367
inst367: // rune "09AFaf" -> 369
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst369
			}
			goto inst367_fail
		}
	}
	goto inst367_fail
	goto unreachable
	goto inst367_fail
inst367_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 370:
			goto inst370_alt
		}
	}
	goto fail

	goto unreachable
	goto inst369
inst369: // alt -> 368, 372
	{
		idx := i*406 + 125
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 369, 0})
	goto inst368
inst369_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst372
	}
	goto unreachable

	goto unreachable
	goto inst372
inst372: // string ":" -> 373
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst373
		}
	}
	goto inst372_fail
	goto unreachable
	goto inst372_fail
inst372_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 361:
			goto inst361_alt
		case 362:
			goto inst362_alt
		case 363:
			goto inst363_alt
		case 369:
			goto inst369_alt
		case 370:
			goto inst370_alt
		case 371:
			goto inst371_alt
		case 628:
			goto inst628_alt
		}
	}
	goto fail

	goto unreachable
	goto inst368
inst368: // rune "09AFaf" -> 372
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst372
			}
			goto inst368_fail
		}
	}
	goto inst368_fail
	goto unreachable
	goto inst368_fail
inst368_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 369:
			goto inst369_alt
		}
	}
	goto fail

	goto unreachable
	goto inst373
inst373: // rune "09AFaf" -> 379
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst379
			}
			goto inst373_fail
		}
	}
	goto inst373_fail
	goto unreachable
	goto inst373_fail
inst373_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 361:
			goto inst361_alt
		case 362:
			goto inst362_alt
		case 363:
			goto inst363_alt
		case 369:
			goto inst369_alt
		case 370:
			goto inst370_alt
		case 371:
			goto inst371_alt
		case 628:
			goto inst628_alt
		}
	}
	goto fail

	goto unreachable
	goto inst347
inst347: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst347_fail
	goto unreachable
	goto inst347_fail
inst347_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 352:
			goto inst352_alt
		}
	}
	goto fail

	goto unreachable
	goto inst375
inst375: // rune "09AFaf" -> 377
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst377
			}
			goto inst375_fail
		}
	}
	goto inst375_fail
	goto unreachable
	goto inst375_fail
inst375_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 378:
			goto inst378_alt
		}
	}
	goto fail

	goto unreachable
	goto inst377
inst377: // alt -> 376, 380
	{
		idx := i*406 + 126
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 377, 0})
	goto inst376
inst377_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst380
	}
	goto unreachable

	goto unreachable
	goto inst376
inst376: // rune "09AFaf" -> 380
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst380
			}
			goto inst376_fail
		}
	}
	goto inst376_fail
	goto unreachable
	goto inst376_fail
inst376_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 377:
			goto inst377_alt
		}
	}
	goto fail

	goto unreachable
	goto inst380
inst380: // string ":" -> 381
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst381
		}
	}
	goto inst380_fail
	goto unreachable
	goto inst380_fail
inst380_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 361:
			goto inst361_alt
		case 362:
			goto inst362_alt
		case 363:
			goto inst363_alt
		case 369:
			goto inst369_alt
		case 370:
			goto inst370_alt
		case 371:
			goto inst371_alt
		case 377:
			goto inst377_alt
		case 378:
			goto inst378_alt
		case 379:
			goto inst379_alt
		case 628:
			goto inst628_alt
		}
	}
	goto fail

	goto unreachable
	goto inst378
inst378: // alt -> 375, 380
	{
		idx := i*406 + 127
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 378, 0})
	goto inst375
inst378_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst380
	}
	goto unreachable

	goto unreachable
	goto inst379
inst379: // alt -> 374, 380
	{
		idx := i*406 + 128
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 379, 0})
	goto inst374
inst379_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst380
	}
	goto unreachable

	goto unreachable
	goto inst374
inst374: // rune "09AFaf" -> 378
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst378
			}
			goto inst374_fail
		}
	}
	goto inst374_fail
	goto unreachable
	goto inst374_fail
inst374_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 379:
			goto inst379_alt
		}
	}
	goto fail

	goto unreachable
	goto inst381
inst381: // rune "09AFaf" -> 387
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst387
			}
			goto inst381_fail
		}
	}
	goto inst381_fail
	goto unreachable
	goto inst381_fail
inst381_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 361:
			goto inst361_alt
		case 362:
			goto inst362_alt
		case 363:
			goto inst363_alt
		case 369:
			goto inst369_alt
		case 370:
			goto inst370_alt
		case 371:
			goto inst371_alt
		case 377:
			goto inst377_alt
		case 378:
			goto inst378_alt
		case 379:
			goto inst379_alt
		case 628:
			goto inst628_alt
		}
	}
	goto fail

	goto unreachable
	goto inst387
inst387: // alt -> 382, 388
	{
		idx := i*406 + 129
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 387, 0})
	goto inst382
inst387_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst388
	}
	goto unreachable

	goto unreachable
	goto inst382
inst382: // rune "09AFaf" -> 386
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst386
			}
			goto inst382_fail
		}
	}
	goto inst382_fail
	goto unreachable
	goto inst382_fail
inst382_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 387:
			goto inst387_alt
		}
	}
	goto fail

	goto unreachable
	goto inst386
inst386: // alt -> 383, 388
	{
		idx := i*406 + 130
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 386, 0})
	goto inst383
inst386_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst388
	}
	goto unreachable

	goto unreachable
	goto inst383
inst383: // rune "09AFaf" -> 385
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst385
			}
			goto inst383_fail
		}
	}
	goto inst383_fail
	goto unreachable
	goto inst383_fail
inst383_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 386:
			goto inst386_alt
		}
	}
	goto fail

	goto unreachable
	goto inst385
inst385: // alt -> 384, 388
	{
		idx := i*406 + 131
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 385, 0})
	goto inst384
inst385_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst388
	}
	goto unreachable

	goto unreachable
	goto inst388
inst388: // string ":" -> 486
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst486
		}
	}
	goto inst388_fail
	goto unreachable
	goto inst388_fail
inst388_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 361:
			goto inst361_alt
		case 362:
			goto inst362_alt
		case 363:
			goto inst363_alt
		case 369:
			goto inst369_alt
		case 370:
			goto inst370_alt
		case 371:
			goto inst371_alt
		case 377:
			goto inst377_alt
		case 378:
			goto inst378_alt
		case 379:
			goto inst379_alt
		case 385:
			goto inst385_alt
		case 386:
			goto inst386_alt
		case 387:
			goto inst387_alt
		case 628:
			goto inst628_alt
		}
	}
	goto fail

	goto unreachable
	goto inst384
inst384: // rune "09AFaf" -> 388
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst388
			}
			goto inst384_fail
		}
	}
	goto inst384_fail
	goto unreachable
	goto inst384_fail
inst384_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 385:
			goto inst385_alt
		}
	}
	goto fail

	goto unreachable
	goto inst392
inst392: // rune "09AFaf" -> 394
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst394
			}
			goto inst392_fail
		}
	}
	goto inst392_fail
	goto unreachable
	goto inst392_fail
inst392_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 395:
			goto inst395_alt
		}
	}
	goto fail

	goto unreachable
	goto inst394
inst394: // alt -> 393, 414
	{
		idx := i*406 + 132
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 394, 0})
	goto inst393
inst394_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst414
	}
	goto unreachable

	goto unreachable
	goto inst395
inst395: // alt -> 392, 414
	{
		idx := i*406 + 133
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 395, 0})
	goto inst392
inst395_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst414
	}
	goto unreachable

	goto unreachable
	goto inst391
inst391: // rune "09AFaf" -> 395
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst395
			}
			goto inst391_fail
		}
	}
	goto inst391_fail
	goto unreachable
	goto inst391_fail
inst391_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 396:
			goto inst396_alt
		}
	}
	goto fail

	goto unreachable
	goto inst393
inst393: // rune "09AFaf" -> 414
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst414
			}
			goto inst393_fail
		}
	}
	goto inst393_fail
	goto unreachable
	goto inst393_fail
inst393_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 394:
			goto inst394_alt
		}
	}
	goto fail

	goto unreachable
	goto inst414
inst414: // alt -> 397, 1116
	{
		idx := i*406 + 134
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 414, 0})
	goto inst397
inst414_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst396
inst396: // alt -> 391, 414
	{
		idx := i*406 + 135
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 396, 0})
	goto inst391
inst396_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst414
	}
	goto unreachable

	goto unreachable
	goto inst397
inst397: // string ":" -> 398
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst398
		}
	}
	goto inst397_fail
	goto unreachable
	goto inst397_fail
inst397_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 414:
			goto inst414_alt
		}
	}
	goto fail

	goto unreachable
	goto inst390
inst390: // rune "09AFaf" -> 396
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst396
			}
			goto inst390_fail
		}
	}
	goto inst390_fail
	goto unreachable
	goto inst390_fail
inst390_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 484:
			goto inst484_alt
		}
	}
	goto fail

	goto unreachable
	goto inst398
inst398: // rune "09AFaf" -> 404
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst404
			}
			goto inst398_fail
		}
	}
	goto inst398_fail
	goto unreachable
	goto inst398_fail
inst398_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 414:
			goto inst414_alt
		}
	}
	goto fail

	goto unreachable
	goto inst404
inst404: // alt -> 399, 413
	{
		idx := i*406 + 136
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 404, 0})
	goto inst399
inst404_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst413
	}
	goto unreachable

	goto unreachable
	goto inst399
inst399: // rune "09AFaf" -> 403
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst403
			}
			goto inst399_fail
		}
	}
	goto inst399_fail
	goto unreachable
	goto inst399_fail
inst399_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 404:
			goto inst404_alt
		}
	}
	goto fail

	goto unreachable
	goto inst403
inst403: // alt -> 400, 413
	{
		idx := i*406 + 137
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 403, 0})
	goto inst400
inst403_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst413
	}
	goto unreachable

	goto unreachable
	goto inst400
inst400: // rune "09AFaf" -> 402
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst402
			}
			goto inst400_fail
		}
	}
	goto inst400_fail
	goto unreachable
	goto inst400_fail
inst400_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 403:
			goto inst403_alt
		}
	}
	goto fail

	goto unreachable
	goto inst402
inst402: // alt -> 401, 413
	{
		idx := i*406 + 138
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 402, 0})
	goto inst401
inst402_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst413
	}
	goto unreachable

	goto unreachable
	goto inst413
inst413: // alt -> 405, 1116
	{
		idx := i*406 + 139
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 413, 0})
	goto inst405
inst413_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst401
inst401: // rune "09AFaf" -> 413
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst413
			}
			goto inst401_fail
		}
	}
	goto inst401_fail
	goto unreachable
	goto inst401_fail
inst401_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 402:
			goto inst402_alt
		}
	}
	goto fail

	goto unreachable
	goto inst405
inst405: // string ":" -> 406
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst406
		}
	}
	goto inst405_fail
	goto unreachable
	goto inst405_fail
inst405_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 413:
			goto inst413_alt
		}
	}
	goto fail

	goto unreachable
	goto inst406
inst406: // rune "09AFaf" -> 412
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst412
			}
			goto inst406_fail
		}
	}
	goto inst406_fail
	goto unreachable
	goto inst406_fail
inst406_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 413:
			goto inst413_alt
		}
	}
	goto fail

	goto unreachable
	goto inst389
inst389: // string ":" -> 390
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst390
		}
	}
	goto inst389_fail
	goto unreachable
	goto inst389_fail
inst389_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 484:
			goto inst484_alt
		}
	}
	goto fail

	goto unreachable
	goto inst113
inst113: // alt -> 110, 1116
	{
		idx := i*406 + 140
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 113, 0})
	goto inst110
inst113_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst110
inst110: // rune "09AFaf" -> 112
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst112
			}
			goto inst110_fail
		}
	}
	goto inst110_fail
	goto unreachable
	goto inst110_fail
inst110_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 113:
			goto inst113_alt
		}
	}
	goto fail

	goto unreachable
	goto inst415
inst415: // string ":" -> 416
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst416
		}
	}
	goto inst415_fail
	goto unreachable
	goto inst415_fail
inst415_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 423:
			goto inst423_alt
		}
	}
	goto fail

	goto unreachable
	goto inst416
inst416: // rune "09AFaf" -> 422
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst422
			}
			goto inst416_fail
		}
	}
	goto inst416_fail
	goto unreachable
	goto inst416_fail
inst416_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 423:
			goto inst423_alt
		}
	}
	goto fail

	goto unreachable
	goto inst422
inst422: // alt -> 417, 424
	{
		idx := i*406 + 141
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 422, 0})
	goto inst417
inst422_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst424
	}
	goto unreachable

	goto unreachable
	goto inst412
inst412: // alt -> 407, 1116
	{
		idx := i*406 + 142
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 412, 0})
	goto inst407
inst412_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst407
inst407: // rune "09AFaf" -> 411
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst411
			}
			goto inst407_fail
		}
	}
	goto inst407_fail
	goto unreachable
	goto inst407_fail
inst407_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 412:
			goto inst412_alt
		}
	}
	goto fail

	goto unreachable
	goto inst417
inst417: // rune "09AFaf" -> 421
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst421
			}
			goto inst417_fail
		}
	}
	goto inst417_fail
	goto unreachable
	goto inst417_fail
inst417_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 422:
			goto inst422_alt
		}
	}
	goto fail

	goto unreachable
	goto inst421
inst421: // alt -> 418, 424
	{
		idx := i*406 + 143
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 421, 0})
	goto inst418
inst421_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst424
	}
	goto unreachable

	goto unreachable
	goto inst418
inst418: // rune "09AFaf" -> 420
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst420
			}
			goto inst418_fail
		}
	}
	goto inst418_fail
	goto unreachable
	goto inst418_fail
inst418_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 421:
			goto inst421_alt
		}
	}
	goto fail

	goto unreachable
	goto inst420
inst420: // alt -> 419, 424
	{
		idx := i*406 + 144
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 420, 0})
	goto inst419
inst420_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst424
	}
	goto unreachable

	goto unreachable
	goto inst424
inst424: // string ":" -> 438
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst438
		}
	}
	goto inst424_fail
	goto unreachable
	goto inst424_fail
inst424_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 420:
			goto inst420_alt
		case 421:
			goto inst421_alt
		case 422:
			goto inst422_alt
		case 423:
			goto inst423_alt
		case 486:
			goto inst486_alt
		}
	}
	goto fail

	goto unreachable
	goto inst419
inst419: // rune "09AFaf" -> 424
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst424
			}
			goto inst419_fail
		}
	}
	goto inst419_fail
	goto unreachable
	goto inst419_fail
inst419_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 420:
			goto inst420_alt
		}
	}
	goto fail

	goto unreachable
	goto inst423
inst423: // alt -> 415, 424
	{
		idx := i*406 + 145
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 423, 0})
	goto inst415
inst423_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst424
	}
	goto unreachable

	goto unreachable
	goto inst484
inst484: // alt -> 389, 423
	{
		idx := i*406 + 146
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 484, 0})
	goto inst389
inst484_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst423
	}
	goto unreachable

	goto unreachable
	goto inst486
inst486: // alt -> 484, 485
	{
		idx := i*406 + 147
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 486, 0})
	goto inst484
inst486_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst485
	}
	goto unreachable

	goto unreachable
	goto inst438
inst438: // alt -> 434, 436
	{
		idx := i*406 + 148
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 438, 0})
	goto inst434
inst438_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst436
	}
	goto unreachable

	goto unreachable
	goto inst434
inst434: // alt -> 425, 431
	{
		idx := i*406 + 149
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 434, 0})
	goto inst425
inst434_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst431
	}
	goto unreachable

	goto unreachable
	goto inst431
inst431: // string "1" -> 432
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst432
		}
	}
	goto inst431_fail
	goto unreachable
	goto inst431_fail
inst431_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 438:
			goto inst438_alt
		}
	}
	goto fail

	goto unreachable
	goto inst425
inst425: // string "2" -> 430
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst430
		}
	}
	goto inst425_fail
	goto unreachable
	goto inst425_fail
inst425_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 434:
			goto inst434_alt
		}
	}
	goto fail

	goto unreachable
	goto inst436
inst436: // alt -> 435, 437
	{
		idx := i*406 + 150
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 436, 0})
	goto inst435
inst436_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst437
	}
	goto unreachable

	goto unreachable
	goto inst435
inst435: // rune "19" -> 437
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst437
		}
	}
	goto inst435_fail
	goto unreachable
	goto inst435_fail
inst435_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 436:
			goto inst436_alt
		}
	}
	goto fail

	goto unreachable
	goto inst437
inst437: // rune "09" -> 439
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst439
		}
	}
	goto inst437_fail
	goto unreachable
	goto inst437_fail
inst437_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 420:
			goto inst420_alt
		case 421:
			goto inst421_alt
		case 422:
			goto inst422_alt
		case 423:
			goto inst423_alt
		case 436:
			goto inst436_alt
		case 486:
			goto inst486_alt
		}
	}
	goto fail

	goto unreachable
	goto inst432
inst432: // rune "09" -> 433
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst433
		}
	}
	goto inst432_fail
	goto unreachable
	goto inst432_fail
inst432_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 438:
			goto inst438_alt
		}
	}
	goto fail

	goto unreachable
	goto inst433
inst433: // rune "09" -> 439
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst439
		}
	}
	goto inst433_fail
	goto unreachable
	goto inst433_fail
inst433_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 438:
			goto inst438_alt
		}
	}
	goto fail

	goto unreachable
	goto inst430
inst430: // alt -> 426, 428
	{
		idx := i*406 + 151
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 430, 0})
	goto inst426
inst430_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst428
	}
	goto unreachable

	goto unreachable
	goto inst426
inst426: // string "5" -> 427
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst427
		}
	}
	goto inst426_fail
	goto unreachable
	goto inst426_fail
inst426_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 430:
			goto inst430_alt
		}
	}
	goto fail

	goto unreachable
	goto inst427
inst427: // rune "05" -> 439
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst439
		}
	}
	goto inst427_fail
	goto unreachable
	goto inst427_fail
inst427_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 430:
			goto inst430_alt
		}
	}
	goto fail

	goto unreachable
	goto inst439
inst439: // string "." -> 453
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst453
		}
	}
	goto inst439_fail
	goto unreachable
	goto inst439_fail
inst439_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 420:
			goto inst420_alt
		case 421:
			goto inst421_alt
		case 422:
			goto inst422_alt
		case 423:
			goto inst423_alt
		case 430:
			goto inst430_alt
		case 434:
			goto inst434_alt
		case 436:
			goto inst436_alt
		case 438:
			goto inst438_alt
		case 486:
			goto inst486_alt
		}
	}
	goto fail

	goto unreachable
	goto inst429
inst429: // rune "09" -> 439
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst439
		}
	}
	goto inst429_fail
	goto unreachable
	goto inst429_fail
inst429_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 434:
			goto inst434_alt
		}
	}
	goto fail

	goto unreachable
	goto inst428
inst428: // rune "04" -> 429
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst429
		}
	}
	goto inst428_fail
	goto unreachable
	goto inst428_fail
inst428_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 434:
			goto inst434_alt
		}
	}
	goto fail

	goto unreachable
	goto inst446
inst446: // string "1" -> 447
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst447
		}
	}
	goto inst446_fail
	goto unreachable
	goto inst446_fail
inst446_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 453:
			goto inst453_alt
		}
	}
	goto fail

	goto unreachable
	goto inst447
inst447: // rune "09" -> 448
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst448
		}
	}
	goto inst447_fail
	goto unreachable
	goto inst447_fail
inst447_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 453:
			goto inst453_alt
		}
	}
	goto fail

	goto unreachable
	goto inst449
inst449: // alt -> 440, 446
	{
		idx := i*406 + 152
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 449, 0})
	goto inst440
inst449_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst446
	}
	goto unreachable

	goto unreachable
	goto inst453
inst453: // alt -> 449, 451
	{
		idx := i*406 + 153
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 453, 0})
	goto inst449
inst453_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst451
	}
	goto unreachable

	goto unreachable
	goto inst448
inst448: // rune "09" -> 454
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst454
		}
	}
	goto inst448_fail
	goto unreachable
	goto inst448_fail
inst448_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 453:
			goto inst453_alt
		}
	}
	goto fail

	goto unreachable
	goto inst440
inst440: // string "2" -> 445
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst445
		}
	}
	goto inst440_fail
	goto unreachable
	goto inst440_fail
inst440_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 449:
			goto inst449_alt
		}
	}
	goto fail

	goto unreachable
	goto inst445
inst445: // alt -> 441, 443
	{
		idx := i*406 + 154
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 445, 0})
	goto inst441
inst445_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst443
	}
	goto unreachable

	goto unreachable
	goto inst441
inst441: // string "5" -> 442
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst442
		}
	}
	goto inst441_fail
	goto unreachable
	goto inst441_fail
inst441_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 445:
			goto inst445_alt
		}
	}
	goto fail

	goto unreachable
	goto inst442
inst442: // rune "05" -> 454
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst454
		}
	}
	goto inst442_fail
	goto unreachable
	goto inst442_fail
inst442_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 445:
			goto inst445_alt
		}
	}
	goto fail

	goto unreachable
	goto inst454
inst454: // string "." -> 468
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst468
		}
	}
	goto inst454_fail
	goto unreachable
	goto inst454_fail
inst454_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 420:
			goto inst420_alt
		case 421:
			goto inst421_alt
		case 422:
			goto inst422_alt
		case 423:
			goto inst423_alt
		case 430:
			goto inst430_alt
		case 434:
			goto inst434_alt
		case 436:
			goto inst436_alt
		case 438:
			goto inst438_alt
		case 445:
			goto inst445_alt
		case 449:
			goto inst449_alt
		case 451:
			goto inst451_alt
		case 453:
			goto inst453_alt
		case 486:
			goto inst486_alt
		}
	}
	goto fail

	goto unreachable
	goto inst452
inst452: // rune "09" -> 454
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst454
		}
	}
	goto inst452_fail
	goto unreachable
	goto inst452_fail
inst452_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 420:
			goto inst420_alt
		case 421:
			goto inst421_alt
		case 422:
			goto inst422_alt
		case 423:
			goto inst423_alt
		case 430:
			goto inst430_alt
		case 434:
			goto inst434_alt
		case 436:
			goto inst436_alt
		case 438:
			goto inst438_alt
		case 451:
			goto inst451_alt
		case 486:
			goto inst486_alt
		}
	}
	goto fail

	goto unreachable
	goto inst451
inst451: // alt -> 450, 452
	{
		idx := i*406 + 155
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 451, 0})
	goto inst450
inst451_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst452
	}
	goto unreachable

	goto unreachable
	goto inst450
inst450: // rune "19" -> 452
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst452
		}
	}
	goto inst450_fail
	goto unreachable
	goto inst450_fail
inst450_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 451:
			goto inst451_alt
		}
	}
	goto fail

	goto unreachable
	goto inst443
inst443: // rune "04" -> 444
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst444
		}
	}
	goto inst443_fail
	goto unreachable
	goto inst443_fail
inst443_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 449:
			goto inst449_alt
		}
	}
	goto fail

	goto unreachable
	goto inst444
inst444: // rune "09" -> 454
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst454
		}
	}
	goto inst444_fail
	goto unreachable
	goto inst444_fail
inst444_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 449:
			goto inst449_alt
		}
	}
	goto fail

	goto unreachable
	goto inst289
inst289: // alt -> 288, 1116
	{
		idx := i*406 + 156
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 289, 0})
	goto inst288
inst289_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst288
inst288: // rune "09AFaf" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1116
			}
			goto inst288_fail
		}
	}
	goto inst288_fail
	goto unreachable
	goto inst288_fail
inst288_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 289:
			goto inst289_alt
		}
	}
	goto fail

	goto unreachable
	goto inst468
inst468: // alt -> 464, 466
	{
		idx := i*406 + 157
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 468, 0})
	goto inst464
inst468_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst466
	}
	goto unreachable

	goto unreachable
	goto inst464
inst464: // alt -> 455, 461
	{
		idx := i*406 + 158
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 464, 0})
	goto inst455
inst464_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst461
	}
	goto unreachable

	goto unreachable
	goto inst455
inst455: // string "2" -> 460
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst460
		}
	}
	goto inst455_fail
	goto unreachable
	goto inst455_fail
inst455_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 464:
			goto inst464_alt
		}
	}
	goto fail

	goto unreachable
	goto inst460
inst460: // alt -> 456, 458
	{
		idx := i*406 + 159
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 460, 0})
	goto inst456
inst460_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst458
	}
	goto unreachable

	goto unreachable
	goto inst458
inst458: // rune "04" -> 459
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst459
		}
	}
	goto inst458_fail
	goto unreachable
	goto inst458_fail
inst458_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 464:
			goto inst464_alt
		}
	}
	goto fail

	goto unreachable
	goto inst456
inst456: // string "5" -> 457
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst457
		}
	}
	goto inst456_fail
	goto unreachable
	goto inst456_fail
inst456_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 460:
			goto inst460_alt
		}
	}
	goto fail

	goto unreachable
	goto inst466
inst466: // alt -> 465, 467
	{
		idx := i*406 + 160
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 466, 0})
	goto inst465
inst466_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst467
	}
	goto unreachable

	goto unreachable
	goto inst465
inst465: // rune "19" -> 467
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst467
		}
	}
	goto inst465_fail
	goto unreachable
	goto inst465_fail
inst465_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 466:
			goto inst466_alt
		}
	}
	goto fail

	goto unreachable
	goto inst467
inst467: // rune "09" -> 469
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst469
		}
	}
	goto inst467_fail
	goto unreachable
	goto inst467_fail
inst467_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 420:
			goto inst420_alt
		case 421:
			goto inst421_alt
		case 422:
			goto inst422_alt
		case 423:
			goto inst423_alt
		case 430:
			goto inst430_alt
		case 434:
			goto inst434_alt
		case 436:
			goto inst436_alt
		case 438:
			goto inst438_alt
		case 445:
			goto inst445_alt
		case 449:
			goto inst449_alt
		case 451:
			goto inst451_alt
		case 453:
			goto inst453_alt
		case 466:
			goto inst466_alt
		case 486:
			goto inst486_alt
		}
	}
	goto fail

	goto unreachable
	goto inst457
inst457: // rune "05" -> 469
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst469
		}
	}
	goto inst457_fail
	goto unreachable
	goto inst457_fail
inst457_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 460:
			goto inst460_alt
		}
	}
	goto fail

	goto unreachable
	goto inst459
inst459: // rune "09" -> 469
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst469
		}
	}
	goto inst459_fail
	goto unreachable
	goto inst459_fail
inst459_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 464:
			goto inst464_alt
		}
	}
	goto fail

	goto unreachable
	goto inst469
inst469: // string "." -> 483
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst483
		}
	}
	goto inst469_fail
	goto unreachable
	goto inst469_fail
inst469_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 420:
			goto inst420_alt
		case 421:
			goto inst421_alt
		case 422:
			goto inst422_alt
		case 423:
			goto inst423_alt
		case 430:
			goto inst430_alt
		case 434:
			goto inst434_alt
		case 436:
			goto inst436_alt
		case 438:
			goto inst438_alt
		case 445:
			goto inst445_alt
		case 449:
			goto inst449_alt
		case 451:
			goto inst451_alt
		case 453:
			goto inst453_alt
		case 460:
			goto inst460_alt
		case 464:
			goto inst464_alt
		case 466:
			goto inst466_alt
		case 468:
			goto inst468_alt
		case 486:
			goto inst486_alt
		}
	}
	goto fail

	goto unreachable
	goto inst461
inst461: // string "1" -> 462
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst462
		}
	}
	goto inst461_fail
	goto unreachable
	goto inst461_fail
inst461_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 468:
			goto inst468_alt
		}
	}
	goto fail

	goto unreachable
	goto inst462
inst462: // rune "09" -> 463
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst463
		}
	}
	goto inst462_fail
	goto unreachable
	goto inst462_fail
inst462_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 468:
			goto inst468_alt
		}
	}
	goto fail

	goto unreachable
	goto inst463
inst463: // rune "09" -> 469
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst469
		}
	}
	goto inst463_fail
	goto unreachable
	goto inst463_fail
inst463_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 468:
			goto inst468_alt
		}
	}
	goto fail

	goto unreachable
	goto inst485
inst485: // string ":" -> 1116
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1116
		}
	}
	goto inst485_fail
	goto unreachable
	goto inst485_fail
inst485_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 361:
			goto inst361_alt
		case 362:
			goto inst362_alt
		case 363:
			goto inst363_alt
		case 369:
			goto inst369_alt
		case 370:
			goto inst370_alt
		case 371:
			goto inst371_alt
		case 377:
			goto inst377_alt
		case 378:
			goto inst378_alt
		case 379:
			goto inst379_alt
		case 385:
			goto inst385_alt
		case 386:
			goto inst386_alt
		case 387:
			goto inst387_alt
		case 628:
			goto inst628_alt
		}
	}
	goto fail

	goto unreachable
	goto inst483
inst483: // alt -> 479, 481
	{
		idx := i*406 + 161
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 483, 0})
	goto inst479
inst483_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst481
	}
	goto unreachable

	goto unreachable
	goto inst481
inst481: // alt -> 480, 482
	{
		idx := i*406 + 162
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 481, 0})
	goto inst480
inst481_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst482
	}
	goto unreachable

	goto unreachable
	goto inst480
inst480: // rune "19" -> 482
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst482
		}
	}
	goto inst480_fail
	goto unreachable
	goto inst480_fail
inst480_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 481:
			goto inst481_alt
		}
	}
	goto fail

	goto unreachable
	goto inst482
inst482: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst482_fail
	goto unreachable
	goto inst482_fail
inst482_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 420:
			goto inst420_alt
		case 421:
			goto inst421_alt
		case 422:
			goto inst422_alt
		case 423:
			goto inst423_alt
		case 430:
			goto inst430_alt
		case 434:
			goto inst434_alt
		case 436:
			goto inst436_alt
		case 438:
			goto inst438_alt
		case 445:
			goto inst445_alt
		case 449:
			goto inst449_alt
		case 451:
			goto inst451_alt
		case 453:
			goto inst453_alt
		case 460:
			goto inst460_alt
		case 464:
			goto inst464_alt
		case 466:
			goto inst466_alt
		case 468:
			goto inst468_alt
		case 481:
			goto inst481_alt
		case 486:
			goto inst486_alt
		}
	}
	goto fail

	goto unreachable
	goto inst479
inst479: // alt -> 470, 476
	{
		idx := i*406 + 163
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 479, 0})
	goto inst470
inst479_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst476
	}
	goto unreachable

	goto unreachable
	goto inst470
inst470: // string "2" -> 475
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst475
		}
	}
	goto inst470_fail
	goto unreachable
	goto inst470_fail
inst470_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 479:
			goto inst479_alt
		}
	}
	goto fail

	goto unreachable
	goto inst476
inst476: // string "1" -> 477
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst477
		}
	}
	goto inst476_fail
	goto unreachable
	goto inst476_fail
inst476_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 483:
			goto inst483_alt
		}
	}
	goto fail

	goto unreachable
	goto inst477
inst477: // rune "09" -> 478
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst478
		}
	}
	goto inst477_fail
	goto unreachable
	goto inst477_fail
inst477_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 483:
			goto inst483_alt
		}
	}
	goto fail

	goto unreachable
	goto inst475
inst475: // alt -> 471, 473
	{
		idx := i*406 + 164
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 475, 0})
	goto inst471
inst475_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst473
	}
	goto unreachable

	goto unreachable
	goto inst471
inst471: // string "5" -> 472
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst472
		}
	}
	goto inst471_fail
	goto unreachable
	goto inst471_fail
inst471_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 475:
			goto inst475_alt
		}
	}
	goto fail

	goto unreachable
	goto inst628
inst628: // alt -> 487, 488
	{
		idx := i*406 + 165
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 628, 0})
	goto inst487
inst628_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst488
	}
	goto unreachable

	goto unreachable
	goto inst488
inst488: // rune "09AFaf" -> 494
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst494
			}
			goto inst488_fail
		}
	}
	goto inst488_fail
	goto unreachable
	goto inst488_fail
inst488_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 779:
			goto inst779_alt
		}
	}
	goto fail

	goto unreachable
	goto inst472
inst472: // rune "05" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1116
		}
	}
	goto inst472_fail
	goto unreachable
	goto inst472_fail
inst472_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 475:
			goto inst475_alt
		}
	}
	goto fail

	goto unreachable
	goto inst473
inst473: // rune "04" -> 474
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst474
		}
	}
	goto inst473_fail
	goto unreachable
	goto inst473_fail
inst473_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 479:
			goto inst479_alt
		}
	}
	goto fail

	goto unreachable
	goto inst474
inst474: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst474_fail
	goto unreachable
	goto inst474_fail
inst474_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 479:
			goto inst479_alt
		}
	}
	goto fail

	goto unreachable
	goto inst478
inst478: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst478_fail
	goto unreachable
	goto inst478_fail
inst478_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 483:
			goto inst483_alt
		}
	}
	goto fail

	goto unreachable
	goto inst494
inst494: // alt -> 489, 495
	{
		idx := i*406 + 166
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 494, 0})
	goto inst489
inst494_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst495
	}
	goto unreachable

	goto unreachable
	goto inst489
inst489: // rune "09AFaf" -> 493
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst493
			}
			goto inst489_fail
		}
	}
	goto inst489_fail
	goto unreachable
	goto inst489_fail
inst489_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 494:
			goto inst494_alt
		}
	}
	goto fail

	goto unreachable
	goto inst491
inst491: // rune "09AFaf" -> 495
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst495
			}
			goto inst491_fail
		}
	}
	goto inst491_fail
	goto unreachable
	goto inst491_fail
inst491_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 492:
			goto inst492_alt
		}
	}
	goto fail

	goto unreachable
	goto inst492
inst492: // alt -> 491, 495
	{
		idx := i*406 + 167
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 492, 0})
	goto inst491
inst492_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst495
	}
	goto unreachable

	goto unreachable
	goto inst495
inst495: // string ":" -> 496
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst496
		}
	}
	goto inst495_fail
	goto unreachable
	goto inst495_fail
inst495_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 492:
			goto inst492_alt
		case 493:
			goto inst493_alt
		case 494:
			goto inst494_alt
		case 779:
			goto inst779_alt
		}
	}
	goto fail

	goto unreachable
	goto inst493
inst493: // alt -> 490, 495
	{
		idx := i*406 + 168
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 493, 0})
	goto inst490
inst493_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst495
	}
	goto unreachable

	goto unreachable
	goto inst490
inst490: // rune "09AFaf" -> 492
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst492
			}
			goto inst490_fail
		}
	}
	goto inst490_fail
	goto unreachable
	goto inst490_fail
inst490_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 493:
			goto inst493_alt
		}
	}
	goto fail

	goto unreachable
	goto inst496
inst496: // rune "09AFaf" -> 502
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst502
			}
			goto inst496_fail
		}
	}
	goto inst496_fail
	goto unreachable
	goto inst496_fail
inst496_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 492:
			goto inst492_alt
		case 493:
			goto inst493_alt
		case 494:
			goto inst494_alt
		case 779:
			goto inst779_alt
		}
	}
	goto fail

	goto unreachable
	goto inst502
inst502: // alt -> 497, 503
	{
		idx := i*406 + 169
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 502, 0})
	goto inst497
inst502_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst503
	}
	goto unreachable

	goto unreachable
	goto inst497
inst497: // rune "09AFaf" -> 501
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst501
			}
			goto inst497_fail
		}
	}
	goto inst497_fail
	goto unreachable
	goto inst497_fail
inst497_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 502:
			goto inst502_alt
		}
	}
	goto fail

	goto unreachable
	goto inst501
inst501: // alt -> 498, 503
	{
		idx := i*406 + 170
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 501, 0})
	goto inst498
inst501_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst503
	}
	goto unreachable

	goto unreachable
	goto inst503
inst503: // string ":" -> 504
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst504
		}
	}
	goto inst503_fail
	goto unreachable
	goto inst503_fail
inst503_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 492:
			goto inst492_alt
		case 493:
			goto inst493_alt
		case 494:
			goto inst494_alt
		case 500:
			goto inst500_alt
		case 501:
			goto inst501_alt
		case 502:
			goto inst502_alt
		case 779:
			goto inst779_alt
		}
	}
	goto fail

	goto unreachable
	goto inst499
inst499: // rune "09AFaf" -> 503
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst503
			}
			goto inst499_fail
		}
	}
	goto inst499_fail
	goto unreachable
	goto inst499_fail
inst499_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 500:
			goto inst500_alt
		}
	}
	goto fail

	goto unreachable
	goto inst500
inst500: // alt -> 499, 503
	{
		idx := i*406 + 171
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 500, 0})
	goto inst499
inst500_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst503
	}
	goto unreachable

	goto unreachable
	goto inst498
inst498: // rune "09AFaf" -> 500
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst500
			}
			goto inst498_fail
		}
	}
	goto inst498_fail
	goto unreachable
	goto inst498_fail
inst498_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 501:
			goto inst501_alt
		}
	}
	goto fail

	goto unreachable
	goto inst504
inst504: // rune "09AFaf" -> 510
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst510
			}
			goto inst504_fail
		}
	}
	goto inst504_fail
	goto unreachable
	goto inst504_fail
inst504_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 492:
			goto inst492_alt
		case 493:
			goto inst493_alt
		case 494:
			goto inst494_alt
		case 500:
			goto inst500_alt
		case 501:
			goto inst501_alt
		case 502:
			goto inst502_alt
		case 779:
			goto inst779_alt
		}
	}
	goto fail

	goto unreachable
	goto inst506
inst506: // rune "09AFaf" -> 508
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst508
			}
			goto inst506_fail
		}
	}
	goto inst506_fail
	goto unreachable
	goto inst506_fail
inst506_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 509:
			goto inst509_alt
		}
	}
	goto fail

	goto unreachable
	goto inst508
inst508: // alt -> 507, 511
	{
		idx := i*406 + 172
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 508, 0})
	goto inst507
inst508_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst511
	}
	goto unreachable

	goto unreachable
	goto inst779
inst779: // alt -> 628, 629
	{
		idx := i*406 + 173
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 779, 0})
	goto inst628
inst779_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst629
	}
	goto unreachable

	goto unreachable
	goto inst507
inst507: // rune "09AFaf" -> 511
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst511
			}
			goto inst507_fail
		}
	}
	goto inst507_fail
	goto unreachable
	goto inst507_fail
inst507_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 508:
			goto inst508_alt
		}
	}
	goto fail

	goto unreachable
	goto inst511
inst511: // string ":" -> 627
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst627
		}
	}
	goto inst511_fail
	goto unreachable
	goto inst511_fail
inst511_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 492:
			goto inst492_alt
		case 493:
			goto inst493_alt
		case 494:
			goto inst494_alt
		case 500:
			goto inst500_alt
		case 501:
			goto inst501_alt
		case 502:
			goto inst502_alt
		case 508:
			goto inst508_alt
		case 509:
			goto inst509_alt
		case 510:
			goto inst510_alt
		case 779:
			goto inst779_alt
		}
	}
	goto fail

	goto unreachable
	goto inst510
inst510: // alt -> 505, 511
	{
		idx := i*406 + 174
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 510, 0})
	goto inst505
inst510_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst511
	}
	goto unreachable

	goto unreachable
	goto inst509
inst509: // alt -> 506, 511
	{
		idx := i*406 + 175
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 509, 0})
	goto inst506
inst509_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst511
	}
	goto unreachable

	goto unreachable
	goto inst505
inst505: // rune "09AFaf" -> 509
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst509
			}
			goto inst505_fail
		}
	}
	goto inst505_fail
	goto unreachable
	goto inst505_fail
inst505_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 510:
			goto inst510_alt
		}
	}
	goto fail

	goto unreachable
	goto inst629
inst629: // rune "09AFaf" -> 635
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst635
			}
			goto inst629_fail
		}
	}
	goto inst629_fail
	goto unreachable
	goto inst629_fail
inst629_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 940:
			goto inst940_alt
		}
	}
	goto fail

	goto unreachable
	goto inst514
inst514: // rune "09AFaf" -> 518
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst518
			}
			goto inst514_fail
		}
	}
	goto inst514_fail
	goto unreachable
	goto inst514_fail
inst514_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 519:
			goto inst519_alt
		}
	}
	goto fail

	goto unreachable
	goto inst519
inst519: // alt -> 514, 546
	{
		idx := i*406 + 176
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 519, 0})
	goto inst514
inst519_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst546
	}
	goto unreachable

	goto unreachable
	goto inst518
inst518: // alt -> 515, 546
	{
		idx := i*406 + 177
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 518, 0})
	goto inst515
inst518_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst546
	}
	goto unreachable

	goto unreachable
	goto inst515
inst515: // rune "09AFaf" -> 517
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst517
			}
			goto inst515_fail
		}
	}
	goto inst515_fail
	goto unreachable
	goto inst515_fail
inst515_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 518:
			goto inst518_alt
		}
	}
	goto fail

	goto unreachable
	goto inst517
inst517: // alt -> 516, 546
	{
		idx := i*406 + 178
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 517, 0})
	goto inst516
inst517_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst546
	}
	goto unreachable

	goto unreachable
	goto inst546
inst546: // alt -> 520, 1116
	{
		idx := i*406 + 179
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 546, 0})
	goto inst520
inst546_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst516
inst516: // rune "09AFaf" -> 546
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst546
			}
			goto inst516_fail
		}
	}
	goto inst516_fail
	goto unreachable
	goto inst516_fail
inst516_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 517:
			goto inst517_alt
		}
	}
	goto fail

	goto unreachable
	goto inst520
inst520: // string ":" -> 521
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst521
		}
	}
	goto inst520_fail
	goto unreachable
	goto inst520_fail
inst520_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 546:
			goto inst546_alt
		}
	}
	goto fail

	goto unreachable
	goto inst521
inst521: // rune "09AFaf" -> 527
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst527
			}
			goto inst521_fail
		}
	}
	goto inst521_fail
	goto unreachable
	goto inst521_fail
inst521_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 546:
			goto inst546_alt
		}
	}
	goto fail

	goto unreachable
	goto inst513
inst513: // rune "09AFaf" -> 519
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst519
			}
			goto inst513_fail
		}
	}
	goto inst513_fail
	goto unreachable
	goto inst513_fail
inst513_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 625:
			goto inst625_alt
		}
	}
	goto fail

	goto unreachable
	goto inst512
inst512: // string ":" -> 513
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst513
		}
	}
	goto inst512_fail
	goto unreachable
	goto inst512_fail
inst512_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 625:
			goto inst625_alt
		}
	}
	goto fail

	goto unreachable
	goto inst527
inst527: // alt -> 522, 545
	{
		idx := i*406 + 180
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 527, 0})
	goto inst522
inst527_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst545
	}
	goto unreachable

	goto unreachable
	goto inst522
inst522: // rune "09AFaf" -> 526
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst526
			}
			goto inst522_fail
		}
	}
	goto inst522_fail
	goto unreachable
	goto inst522_fail
inst522_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 527:
			goto inst527_alt
		}
	}
	goto fail

	goto unreachable
	goto inst529
inst529: // rune "09AFaf" -> 535
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst535
			}
			goto inst529_fail
		}
	}
	goto inst529_fail
	goto unreachable
	goto inst529_fail
inst529_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 545:
			goto inst545_alt
		}
	}
	goto fail

	goto unreachable
	goto inst535
inst535: // alt -> 530, 544
	{
		idx := i*406 + 181
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 535, 0})
	goto inst530
inst535_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst544
	}
	goto unreachable

	goto unreachable
	goto inst530
inst530: // rune "09AFaf" -> 534
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst534
			}
			goto inst530_fail
		}
	}
	goto inst530_fail
	goto unreachable
	goto inst530_fail
inst530_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 535:
			goto inst535_alt
		}
	}
	goto fail

	goto unreachable
	goto inst534
inst534: // alt -> 531, 544
	{
		idx := i*406 + 182
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 534, 0})
	goto inst531
inst534_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst544
	}
	goto unreachable

	goto unreachable
	goto inst531
inst531: // rune "09AFaf" -> 533
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst533
			}
			goto inst531_fail
		}
	}
	goto inst531_fail
	goto unreachable
	goto inst531_fail
inst531_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 534:
			goto inst534_alt
		}
	}
	goto fail

	goto unreachable
	goto inst528
inst528: // string ":" -> 529
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst529
		}
	}
	goto inst528_fail
	goto unreachable
	goto inst528_fail
inst528_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 545:
			goto inst545_alt
		}
	}
	goto fail

	goto unreachable
	goto inst533
inst533: // alt -> 532, 544
	{
		idx := i*406 + 183
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 533, 0})
	goto inst532
inst533_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst544
	}
	goto unreachable

	goto unreachable
	goto inst544
inst544: // alt -> 536, 1116
	{
		idx := i*406 + 184
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 544, 0})
	goto inst536
inst544_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst532
inst532: // rune "09AFaf" -> 544
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst544
			}
			goto inst532_fail
		}
	}
	goto inst532_fail
	goto unreachable
	goto inst532_fail
inst532_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 533:
			goto inst533_alt
		}
	}
	goto fail

	goto unreachable
	goto inst536
inst536: // string ":" -> 537
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst537
		}
	}
	goto inst536_fail
	goto unreachable
	goto inst536_fail
inst536_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 544:
			goto inst544_alt
		}
	}
	goto fail

	goto unreachable
	goto inst526
inst526: // alt -> 523, 545
	{
		idx := i*406 + 185
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 526, 0})
	goto inst523
inst526_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst545
	}
	goto unreachable

	goto unreachable
	goto inst545
inst545: // alt -> 528, 1116
	{
		idx := i*406 + 186
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 545, 0})
	goto inst528
inst545_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst524
inst524: // rune "09AFaf" -> 545
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst545
			}
			goto inst524_fail
		}
	}
	goto inst524_fail
	goto unreachable
	goto inst524_fail
inst524_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 525:
			goto inst525_alt
		}
	}
	goto fail

	goto unreachable
	goto inst625
inst625: // alt -> 512, 564
	{
		idx := i*406 + 187
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 625, 0})
	goto inst512
inst625_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst564
	}
	goto unreachable

	goto unreachable
	goto inst525
inst525: // alt -> 524, 545
	{
		idx := i*406 + 188
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 525, 0})
	goto inst524
inst525_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst545
	}
	goto unreachable

	goto unreachable
	goto inst523
inst523: // rune "09AFaf" -> 525
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst525
			}
			goto inst523_fail
		}
	}
	goto inst523_fail
	goto unreachable
	goto inst523_fail
inst523_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 526:
			goto inst526_alt
		}
	}
	goto fail

	goto unreachable
	goto inst537
inst537: // rune "09AFaf" -> 543
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst543
			}
			goto inst537_fail
		}
	}
	goto inst537_fail
	goto unreachable
	goto inst537_fail
inst537_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 544:
			goto inst544_alt
		}
	}
	goto fail

	goto unreachable
	goto inst543
inst543: // alt -> 538, 1116
	{
		idx := i*406 + 189
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 543, 0})
	goto inst538
inst543_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst538
inst538: // rune "09AFaf" -> 542
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst542
			}
			goto inst538_fail
		}
	}
	goto inst538_fail
	goto unreachable
	goto inst538_fail
inst538_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 543:
			goto inst543_alt
		}
	}
	goto fail

	goto unreachable
	goto inst542
inst542: // alt -> 539, 1116
	{
		idx := i*406 + 190
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 542, 0})
	goto inst539
inst542_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst539
inst539: // rune "09AFaf" -> 541
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst541
			}
			goto inst539_fail
		}
	}
	goto inst539_fail
	goto unreachable
	goto inst539_fail
inst539_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 542:
			goto inst542_alt
		}
	}
	goto fail

	goto unreachable
	goto inst549
inst549: // rune "09AFaf" -> 553
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst553
			}
			goto inst549_fail
		}
	}
	goto inst549_fail
	goto unreachable
	goto inst549_fail
inst549_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 554:
			goto inst554_alt
		}
	}
	goto fail

	goto unreachable
	goto inst554
inst554: // alt -> 549, 563
	{
		idx := i*406 + 191
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 554, 0})
	goto inst549
inst554_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst563
	}
	goto unreachable

	goto unreachable
	goto inst627
inst627: // alt -> 625, 626
	{
		idx := i*406 + 192
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 627, 0})
	goto inst625
inst627_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst626
	}
	goto unreachable

	goto unreachable
	goto inst548
inst548: // rune "09AFaf" -> 554
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst554
			}
			goto inst548_fail
		}
	}
	goto inst548_fail
	goto unreachable
	goto inst548_fail
inst548_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 564:
			goto inst564_alt
		}
	}
	goto fail

	goto unreachable
	goto inst547
inst547: // string ":" -> 548
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst548
		}
	}
	goto inst547_fail
	goto unreachable
	goto inst547_fail
inst547_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 564:
			goto inst564_alt
		}
	}
	goto fail

	goto unreachable
	goto inst564
inst564: // alt -> 547, 565
	{
		idx := i*406 + 193
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 564, 0})
	goto inst547
inst564_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst565
	}
	goto unreachable

	goto unreachable
	goto inst553
inst553: // alt -> 550, 563
	{
		idx := i*406 + 194
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 553, 0})
	goto inst550
inst553_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst563
	}
	goto unreachable

	goto unreachable
	goto inst626
inst626: // string ":" -> 1116
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1116
		}
	}
	goto inst626_fail
	goto unreachable
	goto inst626_fail
inst626_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 492:
			goto inst492_alt
		case 493:
			goto inst493_alt
		case 494:
			goto inst494_alt
		case 500:
			goto inst500_alt
		case 501:
			goto inst501_alt
		case 502:
			goto inst502_alt
		case 508:
			goto inst508_alt
		case 509:
			goto inst509_alt
		case 510:
			goto inst510_alt
		case 779:
			goto inst779_alt
		}
	}
	goto fail

	goto unreachable
	goto inst550
inst550: // rune "09AFaf" -> 552
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst552
			}
			goto inst550_fail
		}
	}
	goto inst550_fail
	goto unreachable
	goto inst550_fail
inst550_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 553:
			goto inst553_alt
		}
	}
	goto fail

	goto unreachable
	goto inst552
inst552: // alt -> 551, 563
	{
		idx := i*406 + 195
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 552, 0})
	goto inst551
inst552_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst563
	}
	goto unreachable

	goto unreachable
	goto inst563
inst563: // alt -> 555, 565
	{
		idx := i*406 + 196
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 563, 0})
	goto inst555
inst563_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst565
	}
	goto unreachable

	goto unreachable
	goto inst551
inst551: // rune "09AFaf" -> 563
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst563
			}
			goto inst551_fail
		}
	}
	goto inst551_fail
	goto unreachable
	goto inst551_fail
inst551_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 552:
			goto inst552_alt
		}
	}
	goto fail

	goto unreachable
	goto inst555
inst555: // string ":" -> 556
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst556
		}
	}
	goto inst555_fail
	goto unreachable
	goto inst555_fail
inst555_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 563:
			goto inst563_alt
		}
	}
	goto fail

	goto unreachable
	goto inst556
inst556: // rune "09AFaf" -> 562
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst562
			}
			goto inst556_fail
		}
	}
	goto inst556_fail
	goto unreachable
	goto inst556_fail
inst556_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 563:
			goto inst563_alt
		}
	}
	goto fail

	goto unreachable
	goto inst565
inst565: // string ":" -> 579
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst579
		}
	}
	goto inst565_fail
	goto unreachable
	goto inst565_fail
inst565_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 552:
			goto inst552_alt
		case 553:
			goto inst553_alt
		case 554:
			goto inst554_alt
		case 560:
			goto inst560_alt
		case 561:
			goto inst561_alt
		case 562:
			goto inst562_alt
		case 563:
			goto inst563_alt
		case 564:
			goto inst564_alt
		case 627:
			goto inst627_alt
		}
	}
	goto fail

	goto unreachable
	goto inst562
inst562: // alt -> 557, 565
	{
		idx := i*406 + 197
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 562, 0})
	goto inst557
inst562_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst565
	}
	goto unreachable

	goto unreachable
	goto inst557
inst557: // rune "09AFaf" -> 561
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst561
			}
			goto inst557_fail
		}
	}
	goto inst557_fail
	goto unreachable
	goto inst557_fail
inst557_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 562:
			goto inst562_alt
		}
	}
	goto fail

	goto unreachable
	goto inst561
inst561: // alt -> 558, 565
	{
		idx := i*406 + 198
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 561, 0})
	goto inst558
inst561_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst565
	}
	goto unreachable

	goto unreachable
	goto inst559
inst559: // rune "09AFaf" -> 565
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst565
			}
			goto inst559_fail
		}
	}
	goto inst559_fail
	goto unreachable
	goto inst559_fail
inst559_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 560:
			goto inst560_alt
		}
	}
	goto fail

	goto unreachable
	goto inst560
inst560: // alt -> 559, 565
	{
		idx := i*406 + 199
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 560, 0})
	goto inst559
inst560_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst565
	}
	goto unreachable

	goto unreachable
	goto inst558
inst558: // rune "09AFaf" -> 560
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst560
			}
			goto inst558_fail
		}
	}
	goto inst558_fail
	goto unreachable
	goto inst558_fail
inst558_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 561:
			goto inst561_alt
		}
	}
	goto fail

	goto unreachable
	goto inst567
inst567: // string "5" -> 568
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst568
		}
	}
	goto inst567_fail
	goto unreachable
	goto inst567_fail
inst567_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 571:
			goto inst571_alt
		}
	}
	goto fail

	goto unreachable
	goto inst566
inst566: // string "2" -> 571
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst571
		}
	}
	goto inst566_fail
	goto unreachable
	goto inst566_fail
inst566_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 575:
			goto inst575_alt
		}
	}
	goto fail

	goto unreachable
	goto inst568
inst568: // rune "05" -> 580
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst580
		}
	}
	goto inst568_fail
	goto unreachable
	goto inst568_fail
inst568_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 571:
			goto inst571_alt
		}
	}
	goto fail

	goto unreachable
	goto inst569
inst569: // rune "04" -> 570
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst570
		}
	}
	goto inst569_fail
	goto unreachable
	goto inst569_fail
inst569_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 575:
			goto inst575_alt
		}
	}
	goto fail

	goto unreachable
	goto inst570
inst570: // rune "09" -> 580
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst580
		}
	}
	goto inst570_fail
	goto unreachable
	goto inst570_fail
inst570_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 575:
			goto inst575_alt
		}
	}
	goto fail

	goto unreachable
	goto inst571
inst571: // alt -> 567, 569
	{
		idx := i*406 + 200
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 571, 0})
	goto inst567
inst571_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst569
	}
	goto unreachable

	goto unreachable
	goto inst575
inst575: // alt -> 566, 572
	{
		idx := i*406 + 201
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 575, 0})
	goto inst566
inst575_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst572
	}
	goto unreachable

	goto unreachable
	goto inst572
inst572: // string "1" -> 573
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst573
		}
	}
	goto inst572_fail
	goto unreachable
	goto inst572_fail
inst572_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 579:
			goto inst579_alt
		}
	}
	goto fail

	goto unreachable
	goto inst573
inst573: // rune "09" -> 574
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst574
		}
	}
	goto inst573_fail
	goto unreachable
	goto inst573_fail
inst573_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 579:
			goto inst579_alt
		}
	}
	goto fail

	goto unreachable
	goto inst574
inst574: // rune "09" -> 580
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst580
		}
	}
	goto inst574_fail
	goto unreachable
	goto inst574_fail
inst574_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 579:
			goto inst579_alt
		}
	}
	goto fail

	goto unreachable
	goto inst541
inst541: // alt -> 540, 1116
	{
		idx := i*406 + 202
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 541, 0})
	goto inst540
inst541_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst579
inst579: // alt -> 575, 577
	{
		idx := i*406 + 203
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 579, 0})
	goto inst575
inst579_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst577
	}
	goto unreachable

	goto unreachable
	goto inst576
inst576: // rune "19" -> 578
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst578
		}
	}
	goto inst576_fail
	goto unreachable
	goto inst576_fail
inst576_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 577:
			goto inst577_alt
		}
	}
	goto fail

	goto unreachable
	goto inst577
inst577: // alt -> 576, 578
	{
		idx := i*406 + 204
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 577, 0})
	goto inst576
inst577_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst578
	}
	goto unreachable

	goto unreachable
	goto inst578
inst578: // rune "09" -> 580
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst580
		}
	}
	goto inst578_fail
	goto unreachable
	goto inst578_fail
inst578_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 552:
			goto inst552_alt
		case 553:
			goto inst553_alt
		case 554:
			goto inst554_alt
		case 560:
			goto inst560_alt
		case 561:
			goto inst561_alt
		case 562:
			goto inst562_alt
		case 563:
			goto inst563_alt
		case 564:
			goto inst564_alt
		case 577:
			goto inst577_alt
		case 627:
			goto inst627_alt
		}
	}
	goto fail

	goto unreachable
	goto inst540
inst540: // rune "09AFaf" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1116
			}
			goto inst540_fail
		}
	}
	goto inst540_fail
	goto unreachable
	goto inst540_fail
inst540_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 541:
			goto inst541_alt
		}
	}
	goto fail

	goto unreachable
	goto inst580
inst580: // string "." -> 594
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst594
		}
	}
	goto inst580_fail
	goto unreachable
	goto inst580_fail
inst580_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 552:
			goto inst552_alt
		case 553:
			goto inst553_alt
		case 554:
			goto inst554_alt
		case 560:
			goto inst560_alt
		case 561:
			goto inst561_alt
		case 562:
			goto inst562_alt
		case 563:
			goto inst563_alt
		case 564:
			goto inst564_alt
		case 571:
			goto inst571_alt
		case 575:
			goto inst575_alt
		case 577:
			goto inst577_alt
		case 579:
			goto inst579_alt
		case 627:
			goto inst627_alt
		}
	}
	goto fail

	goto unreachable
	goto inst581
inst581: // string "2" -> 586
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst586
		}
	}
	goto inst581_fail
	goto unreachable
	goto inst581_fail
inst581_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 590:
			goto inst590_alt
		}
	}
	goto fail

	goto unreachable
	goto inst582
inst582: // string "5" -> 583
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst583
		}
	}
	goto inst582_fail
	goto unreachable
	goto inst582_fail
inst582_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 586:
			goto inst586_alt
		}
	}
	goto fail

	goto unreachable
	goto inst583
inst583: // rune "05" -> 595
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst595
		}
	}
	goto inst583_fail
	goto unreachable
	goto inst583_fail
inst583_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 586:
			goto inst586_alt
		}
	}
	goto fail

	goto unreachable
	goto inst584
inst584: // rune "04" -> 585
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst585
		}
	}
	goto inst584_fail
	goto unreachable
	goto inst584_fail
inst584_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 590:
			goto inst590_alt
		}
	}
	goto fail

	goto unreachable
	goto inst585
inst585: // rune "09" -> 595
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst595
		}
	}
	goto inst585_fail
	goto unreachable
	goto inst585_fail
inst585_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 590:
			goto inst590_alt
		}
	}
	goto fail

	goto unreachable
	goto inst586
inst586: // alt -> 582, 584
	{
		idx := i*406 + 205
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 586, 0})
	goto inst582
inst586_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst584
	}
	goto unreachable

	goto unreachable
	goto inst587
inst587: // string "1" -> 588
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst588
		}
	}
	goto inst587_fail
	goto unreachable
	goto inst587_fail
inst587_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 594:
			goto inst594_alt
		}
	}
	goto fail

	goto unreachable
	goto inst588
inst588: // rune "09" -> 589
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst589
		}
	}
	goto inst588_fail
	goto unreachable
	goto inst588_fail
inst588_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 594:
			goto inst594_alt
		}
	}
	goto fail

	goto unreachable
	goto inst589
inst589: // rune "09" -> 595
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst595
		}
	}
	goto inst589_fail
	goto unreachable
	goto inst589_fail
inst589_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 594:
			goto inst594_alt
		}
	}
	goto fail

	goto unreachable
	goto inst590
inst590: // alt -> 581, 587
	{
		idx := i*406 + 206
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 590, 0})
	goto inst581
inst590_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst587
	}
	goto unreachable

	goto unreachable
	goto inst591
inst591: // rune "19" -> 593
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst593
		}
	}
	goto inst591_fail
	goto unreachable
	goto inst591_fail
inst591_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 592:
			goto inst592_alt
		}
	}
	goto fail

	goto unreachable
	goto inst592
inst592: // alt -> 591, 593
	{
		idx := i*406 + 207
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 592, 0})
	goto inst591
inst592_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst593
	}
	goto unreachable

	goto unreachable
	goto inst593
inst593: // rune "09" -> 595
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst595
		}
	}
	goto inst593_fail
	goto unreachable
	goto inst593_fail
inst593_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 552:
			goto inst552_alt
		case 553:
			goto inst553_alt
		case 554:
			goto inst554_alt
		case 560:
			goto inst560_alt
		case 561:
			goto inst561_alt
		case 562:
			goto inst562_alt
		case 563:
			goto inst563_alt
		case 564:
			goto inst564_alt
		case 571:
			goto inst571_alt
		case 575:
			goto inst575_alt
		case 577:
			goto inst577_alt
		case 579:
			goto inst579_alt
		case 592:
			goto inst592_alt
		case 627:
			goto inst627_alt
		}
	}
	goto fail

	goto unreachable
	goto inst594
inst594: // alt -> 590, 592
	{
		idx := i*406 + 208
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 594, 0})
	goto inst590
inst594_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst592
	}
	goto unreachable

	goto unreachable
	goto inst595
inst595: // string "." -> 609
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst609
		}
	}
	goto inst595_fail
	goto unreachable
	goto inst595_fail
inst595_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 552:
			goto inst552_alt
		case 553:
			goto inst553_alt
		case 554:
			goto inst554_alt
		case 560:
			goto inst560_alt
		case 561:
			goto inst561_alt
		case 562:
			goto inst562_alt
		case 563:
			goto inst563_alt
		case 564:
			goto inst564_alt
		case 571:
			goto inst571_alt
		case 575:
			goto inst575_alt
		case 577:
			goto inst577_alt
		case 579:
			goto inst579_alt
		case 586:
			goto inst586_alt
		case 590:
			goto inst590_alt
		case 592:
			goto inst592_alt
		case 594:
			goto inst594_alt
		case 627:
			goto inst627_alt
		}
	}
	goto fail

	goto unreachable
	goto inst596
inst596: // string "2" -> 601
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst601
		}
	}
	goto inst596_fail
	goto unreachable
	goto inst596_fail
inst596_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 605:
			goto inst605_alt
		}
	}
	goto fail

	goto unreachable
	goto inst597
inst597: // string "5" -> 598
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst598
		}
	}
	goto inst597_fail
	goto unreachable
	goto inst597_fail
inst597_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 601:
			goto inst601_alt
		}
	}
	goto fail

	goto unreachable
	goto inst598
inst598: // rune "05" -> 610
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst610
		}
	}
	goto inst598_fail
	goto unreachable
	goto inst598_fail
inst598_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 601:
			goto inst601_alt
		}
	}
	goto fail

	goto unreachable
	goto inst599
inst599: // rune "04" -> 600
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst600
		}
	}
	goto inst599_fail
	goto unreachable
	goto inst599_fail
inst599_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 605:
			goto inst605_alt
		}
	}
	goto fail

	goto unreachable
	goto inst600
inst600: // rune "09" -> 610
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst610
		}
	}
	goto inst600_fail
	goto unreachable
	goto inst600_fail
inst600_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 605:
			goto inst605_alt
		}
	}
	goto fail

	goto unreachable
	goto inst601
inst601: // alt -> 597, 599
	{
		idx := i*406 + 209
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 601, 0})
	goto inst597
inst601_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst599
	}
	goto unreachable

	goto unreachable
	goto inst602
inst602: // string "1" -> 603
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst603
		}
	}
	goto inst602_fail
	goto unreachable
	goto inst602_fail
inst602_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 609:
			goto inst609_alt
		}
	}
	goto fail

	goto unreachable
	goto inst603
inst603: // rune "09" -> 604
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst604
		}
	}
	goto inst603_fail
	goto unreachable
	goto inst603_fail
inst603_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 609:
			goto inst609_alt
		}
	}
	goto fail

	goto unreachable
	goto inst604
inst604: // rune "09" -> 610
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst610
		}
	}
	goto inst604_fail
	goto unreachable
	goto inst604_fail
inst604_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 609:
			goto inst609_alt
		}
	}
	goto fail

	goto unreachable
	goto inst605
inst605: // alt -> 596, 602
	{
		idx := i*406 + 210
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 605, 0})
	goto inst596
inst605_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst602
	}
	goto unreachable

	goto unreachable
	goto inst606
inst606: // rune "19" -> 608
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst608
		}
	}
	goto inst606_fail
	goto unreachable
	goto inst606_fail
inst606_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 607:
			goto inst607_alt
		}
	}
	goto fail

	goto unreachable
	goto inst607
inst607: // alt -> 606, 608
	{
		idx := i*406 + 211
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 607, 0})
	goto inst606
inst607_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst608
	}
	goto unreachable

	goto unreachable
	goto inst608
inst608: // rune "09" -> 610
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst610
		}
	}
	goto inst608_fail
	goto unreachable
	goto inst608_fail
inst608_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 552:
			goto inst552_alt
		case 553:
			goto inst553_alt
		case 554:
			goto inst554_alt
		case 560:
			goto inst560_alt
		case 561:
			goto inst561_alt
		case 562:
			goto inst562_alt
		case 563:
			goto inst563_alt
		case 564:
			goto inst564_alt
		case 571:
			goto inst571_alt
		case 575:
			goto inst575_alt
		case 577:
			goto inst577_alt
		case 579:
			goto inst579_alt
		case 586:
			goto inst586_alt
		case 590:
			goto inst590_alt
		case 592:
			goto inst592_alt
		case 594:
			goto inst594_alt
		case 607:
			goto inst607_alt
		case 627:
			goto inst627_alt
		}
	}
	goto fail

	goto unreachable
	goto inst609
inst609: // alt -> 605, 607
	{
		idx := i*406 + 212
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 609, 0})
	goto inst605
inst609_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst607
	}
	goto unreachable

	goto unreachable
	goto inst610
inst610: // string "." -> 624
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst624
		}
	}
	goto inst610_fail
	goto unreachable
	goto inst610_fail
inst610_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 552:
			goto inst552_alt
		case 553:
			goto inst553_alt
		case 554:
			goto inst554_alt
		case 560:
			goto inst560_alt
		case 561:
			goto inst561_alt
		case 562:
			goto inst562_alt
		case 563:
			goto inst563_alt
		case 564:
			goto inst564_alt
		case 571:
			goto inst571_alt
		case 575:
			goto inst575_alt
		case 577:
			goto inst577_alt
		case 579:
			goto inst579_alt
		case 586:
			goto inst586_alt
		case 590:
			goto inst590_alt
		case 592:
			goto inst592_alt
		case 594:
			goto inst594_alt
		case 601:
			goto inst601_alt
		case 605:
			goto inst605_alt
		case 607:
			goto inst607_alt
		case 609:
			goto inst609_alt
		case 627:
			goto inst627_alt
		}
	}
	goto fail

	goto unreachable
	goto inst611
inst611: // string "2" -> 616
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst616
		}
	}
	goto inst611_fail
	goto unreachable
	goto inst611_fail
inst611_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 620:
			goto inst620_alt
		}
	}
	goto fail

	goto unreachable
	goto inst612
inst612: // string "5" -> 613
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst613
		}
	}
	goto inst612_fail
	goto unreachable
	goto inst612_fail
inst612_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 616:
			goto inst616_alt
		}
	}
	goto fail

	goto unreachable
	goto inst613
inst613: // rune "05" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1116
		}
	}
	goto inst613_fail
	goto unreachable
	goto inst613_fail
inst613_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 616:
			goto inst616_alt
		}
	}
	goto fail

	goto unreachable
	goto inst614
inst614: // rune "04" -> 615
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst615
		}
	}
	goto inst614_fail
	goto unreachable
	goto inst614_fail
inst614_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 620:
			goto inst620_alt
		}
	}
	goto fail

	goto unreachable
	goto inst615
inst615: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst615_fail
	goto unreachable
	goto inst615_fail
inst615_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 620:
			goto inst620_alt
		}
	}
	goto fail

	goto unreachable
	goto inst616
inst616: // alt -> 612, 614
	{
		idx := i*406 + 213
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 616, 0})
	goto inst612
inst616_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst614
	}
	goto unreachable

	goto unreachable
	goto inst617
inst617: // string "1" -> 618
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst618
		}
	}
	goto inst617_fail
	goto unreachable
	goto inst617_fail
inst617_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 624:
			goto inst624_alt
		}
	}
	goto fail

	goto unreachable
	goto inst618
inst618: // rune "09" -> 619
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst619
		}
	}
	goto inst618_fail
	goto unreachable
	goto inst618_fail
inst618_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 624:
			goto inst624_alt
		}
	}
	goto fail

	goto unreachable
	goto inst619
inst619: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst619_fail
	goto unreachable
	goto inst619_fail
inst619_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 624:
			goto inst624_alt
		}
	}
	goto fail

	goto unreachable
	goto inst620
inst620: // alt -> 611, 617
	{
		idx := i*406 + 214
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 620, 0})
	goto inst611
inst620_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst617
	}
	goto unreachable

	goto unreachable
	goto inst621
inst621: // rune "19" -> 623
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst623
		}
	}
	goto inst621_fail
	goto unreachable
	goto inst621_fail
inst621_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 622:
			goto inst622_alt
		}
	}
	goto fail

	goto unreachable
	goto inst622
inst622: // alt -> 621, 623
	{
		idx := i*406 + 215
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 622, 0})
	goto inst621
inst622_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst623
	}
	goto unreachable

	goto unreachable
	goto inst623
inst623: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst623_fail
	goto unreachable
	goto inst623_fail
inst623_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 552:
			goto inst552_alt
		case 553:
			goto inst553_alt
		case 554:
			goto inst554_alt
		case 560:
			goto inst560_alt
		case 561:
			goto inst561_alt
		case 562:
			goto inst562_alt
		case 563:
			goto inst563_alt
		case 564:
			goto inst564_alt
		case 571:
			goto inst571_alt
		case 575:
			goto inst575_alt
		case 577:
			goto inst577_alt
		case 579:
			goto inst579_alt
		case 586:
			goto inst586_alt
		case 590:
			goto inst590_alt
		case 592:
			goto inst592_alt
		case 594:
			goto inst594_alt
		case 601:
			goto inst601_alt
		case 605:
			goto inst605_alt
		case 607:
			goto inst607_alt
		case 609:
			goto inst609_alt
		case 622:
			goto inst622_alt
		case 627:
			goto inst627_alt
		}
	}
	goto fail

	goto unreachable
	goto inst624
inst624: // alt -> 620, 622
	{
		idx := i*406 + 216
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 624, 0})
	goto inst620
inst624_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst622
	}
	goto unreachable

	goto unreachable
	goto inst636
inst636: // string ":" -> 637
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst637
		}
	}
	goto inst636_fail
	goto unreachable
	goto inst636_fail
inst636_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 633:
			goto inst633_alt
		case 634:
			goto inst634_alt
		case 635:
			goto inst635_alt
		case 940:
			goto inst940_alt
		}
	}
	goto fail

	goto unreachable
	goto inst633
inst633: // alt -> 632, 636
	{
		idx := i*406 + 217
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 633, 0})
	goto inst632
inst633_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst636
	}
	goto unreachable

	goto unreachable
	goto inst631
inst631: // rune "09AFaf" -> 633
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst633
			}
			goto inst631_fail
		}
	}
	goto inst631_fail
	goto unreachable
	goto inst631_fail
inst631_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 634:
			goto inst634_alt
		}
	}
	goto fail

	goto unreachable
	goto inst634
inst634: // alt -> 631, 636
	{
		idx := i*406 + 218
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 634, 0})
	goto inst631
inst634_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst636
	}
	goto unreachable

	goto unreachable
	goto inst632
inst632: // rune "09AFaf" -> 636
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst636
			}
			goto inst632_fail
		}
	}
	goto inst632_fail
	goto unreachable
	goto inst632_fail
inst632_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 633:
			goto inst633_alt
		}
	}
	goto fail

	goto unreachable
	goto inst637
inst637: // rune "09AFaf" -> 643
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst643
			}
			goto inst637_fail
		}
	}
	goto inst637_fail
	goto unreachable
	goto inst637_fail
inst637_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 633:
			goto inst633_alt
		case 634:
			goto inst634_alt
		case 635:
			goto inst635_alt
		case 940:
			goto inst940_alt
		}
	}
	goto fail

	goto unreachable
	goto inst635
inst635: // alt -> 630, 636
	{
		idx := i*406 + 219
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 635, 0})
	goto inst630
inst635_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst636
	}
	goto unreachable

	goto unreachable
	goto inst638
inst638: // rune "09AFaf" -> 642
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst642
			}
			goto inst638_fail
		}
	}
	goto inst638_fail
	goto unreachable
	goto inst638_fail
inst638_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 643:
			goto inst643_alt
		}
	}
	goto fail

	goto unreachable
	goto inst630
inst630: // rune "09AFaf" -> 634
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst634
			}
			goto inst630_fail
		}
	}
	goto inst630_fail
	goto unreachable
	goto inst630_fail
inst630_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 635:
			goto inst635_alt
		}
	}
	goto fail

	goto unreachable
	goto inst641
inst641: // alt -> 640, 644
	{
		idx := i*406 + 220
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 641, 0})
	goto inst640
inst641_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst644
	}
	goto unreachable

	goto unreachable
	goto inst639
inst639: // rune "09AFaf" -> 641
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst641
			}
			goto inst639_fail
		}
	}
	goto inst639_fail
	goto unreachable
	goto inst639_fail
inst639_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 642:
			goto inst642_alt
		}
	}
	goto fail

	goto unreachable
	goto inst647
inst647: // rune "09AFaf" -> 651
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst651
			}
			goto inst647_fail
		}
	}
	goto inst647_fail
	goto unreachable
	goto inst647_fail
inst647_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 652:
			goto inst652_alt
		}
	}
	goto fail

	goto unreachable
	goto inst640
inst640: // rune "09AFaf" -> 644
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst644
			}
			goto inst640_fail
		}
	}
	goto inst640_fail
	goto unreachable
	goto inst640_fail
inst640_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 641:
			goto inst641_alt
		}
	}
	goto fail

	goto unreachable
	goto inst644
inst644: // string ":" -> 778
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst778
		}
	}
	goto inst644_fail
	goto unreachable
	goto inst644_fail
inst644_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 633:
			goto inst633_alt
		case 634:
			goto inst634_alt
		case 635:
			goto inst635_alt
		case 641:
			goto inst641_alt
		case 642:
			goto inst642_alt
		case 643:
			goto inst643_alt
		case 940:
			goto inst940_alt
		}
	}
	goto fail

	goto unreachable
	goto inst642
inst642: // alt -> 639, 644
	{
		idx := i*406 + 221
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 642, 0})
	goto inst639
inst642_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst644
	}
	goto unreachable

	goto unreachable
	goto inst643
inst643: // alt -> 638, 644
	{
		idx := i*406 + 222
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 643, 0})
	goto inst638
inst643_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst644
	}
	goto unreachable

	goto unreachable
	goto inst653
inst653: // string ":" -> 654
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst654
		}
	}
	goto inst653_fail
	goto unreachable
	goto inst653_fail
inst653_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 688:
			goto inst688_alt
		}
	}
	goto fail

	goto unreachable
	goto inst652
inst652: // alt -> 647, 688
	{
		idx := i*406 + 223
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 652, 0})
	goto inst647
inst652_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst688
	}
	goto unreachable

	goto unreachable
	goto inst646
inst646: // rune "09AFaf" -> 652
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst652
			}
			goto inst646_fail
		}
	}
	goto inst646_fail
	goto unreachable
	goto inst646_fail
inst646_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 776:
			goto inst776_alt
		}
	}
	goto fail

	goto unreachable
	goto inst645
inst645: // string ":" -> 646
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst646
		}
	}
	goto inst645_fail
	goto unreachable
	goto inst645_fail
inst645_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 776:
			goto inst776_alt
		}
	}
	goto fail

	goto unreachable
	goto inst650
inst650: // alt -> 649, 688
	{
		idx := i*406 + 224
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 650, 0})
	goto inst649
inst650_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst688
	}
	goto unreachable

	goto unreachable
	goto inst648
inst648: // rune "09AFaf" -> 650
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst650
			}
			goto inst648_fail
		}
	}
	goto inst648_fail
	goto unreachable
	goto inst648_fail
inst648_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 651:
			goto inst651_alt
		}
	}
	goto fail

	goto unreachable
	goto inst649
inst649: // rune "09AFaf" -> 688
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst688
			}
			goto inst649_fail
		}
	}
	goto inst649_fail
	goto unreachable
	goto inst649_fail
inst649_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 650:
			goto inst650_alt
		}
	}
	goto fail

	goto unreachable
	goto inst651
inst651: // alt -> 648, 688
	{
		idx := i*406 + 225
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 651, 0})
	goto inst648
inst651_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst688
	}
	goto unreachable

	goto unreachable
	goto inst654
inst654: // rune "09AFaf" -> 660
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst660
			}
			goto inst654_fail
		}
	}
	goto inst654_fail
	goto unreachable
	goto inst654_fail
inst654_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 688:
			goto inst688_alt
		}
	}
	goto fail

	goto unreachable
	goto inst688
inst688: // alt -> 653, 1116
	{
		idx := i*406 + 226
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 688, 0})
	goto inst653
inst688_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst655
inst655: // rune "09AFaf" -> 659
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst659
			}
			goto inst655_fail
		}
	}
	goto inst655_fail
	goto unreachable
	goto inst655_fail
inst655_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 660:
			goto inst660_alt
		}
	}
	goto fail

	goto unreachable
	goto inst660
inst660: // alt -> 655, 687
	{
		idx := i*406 + 227
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 660, 0})
	goto inst655
inst660_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst687
	}
	goto unreachable

	goto unreachable
	goto inst656
inst656: // rune "09AFaf" -> 658
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst658
			}
			goto inst656_fail
		}
	}
	goto inst656_fail
	goto unreachable
	goto inst656_fail
inst656_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 659:
			goto inst659_alt
		}
	}
	goto fail

	goto unreachable
	goto inst659
inst659: // alt -> 656, 687
	{
		idx := i*406 + 228
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 659, 0})
	goto inst656
inst659_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst687
	}
	goto unreachable

	goto unreachable
	goto inst112
inst112: // alt -> 111, 1116
	{
		idx := i*406 + 229
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 112, 0})
	goto inst111
inst112_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst111
inst111: // rune "09AFaf" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1116
			}
			goto inst111_fail
		}
	}
	goto inst111_fail
	goto unreachable
	goto inst111_fail
inst111_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 112:
			goto inst112_alt
		}
	}
	goto fail

	goto unreachable
	goto inst170
inst170: // alt -> 169, 1116
	{
		idx := i*406 + 230
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 170, 0})
	goto inst169
inst170_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst169
inst169: // rune "09AFaf" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1116
			}
			goto inst169_fail
		}
	}
	goto inst169_fail
	goto unreachable
	goto inst169_fail
inst169_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 170:
			goto inst170_alt
		}
	}
	goto fail

	goto unreachable
	goto inst667
inst667: // alt -> 664, 686
	{
		idx := i*406 + 231
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 667, 0})
	goto inst664
inst667_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst686
	}
	goto unreachable

	goto unreachable
	goto inst664
inst664: // rune "09AFaf" -> 666
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst666
			}
			goto inst664_fail
		}
	}
	goto inst664_fail
	goto unreachable
	goto inst664_fail
inst664_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 667:
			goto inst667_alt
		}
	}
	goto fail

	goto unreachable
	goto inst663
inst663: // rune "09AFaf" -> 667
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst667
			}
			goto inst663_fail
		}
	}
	goto inst663_fail
	goto unreachable
	goto inst663_fail
inst663_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 668:
			goto inst668_alt
		}
	}
	goto fail

	goto unreachable
	goto inst411
inst411: // alt -> 408, 1116
	{
		idx := i*406 + 232
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 411, 0})
	goto inst408
inst411_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst408
inst408: // rune "09AFaf" -> 410
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst410
			}
			goto inst408_fail
		}
	}
	goto inst408_fail
	goto unreachable
	goto inst408_fail
inst408_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 411:
			goto inst411_alt
		}
	}
	goto fail

	goto unreachable
	goto inst668
inst668: // alt -> 663, 686
	{
		idx := i*406 + 233
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 668, 0})
	goto inst663
inst668_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst686
	}
	goto unreachable

	goto unreachable
	goto inst410
inst410: // alt -> 409, 1116
	{
		idx := i*406 + 234
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 410, 0})
	goto inst409
inst410_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst409
inst409: // rune "09AFaf" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1116
			}
			goto inst409_fail
		}
	}
	goto inst409_fail
	goto unreachable
	goto inst409_fail
inst409_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 410:
			goto inst410_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1116
inst1116: // alt -> 1113, 1118
	{
		idx := i*406 + 235
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1116, 0})
	goto inst1113
inst1116_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1118
	}
	goto unreachable

	goto unreachable
	goto inst686
inst686: // alt -> 669, 1116
	{
		idx := i*406 + 236
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 686, 0})
	goto inst669
inst686_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst674
inst674: // alt -> 673, 685
	{
		idx := i*406 + 237
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 674, 0})
	goto inst673
inst674_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst685
	}
	goto unreachable

	goto unreachable
	goto inst677
inst677: // string ":" -> 678
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst678
		}
	}
	goto inst677_fail
	goto unreachable
	goto inst677_fail
inst677_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 685:
			goto inst685_alt
		}
	}
	goto fail

	goto unreachable
	goto inst675
inst675: // alt -> 672, 685
	{
		idx := i*406 + 238
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 675, 0})
	goto inst672
inst675_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst685
	}
	goto unreachable

	goto unreachable
	goto inst678
inst678: // rune "09AFaf" -> 684
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst684
			}
			goto inst678_fail
		}
	}
	goto inst678_fail
	goto unreachable
	goto inst678_fail
inst678_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 685:
			goto inst685_alt
		}
	}
	goto fail

	goto unreachable
	goto inst684
inst684: // alt -> 679, 1116
	{
		idx := i*406 + 239
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 684, 0})
	goto inst679
inst684_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst685
inst685: // alt -> 677, 1116
	{
		idx := i*406 + 240
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 685, 0})
	goto inst677
inst685_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst687
inst687: // alt -> 661, 1116
	{
		idx := i*406 + 241
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 687, 0})
	goto inst661
inst687_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst940
inst940: // alt -> 779, 780
	{
		idx := i*406 + 242
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 940, 0})
	goto inst779
inst940_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst780
	}
	goto unreachable

	goto unreachable
	goto inst657
inst657: // rune "09AFaf" -> 687
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst687
			}
			goto inst657_fail
		}
	}
	goto inst657_fail
	goto unreachable
	goto inst657_fail
inst657_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 658:
			goto inst658_alt
		}
	}
	goto fail

	goto unreachable
	goto inst658
inst658: // alt -> 657, 687
	{
		idx := i*406 + 243
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 658, 0})
	goto inst657
inst658_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst687
	}
	goto unreachable

	goto unreachable
	goto inst666
inst666: // alt -> 665, 686
	{
		idx := i*406 + 244
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 666, 0})
	goto inst665
inst666_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst686
	}
	goto unreachable

	goto unreachable
	goto inst1112
inst1112: // alt -> 940, 941
	{
		idx := i*406 + 245
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1112, 0})
	goto inst940
inst1112_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst941
	}
	goto unreachable

	goto unreachable
	goto inst676
inst676: // alt -> 671, 685
	{
		idx := i*406 + 246
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 676, 0})
	goto inst671
inst676_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst685
	}
	goto unreachable

	goto unreachable
	goto inst672
inst672: // rune "09AFaf" -> 674
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst674
			}
			goto inst672_fail
		}
	}
	goto inst672_fail
	goto unreachable
	goto inst672_fail
inst672_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 675:
			goto inst675_alt
		}
	}
	goto fail

	goto unreachable
	goto inst673
inst673: // rune "09AFaf" -> 685
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst685
			}
			goto inst673_fail
		}
	}
	goto inst673_fail
	goto unreachable
	goto inst673_fail
inst673_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 674:
			goto inst674_alt
		}
	}
	goto fail

	goto unreachable
	goto inst665
inst665: // rune "09AFaf" -> 686
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst686
			}
			goto inst665_fail
		}
	}
	goto inst665_fail
	goto unreachable
	goto inst665_fail
inst665_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 666:
			goto inst666_alt
		}
	}
	goto fail

	goto unreachable
	goto inst661
inst661: // string ":" -> 662
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst662
		}
	}
	goto inst661_fail
	goto unreachable
	goto inst661_fail
inst661_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 687:
			goto inst687_alt
		}
	}
	goto fail

	goto unreachable
	goto inst671
inst671: // rune "09AFaf" -> 675
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst675
			}
			goto inst671_fail
		}
	}
	goto inst671_fail
	goto unreachable
	goto inst671_fail
inst671_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 676:
			goto inst676_alt
		}
	}
	goto fail

	goto unreachable
	goto inst670
inst670: // rune "09AFaf" -> 676
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst676
			}
			goto inst670_fail
		}
	}
	goto inst670_fail
	goto unreachable
	goto inst670_fail
inst670_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 686:
			goto inst686_alt
		}
	}
	goto fail

	goto unreachable
	goto inst669
inst669: // string ":" -> 670
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst670
		}
	}
	goto inst669_fail
	goto unreachable
	goto inst669_fail
inst669_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 686:
			goto inst686_alt
		}
	}
	goto fail

	goto unreachable
	goto inst691
inst691: // rune "09AFaf" -> 695
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst695
			}
			goto inst691_fail
		}
	}
	goto inst691_fail
	goto unreachable
	goto inst691_fail
inst691_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 696:
			goto inst696_alt
		}
	}
	goto fail

	goto unreachable
	goto inst692
inst692: // rune "09AFaf" -> 694
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst694
			}
			goto inst692_fail
		}
	}
	goto inst692_fail
	goto unreachable
	goto inst692_fail
inst692_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 695:
			goto inst695_alt
		}
	}
	goto fail

	goto unreachable
	goto inst695
inst695: // alt -> 692, 714
	{
		idx := i*406 + 247
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 695, 0})
	goto inst692
inst695_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst714
	}
	goto unreachable

	goto unreachable
	goto inst694
inst694: // alt -> 693, 714
	{
		idx := i*406 + 248
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 694, 0})
	goto inst693
inst694_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst714
	}
	goto unreachable

	goto unreachable
	goto inst700
inst700: // rune "09AFaf" -> 702
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst702
			}
			goto inst700_fail
		}
	}
	goto inst700_fail
	goto unreachable
	goto inst700_fail
inst700_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 703:
			goto inst703_alt
		}
	}
	goto fail

	goto unreachable
	goto inst701
inst701: // rune "09AFaf" -> 713
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst713
			}
			goto inst701_fail
		}
	}
	goto inst701_fail
	goto unreachable
	goto inst701_fail
inst701_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 702:
			goto inst702_alt
		}
	}
	goto fail

	goto unreachable
	goto inst702
inst702: // alt -> 701, 713
	{
		idx := i*406 + 249
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 702, 0})
	goto inst701
inst702_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst713
	}
	goto unreachable

	goto unreachable
	goto inst693
inst693: // rune "09AFaf" -> 714
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst714
			}
			goto inst693_fail
		}
	}
	goto inst693_fail
	goto unreachable
	goto inst693_fail
inst693_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 694:
			goto inst694_alt
		}
	}
	goto fail

	goto unreachable
	goto inst696
inst696: // alt -> 691, 714
	{
		idx := i*406 + 250
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 696, 0})
	goto inst691
inst696_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst714
	}
	goto unreachable

	goto unreachable
	goto inst716
inst716: // string ":" -> 730
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst730
		}
	}
	goto inst716_fail
	goto unreachable
	goto inst716_fail
inst716_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 694:
			goto inst694_alt
		case 695:
			goto inst695_alt
		case 696:
			goto inst696_alt
		case 702:
			goto inst702_alt
		case 703:
			goto inst703_alt
		case 704:
			goto inst704_alt
		case 710:
			goto inst710_alt
		case 711:
			goto inst711_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 715:
			goto inst715_alt
		case 778:
			goto inst778_alt
		}
	}
	goto fail

	goto unreachable
	goto inst710
inst710: // alt -> 709, 716
	{
		idx := i*406 + 251
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 710, 0})
	goto inst709
inst710_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst716
	}
	goto unreachable

	goto unreachable
	goto inst712
inst712: // alt -> 707, 716
	{
		idx := i*406 + 252
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 712, 0})
	goto inst707
inst712_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst716
	}
	goto unreachable

	goto unreachable
	goto inst715
inst715: // alt -> 689, 716
	{
		idx := i*406 + 253
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 715, 0})
	goto inst689
inst715_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst716
	}
	goto unreachable

	goto unreachable
	goto inst706
inst706: // rune "09AFaf" -> 712
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst712
			}
			goto inst706_fail
		}
	}
	goto inst706_fail
	goto unreachable
	goto inst706_fail
inst706_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 713:
			goto inst713_alt
		}
	}
	goto fail

	goto unreachable
	goto inst707
inst707: // rune "09AFaf" -> 711
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst711
			}
			goto inst707_fail
		}
	}
	goto inst707_fail
	goto unreachable
	goto inst707_fail
inst707_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 712:
			goto inst712_alt
		}
	}
	goto fail

	goto unreachable
	goto inst714
inst714: // alt -> 697, 716
	{
		idx := i*406 + 254
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 714, 0})
	goto inst697
inst714_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst716
	}
	goto unreachable

	goto unreachable
	goto inst708
inst708: // rune "09AFaf" -> 710
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst710
			}
			goto inst708_fail
		}
	}
	goto inst708_fail
	goto unreachable
	goto inst708_fail
inst708_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 711:
			goto inst711_alt
		}
	}
	goto fail

	goto unreachable
	goto inst709
inst709: // rune "09AFaf" -> 716
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst716
			}
			goto inst709_fail
		}
	}
	goto inst709_fail
	goto unreachable
	goto inst709_fail
inst709_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 710:
			goto inst710_alt
		}
	}
	goto fail

	goto unreachable
	goto inst689
inst689: // string ":" -> 690
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst690
		}
	}
	goto inst689_fail
	goto unreachable
	goto inst689_fail
inst689_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 715:
			goto inst715_alt
		}
	}
	goto fail

	goto unreachable
	goto inst705
inst705: // string ":" -> 706
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst706
		}
	}
	goto inst705_fail
	goto unreachable
	goto inst705_fail
inst705_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 713:
			goto inst713_alt
		}
	}
	goto fail

	goto unreachable
	goto inst711
inst711: // alt -> 708, 716
	{
		idx := i*406 + 255
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 711, 0})
	goto inst708
inst711_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst716
	}
	goto unreachable

	goto unreachable
	goto inst679
inst679: // rune "09AFaf" -> 683
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst683
			}
			goto inst679_fail
		}
	}
	goto inst679_fail
	goto unreachable
	goto inst679_fail
inst679_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 684:
			goto inst684_alt
		}
	}
	goto fail

	goto unreachable
	goto inst713
inst713: // alt -> 705, 716
	{
		idx := i*406 + 256
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 713, 0})
	goto inst705
inst713_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst716
	}
	goto unreachable

	goto unreachable
	goto inst776
inst776: // alt -> 645, 715
	{
		idx := i*406 + 257
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 776, 0})
	goto inst645
inst776_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst715
	}
	goto unreachable

	goto unreachable
	goto inst718
inst718: // string "5" -> 719
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst719
		}
	}
	goto inst718_fail
	goto unreachable
	goto inst718_fail
inst718_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 722:
			goto inst722_alt
		}
	}
	goto fail

	goto unreachable
	goto inst690
inst690: // rune "09AFaf" -> 696
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst696
			}
			goto inst690_fail
		}
	}
	goto inst690_fail
	goto unreachable
	goto inst690_fail
inst690_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 715:
			goto inst715_alt
		}
	}
	goto fail

	goto unreachable
	goto inst717
inst717: // string "2" -> 722
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst722
		}
	}
	goto inst717_fail
	goto unreachable
	goto inst717_fail
inst717_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 726:
			goto inst726_alt
		}
	}
	goto fail

	goto unreachable
	goto inst724
inst724: // rune "09" -> 725
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst725
		}
	}
	goto inst724_fail
	goto unreachable
	goto inst724_fail
inst724_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 730:
			goto inst730_alt
		}
	}
	goto fail

	goto unreachable
	goto inst719
inst719: // rune "05" -> 731
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst731
		}
	}
	goto inst719_fail
	goto unreachable
	goto inst719_fail
inst719_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 722:
			goto inst722_alt
		}
	}
	goto fail

	goto unreachable
	goto inst778
inst778: // alt -> 776, 777
	{
		idx := i*406 + 258
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 778, 0})
	goto inst776
inst778_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst777
	}
	goto unreachable

	goto unreachable
	goto inst721
inst721: // rune "09" -> 731
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst731
		}
	}
	goto inst721_fail
	goto unreachable
	goto inst721_fail
inst721_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 726:
			goto inst726_alt
		}
	}
	goto fail

	goto unreachable
	goto inst722
inst722: // alt -> 718, 720
	{
		idx := i*406 + 259
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 722, 0})
	goto inst718
inst722_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst720
	}
	goto unreachable

	goto unreachable
	goto inst723
inst723: // string "1" -> 724
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst724
		}
	}
	goto inst723_fail
	goto unreachable
	goto inst723_fail
inst723_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 730:
			goto inst730_alt
		}
	}
	goto fail

	goto unreachable
	goto inst777
inst777: // string ":" -> 1116
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1116
		}
	}
	goto inst777_fail
	goto unreachable
	goto inst777_fail
inst777_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 633:
			goto inst633_alt
		case 634:
			goto inst634_alt
		case 635:
			goto inst635_alt
		case 641:
			goto inst641_alt
		case 642:
			goto inst642_alt
		case 643:
			goto inst643_alt
		case 940:
			goto inst940_alt
		}
	}
	goto fail

	goto unreachable
	goto inst725
inst725: // rune "09" -> 731
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst731
		}
	}
	goto inst725_fail
	goto unreachable
	goto inst725_fail
inst725_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 730:
			goto inst730_alt
		}
	}
	goto fail

	goto unreachable
	goto inst726
inst726: // alt -> 717, 723
	{
		idx := i*406 + 260
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 726, 0})
	goto inst717
inst726_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst723
	}
	goto unreachable

	goto unreachable
	goto inst727
inst727: // rune "19" -> 729
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst729
		}
	}
	goto inst727_fail
	goto unreachable
	goto inst727_fail
inst727_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 728:
			goto inst728_alt
		}
	}
	goto fail

	goto unreachable
	goto inst732
inst732: // string "2" -> 737
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst737
		}
	}
	goto inst732_fail
	goto unreachable
	goto inst732_fail
inst732_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 741:
			goto inst741_alt
		}
	}
	goto fail

	goto unreachable
	goto inst729
inst729: // rune "09" -> 731
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst731
		}
	}
	goto inst729_fail
	goto unreachable
	goto inst729_fail
inst729_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 694:
			goto inst694_alt
		case 695:
			goto inst695_alt
		case 696:
			goto inst696_alt
		case 702:
			goto inst702_alt
		case 703:
			goto inst703_alt
		case 704:
			goto inst704_alt
		case 710:
			goto inst710_alt
		case 711:
			goto inst711_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 715:
			goto inst715_alt
		case 728:
			goto inst728_alt
		case 778:
			goto inst778_alt
		}
	}
	goto fail

	goto unreachable
	goto inst730
inst730: // alt -> 726, 728
	{
		idx := i*406 + 261
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 730, 0})
	goto inst726
inst730_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst728
	}
	goto unreachable

	goto unreachable
	goto inst731
inst731: // string "." -> 745
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst745
		}
	}
	goto inst731_fail
	goto unreachable
	goto inst731_fail
inst731_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 694:
			goto inst694_alt
		case 695:
			goto inst695_alt
		case 696:
			goto inst696_alt
		case 702:
			goto inst702_alt
		case 703:
			goto inst703_alt
		case 704:
			goto inst704_alt
		case 710:
			goto inst710_alt
		case 711:
			goto inst711_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 715:
			goto inst715_alt
		case 722:
			goto inst722_alt
		case 726:
			goto inst726_alt
		case 728:
			goto inst728_alt
		case 730:
			goto inst730_alt
		case 778:
			goto inst778_alt
		}
	}
	goto fail

	goto unreachable
	goto inst728
inst728: // alt -> 727, 729
	{
		idx := i*406 + 262
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 728, 0})
	goto inst727
inst728_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst729
	}
	goto unreachable

	goto unreachable
	goto inst739
inst739: // rune "09" -> 740
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst740
		}
	}
	goto inst739_fail
	goto unreachable
	goto inst739_fail
inst739_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 745:
			goto inst745_alt
		}
	}
	goto fail

	goto unreachable
	goto inst662
inst662: // rune "09AFaf" -> 668
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst668
			}
			goto inst662_fail
		}
	}
	goto inst662_fail
	goto unreachable
	goto inst662_fail
inst662_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 687:
			goto inst687_alt
		}
	}
	goto fail

	goto unreachable
	goto inst735
inst735: // rune "04" -> 736
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst736
		}
	}
	goto inst735_fail
	goto unreachable
	goto inst735_fail
inst735_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 741:
			goto inst741_alt
		}
	}
	goto fail

	goto unreachable
	goto inst736
inst736: // rune "09" -> 746
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst746
		}
	}
	goto inst736_fail
	goto unreachable
	goto inst736_fail
inst736_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 741:
			goto inst741_alt
		}
	}
	goto fail

	goto unreachable
	goto inst737
inst737: // alt -> 733, 735
	{
		idx := i*406 + 263
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 737, 0})
	goto inst733
inst737_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst735
	}
	goto unreachable

	goto unreachable
	goto inst738
inst738: // string "1" -> 739
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst739
		}
	}
	goto inst738_fail
	goto unreachable
	goto inst738_fail
inst738_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 745:
			goto inst745_alt
		}
	}
	goto fail

	goto unreachable
	goto inst743
inst743: // alt -> 742, 744
	{
		idx := i*406 + 264
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 743, 0})
	goto inst742
inst743_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst744
	}
	goto unreachable

	goto unreachable
	goto inst740
inst740: // rune "09" -> 746
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst746
		}
	}
	goto inst740_fail
	goto unreachable
	goto inst740_fail
inst740_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 745:
			goto inst745_alt
		}
	}
	goto fail

	goto unreachable
	goto inst741
inst741: // alt -> 732, 738
	{
		idx := i*406 + 265
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 741, 0})
	goto inst732
inst741_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst738
	}
	goto unreachable

	goto unreachable
	goto inst742
inst742: // rune "19" -> 744
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst744
		}
	}
	goto inst742_fail
	goto unreachable
	goto inst742_fail
inst742_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 743:
			goto inst743_alt
		}
	}
	goto fail

	goto unreachable
	goto inst747
inst747: // string "2" -> 752
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst752
		}
	}
	goto inst747_fail
	goto unreachable
	goto inst747_fail
inst747_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 756:
			goto inst756_alt
		}
	}
	goto fail

	goto unreachable
	goto inst744
inst744: // rune "09" -> 746
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst746
		}
	}
	goto inst744_fail
	goto unreachable
	goto inst744_fail
inst744_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 694:
			goto inst694_alt
		case 695:
			goto inst695_alt
		case 696:
			goto inst696_alt
		case 702:
			goto inst702_alt
		case 703:
			goto inst703_alt
		case 704:
			goto inst704_alt
		case 710:
			goto inst710_alt
		case 711:
			goto inst711_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 715:
			goto inst715_alt
		case 722:
			goto inst722_alt
		case 726:
			goto inst726_alt
		case 728:
			goto inst728_alt
		case 730:
			goto inst730_alt
		case 743:
			goto inst743_alt
		case 778:
			goto inst778_alt
		}
	}
	goto fail

	goto unreachable
	goto inst745
inst745: // alt -> 741, 743
	{
		idx := i*406 + 266
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 745, 0})
	goto inst741
inst745_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst743
	}
	goto unreachable

	goto unreachable
	goto inst746
inst746: // string "." -> 760
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst760
		}
	}
	goto inst746_fail
	goto unreachable
	goto inst746_fail
inst746_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 694:
			goto inst694_alt
		case 695:
			goto inst695_alt
		case 696:
			goto inst696_alt
		case 702:
			goto inst702_alt
		case 703:
			goto inst703_alt
		case 704:
			goto inst704_alt
		case 710:
			goto inst710_alt
		case 711:
			goto inst711_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 715:
			goto inst715_alt
		case 722:
			goto inst722_alt
		case 726:
			goto inst726_alt
		case 728:
			goto inst728_alt
		case 730:
			goto inst730_alt
		case 737:
			goto inst737_alt
		case 741:
			goto inst741_alt
		case 743:
			goto inst743_alt
		case 745:
			goto inst745_alt
		case 778:
			goto inst778_alt
		}
	}
	goto fail

	goto unreachable
	goto inst748
inst748: // string "5" -> 749
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst749
		}
	}
	goto inst748_fail
	goto unreachable
	goto inst748_fail
inst748_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 752:
			goto inst752_alt
		}
	}
	goto fail

	goto unreachable
	goto inst733
inst733: // string "5" -> 734
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst734
		}
	}
	goto inst733_fail
	goto unreachable
	goto inst733_fail
inst733_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 737:
			goto inst737_alt
		}
	}
	goto fail

	goto unreachable
	goto inst749
inst749: // rune "05" -> 761
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst761
		}
	}
	goto inst749_fail
	goto unreachable
	goto inst749_fail
inst749_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 752:
			goto inst752_alt
		}
	}
	goto fail

	goto unreachable
	goto inst734
inst734: // rune "05" -> 746
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst746
		}
	}
	goto inst734_fail
	goto unreachable
	goto inst734_fail
inst734_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 737:
			goto inst737_alt
		}
	}
	goto fail

	goto unreachable
	goto inst751
inst751: // rune "09" -> 761
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst761
		}
	}
	goto inst751_fail
	goto unreachable
	goto inst751_fail
inst751_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 756:
			goto inst756_alt
		}
	}
	goto fail

	goto unreachable
	goto inst752
inst752: // alt -> 748, 750
	{
		idx := i*406 + 267
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 752, 0})
	goto inst748
inst752_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst750
	}
	goto unreachable

	goto unreachable
	goto inst766
inst766: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst766_fail
	goto unreachable
	goto inst766_fail
inst766_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 771:
			goto inst771_alt
		}
	}
	goto fail

	goto unreachable
	goto inst757
inst757: // rune "19" -> 759
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst759
		}
	}
	goto inst757_fail
	goto unreachable
	goto inst757_fail
inst757_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 758:
			goto inst758_alt
		}
	}
	goto fail

	goto unreachable
	goto inst754
inst754: // rune "09" -> 755
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst755
		}
	}
	goto inst754_fail
	goto unreachable
	goto inst754_fail
inst754_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 760:
			goto inst760_alt
		}
	}
	goto fail

	goto unreachable
	goto inst755
inst755: // rune "09" -> 761
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst761
		}
	}
	goto inst755_fail
	goto unreachable
	goto inst755_fail
inst755_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 760:
			goto inst760_alt
		}
	}
	goto fail

	goto unreachable
	goto inst756
inst756: // alt -> 747, 753
	{
		idx := i*406 + 268
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 756, 0})
	goto inst747
inst756_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst753
	}
	goto unreachable

	goto unreachable
	goto inst761
inst761: // string "." -> 775
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst775
		}
	}
	goto inst761_fail
	goto unreachable
	goto inst761_fail
inst761_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 694:
			goto inst694_alt
		case 695:
			goto inst695_alt
		case 696:
			goto inst696_alt
		case 702:
			goto inst702_alt
		case 703:
			goto inst703_alt
		case 704:
			goto inst704_alt
		case 710:
			goto inst710_alt
		case 711:
			goto inst711_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 715:
			goto inst715_alt
		case 722:
			goto inst722_alt
		case 726:
			goto inst726_alt
		case 728:
			goto inst728_alt
		case 730:
			goto inst730_alt
		case 737:
			goto inst737_alt
		case 741:
			goto inst741_alt
		case 743:
			goto inst743_alt
		case 745:
			goto inst745_alt
		case 752:
			goto inst752_alt
		case 756:
			goto inst756_alt
		case 758:
			goto inst758_alt
		case 760:
			goto inst760_alt
		case 778:
			goto inst778_alt
		}
	}
	goto fail

	goto unreachable
	goto inst750
inst750: // rune "04" -> 751
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst751
		}
	}
	goto inst750_fail
	goto unreachable
	goto inst750_fail
inst750_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 756:
			goto inst756_alt
		}
	}
	goto fail

	goto unreachable
	goto inst759
inst759: // rune "09" -> 761
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst761
		}
	}
	goto inst759_fail
	goto unreachable
	goto inst759_fail
inst759_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 694:
			goto inst694_alt
		case 695:
			goto inst695_alt
		case 696:
			goto inst696_alt
		case 702:
			goto inst702_alt
		case 703:
			goto inst703_alt
		case 704:
			goto inst704_alt
		case 710:
			goto inst710_alt
		case 711:
			goto inst711_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 715:
			goto inst715_alt
		case 722:
			goto inst722_alt
		case 726:
			goto inst726_alt
		case 728:
			goto inst728_alt
		case 730:
			goto inst730_alt
		case 737:
			goto inst737_alt
		case 741:
			goto inst741_alt
		case 743:
			goto inst743_alt
		case 745:
			goto inst745_alt
		case 758:
			goto inst758_alt
		case 778:
			goto inst778_alt
		}
	}
	goto fail

	goto unreachable
	goto inst753
inst753: // string "1" -> 754
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst754
		}
	}
	goto inst753_fail
	goto unreachable
	goto inst753_fail
inst753_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 760:
			goto inst760_alt
		}
	}
	goto fail

	goto unreachable
	goto inst764
inst764: // rune "05" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1116
		}
	}
	goto inst764_fail
	goto unreachable
	goto inst764_fail
inst764_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 767:
			goto inst767_alt
		}
	}
	goto fail

	goto unreachable
	goto inst770
inst770: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst770_fail
	goto unreachable
	goto inst770_fail
inst770_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 775:
			goto inst775_alt
		}
	}
	goto fail

	goto unreachable
	goto inst763
inst763: // string "5" -> 764
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst764
		}
	}
	goto inst763_fail
	goto unreachable
	goto inst763_fail
inst763_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 767:
			goto inst767_alt
		}
	}
	goto fail

	goto unreachable
	goto inst720
inst720: // rune "04" -> 721
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst721
		}
	}
	goto inst720_fail
	goto unreachable
	goto inst720_fail
inst720_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 726:
			goto inst726_alt
		}
	}
	goto fail

	goto unreachable
	goto inst765
inst765: // rune "04" -> 766
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst766
		}
	}
	goto inst765_fail
	goto unreachable
	goto inst765_fail
inst765_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 771:
			goto inst771_alt
		}
	}
	goto fail

	goto unreachable
	goto inst767
inst767: // alt -> 763, 765
	{
		idx := i*406 + 269
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 767, 0})
	goto inst763
inst767_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst765
	}
	goto unreachable

	goto unreachable
	goto inst768
inst768: // string "1" -> 769
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst769
		}
	}
	goto inst768_fail
	goto unreachable
	goto inst768_fail
inst768_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 775:
			goto inst775_alt
		}
	}
	goto fail

	goto unreachable
	goto inst774
inst774: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst774_fail
	goto unreachable
	goto inst774_fail
inst774_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 694:
			goto inst694_alt
		case 695:
			goto inst695_alt
		case 696:
			goto inst696_alt
		case 702:
			goto inst702_alt
		case 703:
			goto inst703_alt
		case 704:
			goto inst704_alt
		case 710:
			goto inst710_alt
		case 711:
			goto inst711_alt
		case 712:
			goto inst712_alt
		case 713:
			goto inst713_alt
		case 714:
			goto inst714_alt
		case 715:
			goto inst715_alt
		case 722:
			goto inst722_alt
		case 726:
			goto inst726_alt
		case 728:
			goto inst728_alt
		case 730:
			goto inst730_alt
		case 737:
			goto inst737_alt
		case 741:
			goto inst741_alt
		case 743:
			goto inst743_alt
		case 745:
			goto inst745_alt
		case 752:
			goto inst752_alt
		case 756:
			goto inst756_alt
		case 758:
			goto inst758_alt
		case 760:
			goto inst760_alt
		case 773:
			goto inst773_alt
		case 778:
			goto inst778_alt
		}
	}
	goto fail

	goto unreachable
	goto inst769
inst769: // rune "09" -> 770
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst770
		}
	}
	goto inst769_fail
	goto unreachable
	goto inst769_fail
inst769_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 775:
			goto inst775_alt
		}
	}
	goto fail

	goto unreachable
	goto inst771
inst771: // alt -> 762, 768
	{
		idx := i*406 + 270
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 771, 0})
	goto inst762
inst771_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst768
	}
	goto unreachable

	goto unreachable
	goto inst772
inst772: // rune "19" -> 774
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst774
		}
	}
	goto inst772_fail
	goto unreachable
	goto inst772_fail
inst772_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 773:
			goto inst773_alt
		}
	}
	goto fail

	goto unreachable
	goto inst760
inst760: // alt -> 756, 758
	{
		idx := i*406 + 271
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 760, 0})
	goto inst756
inst760_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst758
	}
	goto unreachable

	goto unreachable
	goto inst773
inst773: // alt -> 772, 774
	{
		idx := i*406 + 272
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 773, 0})
	goto inst772
inst773_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst774
	}
	goto unreachable

	goto unreachable
	goto inst775
inst775: // alt -> 771, 773
	{
		idx := i*406 + 273
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 775, 0})
	goto inst771
inst775_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst773
	}
	goto unreachable

	goto unreachable
	goto inst703
inst703: // alt -> 700, 713
	{
		idx := i*406 + 274
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 703, 0})
	goto inst700
inst703_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst713
	}
	goto unreachable

	goto unreachable
	goto inst758
inst758: // alt -> 757, 759
	{
		idx := i*406 + 275
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 758, 0})
	goto inst757
inst758_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst759
	}
	goto unreachable

	goto unreachable
	goto inst762
inst762: // string "2" -> 767
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst767
		}
	}
	goto inst762_fail
	goto unreachable
	goto inst762_fail
inst762_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 771:
			goto inst771_alt
		}
	}
	goto fail

	goto unreachable
	goto inst683
inst683: // alt -> 680, 1116
	{
		idx := i*406 + 276
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 683, 0})
	goto inst680
inst683_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst840
inst840: // alt -> 796, 1116
	{
		idx := i*406 + 277
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 840, 0})
	goto inst796
inst840_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst786
inst786: // alt -> 781, 787
	{
		idx := i*406 + 278
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 786, 0})
	goto inst781
inst786_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst787
	}
	goto unreachable

	goto unreachable
	goto inst780
inst780: // rune "09AFaf" -> 786
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst786
			}
			goto inst780_fail
		}
	}
	goto inst780_fail
	goto unreachable
	goto inst780_fail
inst780_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1112:
			goto inst1112_alt
		}
	}
	goto fail

	goto unreachable
	goto inst781
inst781: // rune "09AFaf" -> 785
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst785
			}
			goto inst781_fail
		}
	}
	goto inst781_fail
	goto unreachable
	goto inst781_fail
inst781_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 786:
			goto inst786_alt
		}
	}
	goto fail

	goto unreachable
	goto inst782
inst782: // rune "09AFaf" -> 784
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst784
			}
			goto inst782_fail
		}
	}
	goto inst782_fail
	goto unreachable
	goto inst782_fail
inst782_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 785:
			goto inst785_alt
		}
	}
	goto fail

	goto unreachable
	goto inst783
inst783: // rune "09AFaf" -> 787
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst787
			}
			goto inst783_fail
		}
	}
	goto inst783_fail
	goto unreachable
	goto inst783_fail
inst783_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 784:
			goto inst784_alt
		}
	}
	goto fail

	goto unreachable
	goto inst784
inst784: // alt -> 783, 787
	{
		idx := i*406 + 279
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 784, 0})
	goto inst783
inst784_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst787
	}
	goto unreachable

	goto unreachable
	goto inst785
inst785: // alt -> 782, 787
	{
		idx := i*406 + 280
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 785, 0})
	goto inst782
inst785_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst787
	}
	goto unreachable

	goto unreachable
	goto inst787
inst787: // string ":" -> 939
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst939
		}
	}
	goto inst787_fail
	goto unreachable
	goto inst787_fail
inst787_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 784:
			goto inst784_alt
		case 785:
			goto inst785_alt
		case 786:
			goto inst786_alt
		case 1112:
			goto inst1112_alt
		}
	}
	goto fail

	goto unreachable
	goto inst839
inst839: // alt -> 804, 1116
	{
		idx := i*406 + 281
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 839, 0})
	goto inst804
inst839_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst788
inst788: // string ":" -> 789
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst789
		}
	}
	goto inst788_fail
	goto unreachable
	goto inst788_fail
inst788_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 937:
			goto inst937_alt
		}
	}
	goto fail

	goto unreachable
	goto inst789
inst789: // rune "09AFaf" -> 795
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst795
			}
			goto inst789_fail
		}
	}
	goto inst789_fail
	goto unreachable
	goto inst789_fail
inst789_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 937:
			goto inst937_alt
		}
	}
	goto fail

	goto unreachable
	goto inst790
inst790: // rune "09AFaf" -> 794
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst794
			}
			goto inst790_fail
		}
	}
	goto inst790_fail
	goto unreachable
	goto inst790_fail
inst790_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 795:
			goto inst795_alt
		}
	}
	goto fail

	goto unreachable
	goto inst791
inst791: // rune "09AFaf" -> 793
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst793
			}
			goto inst791_fail
		}
	}
	goto inst791_fail
	goto unreachable
	goto inst791_fail
inst791_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 794:
			goto inst794_alt
		}
	}
	goto fail

	goto unreachable
	goto inst792
inst792: // rune "09AFaf" -> 840
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst840
			}
			goto inst792_fail
		}
	}
	goto inst792_fail
	goto unreachable
	goto inst792_fail
inst792_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 793:
			goto inst793_alt
		}
	}
	goto fail

	goto unreachable
	goto inst793
inst793: // alt -> 792, 840
	{
		idx := i*406 + 282
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 793, 0})
	goto inst792
inst793_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst840
	}
	goto unreachable

	goto unreachable
	goto inst794
inst794: // alt -> 791, 840
	{
		idx := i*406 + 283
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 794, 0})
	goto inst791
inst794_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst840
	}
	goto unreachable

	goto unreachable
	goto inst795
inst795: // alt -> 790, 840
	{
		idx := i*406 + 284
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 795, 0})
	goto inst790
inst795_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst840
	}
	goto unreachable

	goto unreachable
	goto inst796
inst796: // string ":" -> 797
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst797
		}
	}
	goto inst796_fail
	goto unreachable
	goto inst796_fail
inst796_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 840:
			goto inst840_alt
		}
	}
	goto fail

	goto unreachable
	goto inst797
inst797: // rune "09AFaf" -> 803
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst803
			}
			goto inst797_fail
		}
	}
	goto inst797_fail
	goto unreachable
	goto inst797_fail
inst797_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 840:
			goto inst840_alt
		}
	}
	goto fail

	goto unreachable
	goto inst798
inst798: // rune "09AFaf" -> 802
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst802
			}
			goto inst798_fail
		}
	}
	goto inst798_fail
	goto unreachable
	goto inst798_fail
inst798_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 803:
			goto inst803_alt
		}
	}
	goto fail

	goto unreachable
	goto inst799
inst799: // rune "09AFaf" -> 801
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst801
			}
			goto inst799_fail
		}
	}
	goto inst799_fail
	goto unreachable
	goto inst799_fail
inst799_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 802:
			goto inst802_alt
		}
	}
	goto fail

	goto unreachable
	goto inst800
inst800: // rune "09AFaf" -> 839
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst839
			}
			goto inst800_fail
		}
	}
	goto inst800_fail
	goto unreachable
	goto inst800_fail
inst800_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 801:
			goto inst801_alt
		}
	}
	goto fail

	goto unreachable
	goto inst801
inst801: // alt -> 800, 839
	{
		idx := i*406 + 285
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 801, 0})
	goto inst800
inst801_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst839
	}
	goto unreachable

	goto unreachable
	goto inst802
inst802: // alt -> 799, 839
	{
		idx := i*406 + 286
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 802, 0})
	goto inst799
inst802_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst839
	}
	goto unreachable

	goto unreachable
	goto inst803
inst803: // alt -> 798, 839
	{
		idx := i*406 + 287
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 803, 0})
	goto inst798
inst803_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst839
	}
	goto unreachable

	goto unreachable
	goto inst804
inst804: // string ":" -> 805
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst805
		}
	}
	goto inst804_fail
	goto unreachable
	goto inst804_fail
inst804_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 839:
			goto inst839_alt
		}
	}
	goto fail

	goto unreachable
	goto inst805
inst805: // rune "09AFaf" -> 811
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst811
			}
			goto inst805_fail
		}
	}
	goto inst805_fail
	goto unreachable
	goto inst805_fail
inst805_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 839:
			goto inst839_alt
		}
	}
	goto fail

	goto unreachable
	goto inst806
inst806: // rune "09AFaf" -> 810
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst810
			}
			goto inst806_fail
		}
	}
	goto inst806_fail
	goto unreachable
	goto inst806_fail
inst806_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 811:
			goto inst811_alt
		}
	}
	goto fail

	goto unreachable
	goto inst807
inst807: // rune "09AFaf" -> 809
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst809
			}
			goto inst807_fail
		}
	}
	goto inst807_fail
	goto unreachable
	goto inst807_fail
inst807_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 810:
			goto inst810_alt
		}
	}
	goto fail

	goto unreachable
	goto inst808
inst808: // rune "09AFaf" -> 838
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst838
			}
			goto inst808_fail
		}
	}
	goto inst808_fail
	goto unreachable
	goto inst808_fail
inst808_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 809:
			goto inst809_alt
		}
	}
	goto fail

	goto unreachable
	goto inst809
inst809: // alt -> 808, 838
	{
		idx := i*406 + 288
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 809, 0})
	goto inst808
inst809_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst838
	}
	goto unreachable

	goto unreachable
	goto inst810
inst810: // alt -> 807, 838
	{
		idx := i*406 + 289
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 810, 0})
	goto inst807
inst810_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst838
	}
	goto unreachable

	goto unreachable
	goto inst811
inst811: // alt -> 806, 838
	{
		idx := i*406 + 290
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 811, 0})
	goto inst806
inst811_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst838
	}
	goto unreachable

	goto unreachable
	goto inst812
inst812: // string ":" -> 813
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst813
		}
	}
	goto inst812_fail
	goto unreachable
	goto inst812_fail
inst812_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 838:
			goto inst838_alt
		}
	}
	goto fail

	goto unreachable
	goto inst813
inst813: // rune "09AFaf" -> 819
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst819
			}
			goto inst813_fail
		}
	}
	goto inst813_fail
	goto unreachable
	goto inst813_fail
inst813_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 838:
			goto inst838_alt
		}
	}
	goto fail

	goto unreachable
	goto inst814
inst814: // rune "09AFaf" -> 818
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst818
			}
			goto inst814_fail
		}
	}
	goto inst814_fail
	goto unreachable
	goto inst814_fail
inst814_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 819:
			goto inst819_alt
		}
	}
	goto fail

	goto unreachable
	goto inst837
inst837: // alt -> 820, 1116
	{
		idx := i*406 + 291
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 837, 0})
	goto inst820
inst837_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst816
inst816: // rune "09AFaf" -> 837
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst837
			}
			goto inst816_fail
		}
	}
	goto inst816_fail
	goto unreachable
	goto inst816_fail
inst816_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 817:
			goto inst817_alt
		}
	}
	goto fail

	goto unreachable
	goto inst838
inst838: // alt -> 812, 1116
	{
		idx := i*406 + 292
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 838, 0})
	goto inst812
inst838_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst818
inst818: // alt -> 815, 837
	{
		idx := i*406 + 293
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 818, 0})
	goto inst815
inst818_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst837
	}
	goto unreachable

	goto unreachable
	goto inst819
inst819: // alt -> 814, 837
	{
		idx := i*406 + 294
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 819, 0})
	goto inst814
inst819_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst837
	}
	goto unreachable

	goto unreachable
	goto inst820
inst820: // string ":" -> 821
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst821
		}
	}
	goto inst820_fail
	goto unreachable
	goto inst820_fail
inst820_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 837:
			goto inst837_alt
		}
	}
	goto fail

	goto unreachable
	goto inst821
inst821: // rune "09AFaf" -> 827
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst827
			}
			goto inst821_fail
		}
	}
	goto inst821_fail
	goto unreachable
	goto inst821_fail
inst821_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 837:
			goto inst837_alt
		}
	}
	goto fail

	goto unreachable
	goto inst822
inst822: // rune "09AFaf" -> 826
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst826
			}
			goto inst822_fail
		}
	}
	goto inst822_fail
	goto unreachable
	goto inst822_fail
inst822_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 827:
			goto inst827_alt
		}
	}
	goto fail

	goto unreachable
	goto inst823
inst823: // rune "09AFaf" -> 825
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst825
			}
			goto inst823_fail
		}
	}
	goto inst823_fail
	goto unreachable
	goto inst823_fail
inst823_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 826:
			goto inst826_alt
		}
	}
	goto fail

	goto unreachable
	goto inst824
inst824: // rune "09AFaf" -> 836
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst836
			}
			goto inst824_fail
		}
	}
	goto inst824_fail
	goto unreachable
	goto inst824_fail
inst824_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 825:
			goto inst825_alt
		}
	}
	goto fail

	goto unreachable
	goto inst825
inst825: // alt -> 824, 836
	{
		idx := i*406 + 295
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 825, 0})
	goto inst824
inst825_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst836
	}
	goto unreachable

	goto unreachable
	goto inst826
inst826: // alt -> 823, 836
	{
		idx := i*406 + 296
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 826, 0})
	goto inst823
inst826_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst836
	}
	goto unreachable

	goto unreachable
	goto inst827
inst827: // alt -> 822, 836
	{
		idx := i*406 + 297
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 827, 0})
	goto inst822
inst827_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst836
	}
	goto unreachable

	goto unreachable
	goto inst828
inst828: // string ":" -> 829
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst829
		}
	}
	goto inst828_fail
	goto unreachable
	goto inst828_fail
inst828_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 836:
			goto inst836_alt
		}
	}
	goto fail

	goto unreachable
	goto inst829
inst829: // rune "09AFaf" -> 835
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst835
			}
			goto inst829_fail
		}
	}
	goto inst829_fail
	goto unreachable
	goto inst829_fail
inst829_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 836:
			goto inst836_alt
		}
	}
	goto fail

	goto unreachable
	goto inst830
inst830: // rune "09AFaf" -> 834
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst834
			}
			goto inst830_fail
		}
	}
	goto inst830_fail
	goto unreachable
	goto inst830_fail
inst830_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 835:
			goto inst835_alt
		}
	}
	goto fail

	goto unreachable
	goto inst831
inst831: // rune "09AFaf" -> 833
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst833
			}
			goto inst831_fail
		}
	}
	goto inst831_fail
	goto unreachable
	goto inst831_fail
inst831_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 834:
			goto inst834_alt
		}
	}
	goto fail

	goto unreachable
	goto inst832
inst832: // rune "09AFaf" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1116
			}
			goto inst832_fail
		}
	}
	goto inst832_fail
	goto unreachable
	goto inst832_fail
inst832_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 833:
			goto inst833_alt
		}
	}
	goto fail

	goto unreachable
	goto inst833
inst833: // alt -> 832, 1116
	{
		idx := i*406 + 298
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 833, 0})
	goto inst832
inst833_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst817
inst817: // alt -> 816, 837
	{
		idx := i*406 + 299
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 817, 0})
	goto inst816
inst817_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst837
	}
	goto unreachable

	goto unreachable
	goto inst835
inst835: // alt -> 830, 1116
	{
		idx := i*406 + 300
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 835, 0})
	goto inst830
inst835_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst836
inst836: // alt -> 828, 1116
	{
		idx := i*406 + 301
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 836, 0})
	goto inst828
inst836_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst851
inst851: // rune "09AFaf" -> 855
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst855
			}
			goto inst851_fail
		}
	}
	goto inst851_fail
	goto unreachable
	goto inst851_fail
inst851_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 856:
			goto inst856_alt
		}
	}
	goto fail

	goto unreachable
	goto inst834
inst834: // alt -> 831, 1116
	{
		idx := i*406 + 302
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 834, 0})
	goto inst831
inst834_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst847
inst847: // alt -> 844, 875
	{
		idx := i*406 + 303
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 847, 0})
	goto inst844
inst847_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst875
	}
	goto unreachable

	goto unreachable
	goto inst875
inst875: // alt -> 849, 877
	{
		idx := i*406 + 304
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 875, 0})
	goto inst849
inst875_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst877
	}
	goto unreachable

	goto unreachable
	goto inst841
inst841: // string ":" -> 842
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst842
		}
	}
	goto inst841_fail
	goto unreachable
	goto inst841_fail
inst841_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 876:
			goto inst876_alt
		}
	}
	goto fail

	goto unreachable
	goto inst842
inst842: // rune "09AFaf" -> 848
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst848
			}
			goto inst842_fail
		}
	}
	goto inst842_fail
	goto unreachable
	goto inst842_fail
inst842_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 876:
			goto inst876_alt
		}
	}
	goto fail

	goto unreachable
	goto inst843
inst843: // rune "09AFaf" -> 847
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst847
			}
			goto inst843_fail
		}
	}
	goto inst843_fail
	goto unreachable
	goto inst843_fail
inst843_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 848:
			goto inst848_alt
		}
	}
	goto fail

	goto unreachable
	goto inst844
inst844: // rune "09AFaf" -> 846
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst846
			}
			goto inst844_fail
		}
	}
	goto inst844_fail
	goto unreachable
	goto inst844_fail
inst844_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 847:
			goto inst847_alt
		}
	}
	goto fail

	goto unreachable
	goto inst845
inst845: // rune "09AFaf" -> 875
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst875
			}
			goto inst845_fail
		}
	}
	goto inst845_fail
	goto unreachable
	goto inst845_fail
inst845_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 846:
			goto inst846_alt
		}
	}
	goto fail

	goto unreachable
	goto inst846
inst846: // alt -> 845, 875
	{
		idx := i*406 + 305
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 846, 0})
	goto inst845
inst846_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst875
	}
	goto unreachable

	goto unreachable
	goto inst848
inst848: // alt -> 843, 875
	{
		idx := i*406 + 306
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 848, 0})
	goto inst843
inst848_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst875
	}
	goto unreachable

	goto unreachable
	goto inst874
inst874: // alt -> 857, 877
	{
		idx := i*406 + 307
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 874, 0})
	goto inst857
inst874_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst877
	}
	goto unreachable

	goto unreachable
	goto inst849
inst849: // string ":" -> 850
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst850
		}
	}
	goto inst849_fail
	goto unreachable
	goto inst849_fail
inst849_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 875:
			goto inst875_alt
		}
	}
	goto fail

	goto unreachable
	goto inst850
inst850: // rune "09AFaf" -> 856
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst856
			}
			goto inst850_fail
		}
	}
	goto inst850_fail
	goto unreachable
	goto inst850_fail
inst850_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 875:
			goto inst875_alt
		}
	}
	goto fail

	goto unreachable
	goto inst815
inst815: // rune "09AFaf" -> 817
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst817
			}
			goto inst815_fail
		}
	}
	goto inst815_fail
	goto unreachable
	goto inst815_fail
inst815_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 818:
			goto inst818_alt
		}
	}
	goto fail

	goto unreachable
	goto inst852
inst852: // rune "09AFaf" -> 854
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst854
			}
			goto inst852_fail
		}
	}
	goto inst852_fail
	goto unreachable
	goto inst852_fail
inst852_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 855:
			goto inst855_alt
		}
	}
	goto fail

	goto unreachable
	goto inst853
inst853: // rune "09AFaf" -> 874
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst874
			}
			goto inst853_fail
		}
	}
	goto inst853_fail
	goto unreachable
	goto inst853_fail
inst853_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 854:
			goto inst854_alt
		}
	}
	goto fail

	goto unreachable
	goto inst854
inst854: // alt -> 853, 874
	{
		idx := i*406 + 308
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 854, 0})
	goto inst853
inst854_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst874
	}
	goto unreachable

	goto unreachable
	goto inst855
inst855: // alt -> 852, 874
	{
		idx := i*406 + 309
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 855, 0})
	goto inst852
inst855_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst874
	}
	goto unreachable

	goto unreachable
	goto inst856
inst856: // alt -> 851, 874
	{
		idx := i*406 + 310
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 856, 0})
	goto inst851
inst856_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst874
	}
	goto unreachable

	goto unreachable
	goto inst857
inst857: // string ":" -> 858
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst858
		}
	}
	goto inst857_fail
	goto unreachable
	goto inst857_fail
inst857_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 874:
			goto inst874_alt
		}
	}
	goto fail

	goto unreachable
	goto inst858
inst858: // rune "09AFaf" -> 864
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst864
			}
			goto inst858_fail
		}
	}
	goto inst858_fail
	goto unreachable
	goto inst858_fail
inst858_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 874:
			goto inst874_alt
		}
	}
	goto fail

	goto unreachable
	goto inst859
inst859: // rune "09AFaf" -> 863
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst863
			}
			goto inst859_fail
		}
	}
	goto inst859_fail
	goto unreachable
	goto inst859_fail
inst859_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 864:
			goto inst864_alt
		}
	}
	goto fail

	goto unreachable
	goto inst860
inst860: // rune "09AFaf" -> 862
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst862
			}
			goto inst860_fail
		}
	}
	goto inst860_fail
	goto unreachable
	goto inst860_fail
inst860_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 863:
			goto inst863_alt
		}
	}
	goto fail

	goto unreachable
	goto inst861
inst861: // rune "09AFaf" -> 873
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst873
			}
			goto inst861_fail
		}
	}
	goto inst861_fail
	goto unreachable
	goto inst861_fail
inst861_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 862:
			goto inst862_alt
		}
	}
	goto fail

	goto unreachable
	goto inst862
inst862: // alt -> 861, 873
	{
		idx := i*406 + 311
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 862, 0})
	goto inst861
inst862_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst873
	}
	goto unreachable

	goto unreachable
	goto inst863
inst863: // alt -> 860, 873
	{
		idx := i*406 + 312
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 863, 0})
	goto inst860
inst863_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst873
	}
	goto unreachable

	goto unreachable
	goto inst864
inst864: // alt -> 859, 873
	{
		idx := i*406 + 313
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 864, 0})
	goto inst859
inst864_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst873
	}
	goto unreachable

	goto unreachable
	goto inst865
inst865: // string ":" -> 866
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst866
		}
	}
	goto inst865_fail
	goto unreachable
	goto inst865_fail
inst865_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 873:
			goto inst873_alt
		}
	}
	goto fail

	goto unreachable
	goto inst866
inst866: // rune "09AFaf" -> 872
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst872
			}
			goto inst866_fail
		}
	}
	goto inst866_fail
	goto unreachable
	goto inst866_fail
inst866_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 873:
			goto inst873_alt
		}
	}
	goto fail

	goto unreachable
	goto inst867
inst867: // rune "09AFaf" -> 871
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst871
			}
			goto inst867_fail
		}
	}
	goto inst867_fail
	goto unreachable
	goto inst867_fail
inst867_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 872:
			goto inst872_alt
		}
	}
	goto fail

	goto unreachable
	goto inst868
inst868: // rune "09AFaf" -> 870
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst870
			}
			goto inst868_fail
		}
	}
	goto inst868_fail
	goto unreachable
	goto inst868_fail
inst868_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 871:
			goto inst871_alt
		}
	}
	goto fail

	goto unreachable
	goto inst869
inst869: // rune "09AFaf" -> 877
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst877
			}
			goto inst869_fail
		}
	}
	goto inst869_fail
	goto unreachable
	goto inst869_fail
inst869_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 870:
			goto inst870_alt
		}
	}
	goto fail

	goto unreachable
	goto inst870
inst870: // alt -> 869, 877
	{
		idx := i*406 + 314
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 870, 0})
	goto inst869
inst870_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst877
	}
	goto unreachable

	goto unreachable
	goto inst871
inst871: // alt -> 868, 877
	{
		idx := i*406 + 315
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 871, 0})
	goto inst868
inst871_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst877
	}
	goto unreachable

	goto unreachable
	goto inst872
inst872: // alt -> 867, 877
	{
		idx := i*406 + 316
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 872, 0})
	goto inst867
inst872_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst877
	}
	goto unreachable

	goto unreachable
	goto inst873
inst873: // alt -> 865, 877
	{
		idx := i*406 + 317
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 873, 0})
	goto inst865
inst873_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst877
	}
	goto unreachable

	goto unreachable
	goto inst877
inst877: // string ":" -> 891
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst891
		}
	}
	goto inst877_fail
	goto unreachable
	goto inst877_fail
inst877_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 846:
			goto inst846_alt
		case 847:
			goto inst847_alt
		case 848:
			goto inst848_alt
		case 854:
			goto inst854_alt
		case 855:
			goto inst855_alt
		case 856:
			goto inst856_alt
		case 862:
			goto inst862_alt
		case 863:
			goto inst863_alt
		case 864:
			goto inst864_alt
		case 870:
			goto inst870_alt
		case 871:
			goto inst871_alt
		case 872:
			goto inst872_alt
		case 873:
			goto inst873_alt
		case 874:
			goto inst874_alt
		case 875:
			goto inst875_alt
		case 876:
			goto inst876_alt
		case 939:
			goto inst939_alt
		}
	}
	goto fail

	goto unreachable
	goto inst937
inst937: // alt -> 788, 876
	{
		idx := i*406 + 318
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 937, 0})
	goto inst788
inst937_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst876
	}
	goto unreachable

	goto unreachable
	goto inst876
inst876: // alt -> 841, 877
	{
		idx := i*406 + 319
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 876, 0})
	goto inst841
inst876_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst877
	}
	goto unreachable

	goto unreachable
	goto inst883
inst883: // alt -> 879, 881
	{
		idx := i*406 + 320
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 883, 0})
	goto inst879
inst883_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst881
	}
	goto unreachable

	goto unreachable
	goto inst878
inst878: // string "2" -> 883
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst883
		}
	}
	goto inst878_fail
	goto unreachable
	goto inst878_fail
inst878_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 887:
			goto inst887_alt
		}
	}
	goto fail

	goto unreachable
	goto inst879
inst879: // string "5" -> 880
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst880
		}
	}
	goto inst879_fail
	goto unreachable
	goto inst879_fail
inst879_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 883:
			goto inst883_alt
		}
	}
	goto fail

	goto unreachable
	goto inst880
inst880: // rune "05" -> 892
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst892
		}
	}
	goto inst880_fail
	goto unreachable
	goto inst880_fail
inst880_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 883:
			goto inst883_alt
		}
	}
	goto fail

	goto unreachable
	goto inst881
inst881: // rune "04" -> 882
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst882
		}
	}
	goto inst881_fail
	goto unreachable
	goto inst881_fail
inst881_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 887:
			goto inst887_alt
		}
	}
	goto fail

	goto unreachable
	goto inst882
inst882: // rune "09" -> 892
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst892
		}
	}
	goto inst882_fail
	goto unreachable
	goto inst882_fail
inst882_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 887:
			goto inst887_alt
		}
	}
	goto fail

	goto unreachable
	goto inst887
inst887: // alt -> 878, 884
	{
		idx := i*406 + 321
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 887, 0})
	goto inst878
inst887_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst884
	}
	goto unreachable

	goto unreachable
	goto inst884
inst884: // string "1" -> 885
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst885
		}
	}
	goto inst884_fail
	goto unreachable
	goto inst884_fail
inst884_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 891:
			goto inst891_alt
		}
	}
	goto fail

	goto unreachable
	goto inst885
inst885: // rune "09" -> 886
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst886
		}
	}
	goto inst885_fail
	goto unreachable
	goto inst885_fail
inst885_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 891:
			goto inst891_alt
		}
	}
	goto fail

	goto unreachable
	goto inst886
inst886: // rune "09" -> 892
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst892
		}
	}
	goto inst886_fail
	goto unreachable
	goto inst886_fail
inst886_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 891:
			goto inst891_alt
		}
	}
	goto fail

	goto unreachable
	goto inst891
inst891: // alt -> 887, 889
	{
		idx := i*406 + 322
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 891, 0})
	goto inst887
inst891_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst889
	}
	goto unreachable

	goto unreachable
	goto inst888
inst888: // rune "19" -> 890
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst890
		}
	}
	goto inst888_fail
	goto unreachable
	goto inst888_fail
inst888_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 889:
			goto inst889_alt
		}
	}
	goto fail

	goto unreachable
	goto inst889
inst889: // alt -> 888, 890
	{
		idx := i*406 + 323
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 889, 0})
	goto inst888
inst889_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst890
	}
	goto unreachable

	goto unreachable
	goto inst890
inst890: // rune "09" -> 892
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst892
		}
	}
	goto inst890_fail
	goto unreachable
	goto inst890_fail
inst890_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 846:
			goto inst846_alt
		case 847:
			goto inst847_alt
		case 848:
			goto inst848_alt
		case 854:
			goto inst854_alt
		case 855:
			goto inst855_alt
		case 856:
			goto inst856_alt
		case 862:
			goto inst862_alt
		case 863:
			goto inst863_alt
		case 864:
			goto inst864_alt
		case 870:
			goto inst870_alt
		case 871:
			goto inst871_alt
		case 872:
			goto inst872_alt
		case 873:
			goto inst873_alt
		case 874:
			goto inst874_alt
		case 875:
			goto inst875_alt
		case 876:
			goto inst876_alt
		case 889:
			goto inst889_alt
		case 939:
			goto inst939_alt
		}
	}
	goto fail

	goto unreachable
	goto inst892
inst892: // string "." -> 906
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst906
		}
	}
	goto inst892_fail
	goto unreachable
	goto inst892_fail
inst892_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 846:
			goto inst846_alt
		case 847:
			goto inst847_alt
		case 848:
			goto inst848_alt
		case 854:
			goto inst854_alt
		case 855:
			goto inst855_alt
		case 856:
			goto inst856_alt
		case 862:
			goto inst862_alt
		case 863:
			goto inst863_alt
		case 864:
			goto inst864_alt
		case 870:
			goto inst870_alt
		case 871:
			goto inst871_alt
		case 872:
			goto inst872_alt
		case 873:
			goto inst873_alt
		case 874:
			goto inst874_alt
		case 875:
			goto inst875_alt
		case 876:
			goto inst876_alt
		case 883:
			goto inst883_alt
		case 887:
			goto inst887_alt
		case 889:
			goto inst889_alt
		case 891:
			goto inst891_alt
		case 939:
			goto inst939_alt
		}
	}
	goto fail

	goto unreachable
	goto inst898
inst898: // alt -> 894, 896
	{
		idx := i*406 + 324
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 898, 0})
	goto inst894
inst898_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst896
	}
	goto unreachable

	goto unreachable
	goto inst893
inst893: // string "2" -> 898
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst898
		}
	}
	goto inst893_fail
	goto unreachable
	goto inst893_fail
inst893_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 902:
			goto inst902_alt
		}
	}
	goto fail

	goto unreachable
	goto inst894
inst894: // string "5" -> 895
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst895
		}
	}
	goto inst894_fail
	goto unreachable
	goto inst894_fail
inst894_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 898:
			goto inst898_alt
		}
	}
	goto fail

	goto unreachable
	goto inst895
inst895: // rune "05" -> 907
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst907
		}
	}
	goto inst895_fail
	goto unreachable
	goto inst895_fail
inst895_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 898:
			goto inst898_alt
		}
	}
	goto fail

	goto unreachable
	goto inst896
inst896: // rune "04" -> 897
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst897
		}
	}
	goto inst896_fail
	goto unreachable
	goto inst896_fail
inst896_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 902:
			goto inst902_alt
		}
	}
	goto fail

	goto unreachable
	goto inst897
inst897: // rune "09" -> 907
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst907
		}
	}
	goto inst897_fail
	goto unreachable
	goto inst897_fail
inst897_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 902:
			goto inst902_alt
		}
	}
	goto fail

	goto unreachable
	goto inst902
inst902: // alt -> 893, 899
	{
		idx := i*406 + 325
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 902, 0})
	goto inst893
inst902_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst899
	}
	goto unreachable

	goto unreachable
	goto inst899
inst899: // string "1" -> 900
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst900
		}
	}
	goto inst899_fail
	goto unreachable
	goto inst899_fail
inst899_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 906:
			goto inst906_alt
		}
	}
	goto fail

	goto unreachable
	goto inst900
inst900: // rune "09" -> 901
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst901
		}
	}
	goto inst900_fail
	goto unreachable
	goto inst900_fail
inst900_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 906:
			goto inst906_alt
		}
	}
	goto fail

	goto unreachable
	goto inst901
inst901: // rune "09" -> 907
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst907
		}
	}
	goto inst901_fail
	goto unreachable
	goto inst901_fail
inst901_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 906:
			goto inst906_alt
		}
	}
	goto fail

	goto unreachable
	goto inst906
inst906: // alt -> 902, 904
	{
		idx := i*406 + 326
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 906, 0})
	goto inst902
inst906_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst904
	}
	goto unreachable

	goto unreachable
	goto inst903
inst903: // rune "19" -> 905
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst905
		}
	}
	goto inst903_fail
	goto unreachable
	goto inst903_fail
inst903_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 904:
			goto inst904_alt
		}
	}
	goto fail

	goto unreachable
	goto inst904
inst904: // alt -> 903, 905
	{
		idx := i*406 + 327
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 904, 0})
	goto inst903
inst904_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst905
	}
	goto unreachable

	goto unreachable
	goto inst905
inst905: // rune "09" -> 907
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst907
		}
	}
	goto inst905_fail
	goto unreachable
	goto inst905_fail
inst905_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 846:
			goto inst846_alt
		case 847:
			goto inst847_alt
		case 848:
			goto inst848_alt
		case 854:
			goto inst854_alt
		case 855:
			goto inst855_alt
		case 856:
			goto inst856_alt
		case 862:
			goto inst862_alt
		case 863:
			goto inst863_alt
		case 864:
			goto inst864_alt
		case 870:
			goto inst870_alt
		case 871:
			goto inst871_alt
		case 872:
			goto inst872_alt
		case 873:
			goto inst873_alt
		case 874:
			goto inst874_alt
		case 875:
			goto inst875_alt
		case 876:
			goto inst876_alt
		case 883:
			goto inst883_alt
		case 887:
			goto inst887_alt
		case 889:
			goto inst889_alt
		case 891:
			goto inst891_alt
		case 904:
			goto inst904_alt
		case 939:
			goto inst939_alt
		}
	}
	goto fail

	goto unreachable
	goto inst907
inst907: // string "." -> 921
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst921
		}
	}
	goto inst907_fail
	goto unreachable
	goto inst907_fail
inst907_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 846:
			goto inst846_alt
		case 847:
			goto inst847_alt
		case 848:
			goto inst848_alt
		case 854:
			goto inst854_alt
		case 855:
			goto inst855_alt
		case 856:
			goto inst856_alt
		case 862:
			goto inst862_alt
		case 863:
			goto inst863_alt
		case 864:
			goto inst864_alt
		case 870:
			goto inst870_alt
		case 871:
			goto inst871_alt
		case 872:
			goto inst872_alt
		case 873:
			goto inst873_alt
		case 874:
			goto inst874_alt
		case 875:
			goto inst875_alt
		case 876:
			goto inst876_alt
		case 883:
			goto inst883_alt
		case 887:
			goto inst887_alt
		case 889:
			goto inst889_alt
		case 891:
			goto inst891_alt
		case 898:
			goto inst898_alt
		case 902:
			goto inst902_alt
		case 904:
			goto inst904_alt
		case 906:
			goto inst906_alt
		case 939:
			goto inst939_alt
		}
	}
	goto fail

	goto unreachable
	goto inst913
inst913: // alt -> 909, 911
	{
		idx := i*406 + 328
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 913, 0})
	goto inst909
inst913_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst911
	}
	goto unreachable

	goto unreachable
	goto inst908
inst908: // string "2" -> 913
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst913
		}
	}
	goto inst908_fail
	goto unreachable
	goto inst908_fail
inst908_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 917:
			goto inst917_alt
		}
	}
	goto fail

	goto unreachable
	goto inst909
inst909: // string "5" -> 910
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst910
		}
	}
	goto inst909_fail
	goto unreachable
	goto inst909_fail
inst909_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 913:
			goto inst913_alt
		}
	}
	goto fail

	goto unreachable
	goto inst910
inst910: // rune "05" -> 922
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst922
		}
	}
	goto inst910_fail
	goto unreachable
	goto inst910_fail
inst910_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 913:
			goto inst913_alt
		}
	}
	goto fail

	goto unreachable
	goto inst911
inst911: // rune "04" -> 912
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst912
		}
	}
	goto inst911_fail
	goto unreachable
	goto inst911_fail
inst911_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 917:
			goto inst917_alt
		}
	}
	goto fail

	goto unreachable
	goto inst916
inst916: // rune "09" -> 922
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst922
		}
	}
	goto inst916_fail
	goto unreachable
	goto inst916_fail
inst916_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 921:
			goto inst921_alt
		}
	}
	goto fail

	goto unreachable
	goto inst917
inst917: // alt -> 908, 914
	{
		idx := i*406 + 329
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 917, 0})
	goto inst908
inst917_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst914
	}
	goto unreachable

	goto unreachable
	goto inst914
inst914: // string "1" -> 915
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst915
		}
	}
	goto inst914_fail
	goto unreachable
	goto inst914_fail
inst914_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 921:
			goto inst921_alt
		}
	}
	goto fail

	goto unreachable
	goto inst915
inst915: // rune "09" -> 916
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst916
		}
	}
	goto inst915_fail
	goto unreachable
	goto inst915_fail
inst915_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 921:
			goto inst921_alt
		}
	}
	goto fail

	goto unreachable
	goto inst912
inst912: // rune "09" -> 922
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst922
		}
	}
	goto inst912_fail
	goto unreachable
	goto inst912_fail
inst912_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 917:
			goto inst917_alt
		}
	}
	goto fail

	goto unreachable
	goto inst921
inst921: // alt -> 917, 919
	{
		idx := i*406 + 330
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 921, 0})
	goto inst917
inst921_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst919
	}
	goto unreachable

	goto unreachable
	goto inst918
inst918: // rune "19" -> 920
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst920
		}
	}
	goto inst918_fail
	goto unreachable
	goto inst918_fail
inst918_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 919:
			goto inst919_alt
		}
	}
	goto fail

	goto unreachable
	goto inst919
inst919: // alt -> 918, 920
	{
		idx := i*406 + 331
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 919, 0})
	goto inst918
inst919_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst920
	}
	goto unreachable

	goto unreachable
	goto inst920
inst920: // rune "09" -> 922
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst922
		}
	}
	goto inst920_fail
	goto unreachable
	goto inst920_fail
inst920_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 846:
			goto inst846_alt
		case 847:
			goto inst847_alt
		case 848:
			goto inst848_alt
		case 854:
			goto inst854_alt
		case 855:
			goto inst855_alt
		case 856:
			goto inst856_alt
		case 862:
			goto inst862_alt
		case 863:
			goto inst863_alt
		case 864:
			goto inst864_alt
		case 870:
			goto inst870_alt
		case 871:
			goto inst871_alt
		case 872:
			goto inst872_alt
		case 873:
			goto inst873_alt
		case 874:
			goto inst874_alt
		case 875:
			goto inst875_alt
		case 876:
			goto inst876_alt
		case 883:
			goto inst883_alt
		case 887:
			goto inst887_alt
		case 889:
			goto inst889_alt
		case 891:
			goto inst891_alt
		case 898:
			goto inst898_alt
		case 902:
			goto inst902_alt
		case 904:
			goto inst904_alt
		case 906:
			goto inst906_alt
		case 919:
			goto inst919_alt
		case 939:
			goto inst939_alt
		}
	}
	goto fail

	goto unreachable
	goto inst922
inst922: // string "." -> 936
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst936
		}
	}
	goto inst922_fail
	goto unreachable
	goto inst922_fail
inst922_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 846:
			goto inst846_alt
		case 847:
			goto inst847_alt
		case 848:
			goto inst848_alt
		case 854:
			goto inst854_alt
		case 855:
			goto inst855_alt
		case 856:
			goto inst856_alt
		case 862:
			goto inst862_alt
		case 863:
			goto inst863_alt
		case 864:
			goto inst864_alt
		case 870:
			goto inst870_alt
		case 871:
			goto inst871_alt
		case 872:
			goto inst872_alt
		case 873:
			goto inst873_alt
		case 874:
			goto inst874_alt
		case 875:
			goto inst875_alt
		case 876:
			goto inst876_alt
		case 883:
			goto inst883_alt
		case 887:
			goto inst887_alt
		case 889:
			goto inst889_alt
		case 891:
			goto inst891_alt
		case 898:
			goto inst898_alt
		case 902:
			goto inst902_alt
		case 904:
			goto inst904_alt
		case 906:
			goto inst906_alt
		case 913:
			goto inst913_alt
		case 917:
			goto inst917_alt
		case 919:
			goto inst919_alt
		case 921:
			goto inst921_alt
		case 939:
			goto inst939_alt
		}
	}
	goto fail

	goto unreachable
	goto inst928
inst928: // alt -> 924, 926
	{
		idx := i*406 + 332
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 928, 0})
	goto inst924
inst928_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst926
	}
	goto unreachable

	goto unreachable
	goto inst923
inst923: // string "2" -> 928
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst928
		}
	}
	goto inst923_fail
	goto unreachable
	goto inst923_fail
inst923_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 932:
			goto inst932_alt
		}
	}
	goto fail

	goto unreachable
	goto inst924
inst924: // string "5" -> 925
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst925
		}
	}
	goto inst924_fail
	goto unreachable
	goto inst924_fail
inst924_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 928:
			goto inst928_alt
		}
	}
	goto fail

	goto unreachable
	goto inst925
inst925: // rune "05" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1116
		}
	}
	goto inst925_fail
	goto unreachable
	goto inst925_fail
inst925_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 928:
			goto inst928_alt
		}
	}
	goto fail

	goto unreachable
	goto inst926
inst926: // rune "04" -> 927
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst927
		}
	}
	goto inst926_fail
	goto unreachable
	goto inst926_fail
inst926_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 932:
			goto inst932_alt
		}
	}
	goto fail

	goto unreachable
	goto inst927
inst927: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst927_fail
	goto unreachable
	goto inst927_fail
inst927_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 932:
			goto inst932_alt
		}
	}
	goto fail

	goto unreachable
	goto inst697
inst697: // string ":" -> 698
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst698
		}
	}
	goto inst697_fail
	goto unreachable
	goto inst697_fail
inst697_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 714:
			goto inst714_alt
		}
	}
	goto fail

	goto unreachable
	goto inst929
inst929: // string "1" -> 930
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst930
		}
	}
	goto inst929_fail
	goto unreachable
	goto inst929_fail
inst929_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 936:
			goto inst936_alt
		}
	}
	goto fail

	goto unreachable
	goto inst930
inst930: // rune "09" -> 931
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst931
		}
	}
	goto inst930_fail
	goto unreachable
	goto inst930_fail
inst930_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 936:
			goto inst936_alt
		}
	}
	goto fail

	goto unreachable
	goto inst931
inst931: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst931_fail
	goto unreachable
	goto inst931_fail
inst931_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 936:
			goto inst936_alt
		}
	}
	goto fail

	goto unreachable
	goto inst936
inst936: // alt -> 932, 934
	{
		idx := i*406 + 333
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 936, 0})
	goto inst932
inst936_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst934
	}
	goto unreachable

	goto unreachable
	goto inst933
inst933: // rune "19" -> 935
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst935
		}
	}
	goto inst933_fail
	goto unreachable
	goto inst933_fail
inst933_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 934:
			goto inst934_alt
		}
	}
	goto fail

	goto unreachable
	goto inst934
inst934: // alt -> 933, 935
	{
		idx := i*406 + 334
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 934, 0})
	goto inst933
inst934_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst935
	}
	goto unreachable

	goto unreachable
	goto inst935
inst935: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst935_fail
	goto unreachable
	goto inst935_fail
inst935_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 846:
			goto inst846_alt
		case 847:
			goto inst847_alt
		case 848:
			goto inst848_alt
		case 854:
			goto inst854_alt
		case 855:
			goto inst855_alt
		case 856:
			goto inst856_alt
		case 862:
			goto inst862_alt
		case 863:
			goto inst863_alt
		case 864:
			goto inst864_alt
		case 870:
			goto inst870_alt
		case 871:
			goto inst871_alt
		case 872:
			goto inst872_alt
		case 873:
			goto inst873_alt
		case 874:
			goto inst874_alt
		case 875:
			goto inst875_alt
		case 876:
			goto inst876_alt
		case 883:
			goto inst883_alt
		case 887:
			goto inst887_alt
		case 889:
			goto inst889_alt
		case 891:
			goto inst891_alt
		case 898:
			goto inst898_alt
		case 902:
			goto inst902_alt
		case 904:
			goto inst904_alt
		case 906:
			goto inst906_alt
		case 913:
			goto inst913_alt
		case 917:
			goto inst917_alt
		case 919:
			goto inst919_alt
		case 921:
			goto inst921_alt
		case 934:
			goto inst934_alt
		case 939:
			goto inst939_alt
		}
	}
	goto fail

	goto unreachable
	goto inst939
inst939: // alt -> 937, 938
	{
		idx := i*406 + 335
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 939, 0})
	goto inst937
inst939_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst938
	}
	goto unreachable

	goto unreachable
	goto inst1003
inst1003: // alt -> 950, 1116
	{
		idx := i*406 + 336
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1003, 0})
	goto inst950
inst1003_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst938
inst938: // string ":" -> 1116
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1116
		}
	}
	goto inst938_fail
	goto unreachable
	goto inst938_fail
inst938_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 784:
			goto inst784_alt
		case 785:
			goto inst785_alt
		case 786:
			goto inst786_alt
		case 1112:
			goto inst1112_alt
		}
	}
	goto fail

	goto unreachable
	goto inst932
inst932: // alt -> 923, 929
	{
		idx := i*406 + 337
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 932, 0})
	goto inst923
inst932_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst929
	}
	goto unreachable

	goto unreachable
	goto inst680
inst680: // rune "09AFaf" -> 682
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst682
			}
			goto inst680_fail
		}
	}
	goto inst680_fail
	goto unreachable
	goto inst680_fail
inst680_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 683:
			goto inst683_alt
		}
	}
	goto fail

	goto unreachable
	goto inst952
inst952: // rune "09AFaf" -> 956
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst956
			}
			goto inst952_fail
		}
	}
	goto inst952_fail
	goto unreachable
	goto inst952_fail
inst952_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 957:
			goto inst957_alt
		}
	}
	goto fail

	goto unreachable
	goto inst704
inst704: // alt -> 699, 713
	{
		idx := i*406 + 338
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 704, 0})
	goto inst699
inst704_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst713
	}
	goto unreachable

	goto unreachable
	goto inst698
inst698: // rune "09AFaf" -> 704
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst704
			}
			goto inst698_fail
		}
	}
	goto inst698_fail
	goto unreachable
	goto inst698_fail
inst698_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 714:
			goto inst714_alt
		}
	}
	goto fail

	goto unreachable
	goto inst944
inst944: // rune "09AFaf" -> 948
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst948
			}
			goto inst944_fail
		}
	}
	goto inst944_fail
	goto unreachable
	goto inst944_fail
inst944_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 949:
			goto inst949_alt
		}
	}
	goto fail

	goto unreachable
	goto inst945
inst945: // rune "09AFaf" -> 947
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst947
			}
			goto inst945_fail
		}
	}
	goto inst945_fail
	goto unreachable
	goto inst945_fail
inst945_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 948:
			goto inst948_alt
		}
	}
	goto fail

	goto unreachable
	goto inst946
inst946: // rune "09AFaf" -> 1003
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1003
			}
			goto inst946_fail
		}
	}
	goto inst946_fail
	goto unreachable
	goto inst946_fail
inst946_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 947:
			goto inst947_alt
		}
	}
	goto fail

	goto unreachable
	goto inst947
inst947: // alt -> 946, 1003
	{
		idx := i*406 + 339
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 947, 0})
	goto inst946
inst947_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1003
	}
	goto unreachable

	goto unreachable
	goto inst948
inst948: // alt -> 945, 1003
	{
		idx := i*406 + 340
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 948, 0})
	goto inst945
inst948_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1003
	}
	goto unreachable

	goto unreachable
	goto inst949
inst949: // alt -> 944, 1003
	{
		idx := i*406 + 341
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 949, 0})
	goto inst944
inst949_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1003
	}
	goto unreachable

	goto unreachable
	goto inst950
inst950: // string ":" -> 951
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst951
		}
	}
	goto inst950_fail
	goto unreachable
	goto inst950_fail
inst950_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1003:
			goto inst1003_alt
		}
	}
	goto fail

	goto unreachable
	goto inst951
inst951: // rune "09AFaf" -> 957
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst957
			}
			goto inst951_fail
		}
	}
	goto inst951_fail
	goto unreachable
	goto inst951_fail
inst951_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1003:
			goto inst1003_alt
		}
	}
	goto fail

	goto unreachable
	goto inst943
inst943: // rune "09AFaf" -> 949
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst949
			}
			goto inst943_fail
		}
	}
	goto inst943_fail
	goto unreachable
	goto inst943_fail
inst943_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1109:
			goto inst1109_alt
		}
	}
	goto fail

	goto unreachable
	goto inst953
inst953: // rune "09AFaf" -> 955
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst955
			}
			goto inst953_fail
		}
	}
	goto inst953_fail
	goto unreachable
	goto inst953_fail
inst953_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 956:
			goto inst956_alt
		}
	}
	goto fail

	goto unreachable
	goto inst954
inst954: // rune "09AFaf" -> 1002
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1002
			}
			goto inst954_fail
		}
	}
	goto inst954_fail
	goto unreachable
	goto inst954_fail
inst954_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 955:
			goto inst955_alt
		}
	}
	goto fail

	goto unreachable
	goto inst955
inst955: // alt -> 954, 1002
	{
		idx := i*406 + 342
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 955, 0})
	goto inst954
inst955_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1002
	}
	goto unreachable

	goto unreachable
	goto inst956
inst956: // alt -> 953, 1002
	{
		idx := i*406 + 343
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 956, 0})
	goto inst953
inst956_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1002
	}
	goto unreachable

	goto unreachable
	goto inst957
inst957: // alt -> 952, 1002
	{
		idx := i*406 + 344
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 957, 0})
	goto inst952
inst957_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1002
	}
	goto unreachable

	goto unreachable
	goto inst965
inst965: // alt -> 960, 1001
	{
		idx := i*406 + 345
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 965, 0})
	goto inst960
inst965_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1001
	}
	goto unreachable

	goto unreachable
	goto inst959
inst959: // rune "09AFaf" -> 965
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst965
			}
			goto inst959_fail
		}
	}
	goto inst959_fail
	goto unreachable
	goto inst959_fail
inst959_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1002:
			goto inst1002_alt
		}
	}
	goto fail

	goto unreachable
	goto inst960
inst960: // rune "09AFaf" -> 964
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst964
			}
			goto inst960_fail
		}
	}
	goto inst960_fail
	goto unreachable
	goto inst960_fail
inst960_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 965:
			goto inst965_alt
		}
	}
	goto fail

	goto unreachable
	goto inst961
inst961: // rune "09AFaf" -> 963
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst963
			}
			goto inst961_fail
		}
	}
	goto inst961_fail
	goto unreachable
	goto inst961_fail
inst961_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 964:
			goto inst964_alt
		}
	}
	goto fail

	goto unreachable
	goto inst962
inst962: // rune "09AFaf" -> 1001
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1001
			}
			goto inst962_fail
		}
	}
	goto inst962_fail
	goto unreachable
	goto inst962_fail
inst962_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 963:
			goto inst963_alt
		}
	}
	goto fail

	goto unreachable
	goto inst963
inst963: // alt -> 962, 1001
	{
		idx := i*406 + 346
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 963, 0})
	goto inst962
inst963_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1001
	}
	goto unreachable

	goto unreachable
	goto inst964
inst964: // alt -> 961, 1001
	{
		idx := i*406 + 347
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 964, 0})
	goto inst961
inst964_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1001
	}
	goto unreachable

	goto unreachable
	goto inst986
inst986: // rune "09AFaf" -> 998
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst998
			}
			goto inst986_fail
		}
	}
	goto inst986_fail
	goto unreachable
	goto inst986_fail
inst986_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 987:
			goto inst987_alt
		}
	}
	goto fail

	goto unreachable
	goto inst966
inst966: // string ":" -> 967
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst967
		}
	}
	goto inst966_fail
	goto unreachable
	goto inst966_fail
inst966_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1001:
			goto inst1001_alt
		}
	}
	goto fail

	goto unreachable
	goto inst967
inst967: // rune "09AFaf" -> 973
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst973
			}
			goto inst967_fail
		}
	}
	goto inst967_fail
	goto unreachable
	goto inst967_fail
inst967_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1001:
			goto inst1001_alt
		}
	}
	goto fail

	goto unreachable
	goto inst968
inst968: // rune "09AFaf" -> 972
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst972
			}
			goto inst968_fail
		}
	}
	goto inst968_fail
	goto unreachable
	goto inst968_fail
inst968_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 973:
			goto inst973_alt
		}
	}
	goto fail

	goto unreachable
	goto inst969
inst969: // rune "09AFaf" -> 971
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst971
			}
			goto inst969_fail
		}
	}
	goto inst969_fail
	goto unreachable
	goto inst969_fail
inst969_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 972:
			goto inst972_alt
		}
	}
	goto fail

	goto unreachable
	goto inst682
inst682: // alt -> 681, 1116
	{
		idx := i*406 + 348
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 682, 0})
	goto inst681
inst682_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst971
inst971: // alt -> 970, 1000
	{
		idx := i*406 + 349
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 971, 0})
	goto inst970
inst971_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1000
	}
	goto unreachable

	goto unreachable
	goto inst972
inst972: // alt -> 969, 1000
	{
		idx := i*406 + 350
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 972, 0})
	goto inst969
inst972_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1000
	}
	goto unreachable

	goto unreachable
	goto inst973
inst973: // alt -> 968, 1000
	{
		idx := i*406 + 351
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 973, 0})
	goto inst968
inst973_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1000
	}
	goto unreachable

	goto unreachable
	goto inst974
inst974: // string ":" -> 975
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst975
		}
	}
	goto inst974_fail
	goto unreachable
	goto inst974_fail
inst974_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1000:
			goto inst1000_alt
		}
	}
	goto fail

	goto unreachable
	goto inst999
inst999: // alt -> 982, 1116
	{
		idx := i*406 + 352
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 999, 0})
	goto inst982
inst999_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst976
inst976: // rune "09AFaf" -> 980
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst980
			}
			goto inst976_fail
		}
	}
	goto inst976_fail
	goto unreachable
	goto inst976_fail
inst976_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 981:
			goto inst981_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1002
inst1002: // alt -> 958, 1116
	{
		idx := i*406 + 353
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1002, 0})
	goto inst958
inst1002_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst699
inst699: // rune "09AFaf" -> 703
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst703
			}
			goto inst699_fail
		}
	}
	goto inst699_fail
	goto unreachable
	goto inst699_fail
inst699_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 704:
			goto inst704_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1001
inst1001: // alt -> 966, 1116
	{
		idx := i*406 + 354
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1001, 0})
	goto inst966
inst1001_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst980
inst980: // alt -> 977, 999
	{
		idx := i*406 + 355
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 980, 0})
	goto inst977
inst980_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst999
	}
	goto unreachable

	goto unreachable
	goto inst981
inst981: // alt -> 976, 999
	{
		idx := i*406 + 356
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 981, 0})
	goto inst976
inst981_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst999
	}
	goto unreachable

	goto unreachable
	goto inst982
inst982: // string ":" -> 983
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst983
		}
	}
	goto inst982_fail
	goto unreachable
	goto inst982_fail
inst982_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 999:
			goto inst999_alt
		}
	}
	goto fail

	goto unreachable
	goto inst983
inst983: // rune "09AFaf" -> 989
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst989
			}
			goto inst983_fail
		}
	}
	goto inst983_fail
	goto unreachable
	goto inst983_fail
inst983_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 999:
			goto inst999_alt
		}
	}
	goto fail

	goto unreachable
	goto inst989
inst989: // alt -> 984, 998
	{
		idx := i*406 + 357
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 989, 0})
	goto inst984
inst989_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst998
	}
	goto unreachable

	goto unreachable
	goto inst985
inst985: // rune "09AFaf" -> 987
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst987
			}
			goto inst985_fail
		}
	}
	goto inst985_fail
	goto unreachable
	goto inst985_fail
inst985_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 988:
			goto inst988_alt
		}
	}
	goto fail

	goto unreachable
	goto inst681
inst681: // rune "09AFaf" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1116
			}
			goto inst681_fail
		}
	}
	goto inst681_fail
	goto unreachable
	goto inst681_fail
inst681_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 682:
			goto inst682_alt
		}
	}
	goto fail

	goto unreachable
	goto inst987
inst987: // alt -> 986, 998
	{
		idx := i*406 + 358
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 987, 0})
	goto inst986
inst987_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst998
	}
	goto unreachable

	goto unreachable
	goto inst988
inst988: // alt -> 985, 998
	{
		idx := i*406 + 359
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 988, 0})
	goto inst985
inst988_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst998
	}
	goto unreachable

	goto unreachable
	goto inst1000
inst1000: // alt -> 974, 1116
	{
		idx := i*406 + 360
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1000, 0})
	goto inst974
inst1000_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst990
inst990: // string ":" -> 991
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst991
		}
	}
	goto inst990_fail
	goto unreachable
	goto inst990_fail
inst990_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 998:
			goto inst998_alt
		}
	}
	goto fail

	goto unreachable
	goto inst991
inst991: // rune "09AFaf" -> 997
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst997
			}
			goto inst991_fail
		}
	}
	goto inst991_fail
	goto unreachable
	goto inst991_fail
inst991_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 998:
			goto inst998_alt
		}
	}
	goto fail

	goto unreachable
	goto inst992
inst992: // rune "09AFaf" -> 996
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst996
			}
			goto inst992_fail
		}
	}
	goto inst992_fail
	goto unreachable
	goto inst992_fail
inst992_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 997:
			goto inst997_alt
		}
	}
	goto fail

	goto unreachable
	goto inst993
inst993: // rune "09AFaf" -> 995
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst995
			}
			goto inst993_fail
		}
	}
	goto inst993_fail
	goto unreachable
	goto inst993_fail
inst993_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 996:
			goto inst996_alt
		}
	}
	goto fail

	goto unreachable
	goto inst994
inst994: // rune "09AFaf" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1116
			}
			goto inst994_fail
		}
	}
	goto inst994_fail
	goto unreachable
	goto inst994_fail
inst994_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 995:
			goto inst995_alt
		}
	}
	goto fail

	goto unreachable
	goto inst995
inst995: // alt -> 994, 1116
	{
		idx := i*406 + 361
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 995, 0})
	goto inst994
inst995_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst984
inst984: // rune "09AFaf" -> 988
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst988
			}
			goto inst984_fail
		}
	}
	goto inst984_fail
	goto unreachable
	goto inst984_fail
inst984_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 989:
			goto inst989_alt
		}
	}
	goto fail

	goto unreachable
	goto inst996
inst996: // alt -> 993, 1116
	{
		idx := i*406 + 362
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 996, 0})
	goto inst993
inst996_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst998
inst998: // alt -> 990, 1116
	{
		idx := i*406 + 363
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 998, 0})
	goto inst990
inst998_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst975
inst975: // rune "09AFaf" -> 981
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst981
			}
			goto inst975_fail
		}
	}
	goto inst975_fail
	goto unreachable
	goto inst975_fail
inst975_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1000:
			goto inst1000_alt
		}
	}
	goto fail

	goto unreachable
	goto inst979
inst979: // alt -> 978, 999
	{
		idx := i*406 + 364
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 979, 0})
	goto inst978
inst979_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst999
	}
	goto unreachable

	goto unreachable
	goto inst977
inst977: // rune "09AFaf" -> 979
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst979
			}
			goto inst977_fail
		}
	}
	goto inst977_fail
	goto unreachable
	goto inst977_fail
inst977_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 980:
			goto inst980_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1019
inst1019: // alt -> 1014, 1046
	{
		idx := i*406 + 365
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1019, 0})
	goto inst1014
inst1019_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1046
	}
	goto unreachable

	goto unreachable
	goto inst1046
inst1046: // alt -> 1020, 1049
	{
		idx := i*406 + 366
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1046, 0})
	goto inst1020
inst1046_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1049
	}
	goto unreachable

	goto unreachable
	goto inst1018
inst1018: // alt -> 1015, 1046
	{
		idx := i*406 + 367
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1018, 0})
	goto inst1015
inst1018_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1046
	}
	goto unreachable

	goto unreachable
	goto inst997
inst997: // alt -> 992, 1116
	{
		idx := i*406 + 368
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 997, 0})
	goto inst992
inst997_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1116
	}
	goto unreachable

	goto unreachable
	goto inst1006
inst1006: // rune "09AFaf" -> 1010
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1010
			}
			goto inst1006_fail
		}
	}
	goto inst1006_fail
	goto unreachable
	goto inst1006_fail
inst1006_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1011:
			goto inst1011_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1007
inst1007: // rune "09AFaf" -> 1009
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1009
			}
			goto inst1007_fail
		}
	}
	goto inst1007_fail
	goto unreachable
	goto inst1007_fail
inst1007_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1010:
			goto inst1010_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1008
inst1008: // rune "09AFaf" -> 1047
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1047
			}
			goto inst1008_fail
		}
	}
	goto inst1008_fail
	goto unreachable
	goto inst1008_fail
inst1008_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1009:
			goto inst1009_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1009
inst1009: // alt -> 1008, 1047
	{
		idx := i*406 + 369
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1009, 0})
	goto inst1008
inst1009_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1047
	}
	goto unreachable

	goto unreachable
	goto inst1010
inst1010: // alt -> 1007, 1047
	{
		idx := i*406 + 370
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1010, 0})
	goto inst1007
inst1010_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1047
	}
	goto unreachable

	goto unreachable
	goto inst1027
inst1027: // alt -> 1022, 1045
	{
		idx := i*406 + 371
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1027, 0})
	goto inst1022
inst1027_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1045
	}
	goto unreachable

	goto unreachable
	goto inst978
inst978: // rune "09AFaf" -> 999
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst999
			}
			goto inst978_fail
		}
	}
	goto inst978_fail
	goto unreachable
	goto inst978_fail
inst978_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 979:
			goto inst979_alt
		}
	}
	goto fail

	goto unreachable
	goto inst970
inst970: // rune "09AFaf" -> 1000
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1000
			}
			goto inst970_fail
		}
	}
	goto inst970_fail
	goto unreachable
	goto inst970_fail
inst970_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 971:
			goto inst971_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1039
inst1039: // rune "09AFaf" -> 1041
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1041
			}
			goto inst1039_fail
		}
	}
	goto inst1039_fail
	goto unreachable
	goto inst1039_fail
inst1039_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1042:
			goto inst1042_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1015
inst1015: // rune "09AFaf" -> 1017
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1017
			}
			goto inst1015_fail
		}
	}
	goto inst1015_fail
	goto unreachable
	goto inst1015_fail
inst1015_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1018:
			goto inst1018_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1016
inst1016: // rune "09AFaf" -> 1046
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1046
			}
			goto inst1016_fail
		}
	}
	goto inst1016_fail
	goto unreachable
	goto inst1016_fail
inst1016_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1017:
			goto inst1017_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1017
inst1017: // alt -> 1016, 1046
	{
		idx := i*406 + 372
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1017, 0})
	goto inst1016
inst1017_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1046
	}
	goto unreachable

	goto unreachable
	goto inst958
inst958: // string ":" -> 959
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst959
		}
	}
	goto inst958_fail
	goto unreachable
	goto inst958_fail
inst958_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1002:
			goto inst1002_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1021
inst1021: // rune "09AFaf" -> 1027
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1027
			}
			goto inst1021_fail
		}
	}
	goto inst1021_fail
	goto unreachable
	goto inst1021_fail
inst1021_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1046:
			goto inst1046_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1020
inst1020: // string ":" -> 1021
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1021
		}
	}
	goto inst1020_fail
	goto unreachable
	goto inst1020_fail
inst1020_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1046:
			goto inst1046_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1031
inst1031: // rune "09AFaf" -> 1033
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1033
			}
			goto inst1031_fail
		}
	}
	goto inst1031_fail
	goto unreachable
	goto inst1031_fail
inst1031_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1034:
			goto inst1034_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1022
inst1022: // rune "09AFaf" -> 1026
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1026
			}
			goto inst1022_fail
		}
	}
	goto inst1022_fail
	goto unreachable
	goto inst1022_fail
inst1022_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1027:
			goto inst1027_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1023
inst1023: // rune "09AFaf" -> 1025
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1025
			}
			goto inst1023_fail
		}
	}
	goto inst1023_fail
	goto unreachable
	goto inst1023_fail
inst1023_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1026:
			goto inst1026_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1013
inst1013: // rune "09AFaf" -> 1019
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1019
			}
			goto inst1013_fail
		}
	}
	goto inst1013_fail
	goto unreachable
	goto inst1013_fail
inst1013_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1047:
			goto inst1047_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1025
inst1025: // alt -> 1024, 1045
	{
		idx := i*406 + 373
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1025, 0})
	goto inst1024
inst1025_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1045
	}
	goto unreachable

	goto unreachable
	goto inst1026
inst1026: // alt -> 1023, 1045
	{
		idx := i*406 + 374
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1026, 0})
	goto inst1023
inst1026_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1045
	}
	goto unreachable

	goto unreachable
	goto inst1028
inst1028: // string ":" -> 1029
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1029
		}
	}
	goto inst1028_fail
	goto unreachable
	goto inst1028_fail
inst1028_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1045:
			goto inst1045_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1011
inst1011: // alt -> 1006, 1047
	{
		idx := i*406 + 375
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1011, 0})
	goto inst1006
inst1011_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1047
	}
	goto unreachable

	goto unreachable
	goto inst1029
inst1029: // rune "09AFaf" -> 1035
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1035
			}
			goto inst1029_fail
		}
	}
	goto inst1029_fail
	goto unreachable
	goto inst1029_fail
inst1029_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1045:
			goto inst1045_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1033
inst1033: // alt -> 1032, 1044
	{
		idx := i*406 + 376
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1033, 0})
	goto inst1032
inst1033_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1044
	}
	goto unreachable

	goto unreachable
	goto inst1045
inst1045: // alt -> 1028, 1049
	{
		idx := i*406 + 377
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1045, 0})
	goto inst1028
inst1045_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1049
	}
	goto unreachable

	goto unreachable
	goto inst1032
inst1032: // rune "09AFaf" -> 1044
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1044
			}
			goto inst1032_fail
		}
	}
	goto inst1032_fail
	goto unreachable
	goto inst1032_fail
inst1032_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1033:
			goto inst1033_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1014
inst1014: // rune "09AFaf" -> 1018
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1018
			}
			goto inst1014_fail
		}
	}
	goto inst1014_fail
	goto unreachable
	goto inst1014_fail
inst1014_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1019:
			goto inst1019_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1034
inst1034: // alt -> 1031, 1044
	{
		idx := i*406 + 378
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1034, 0})
	goto inst1031
inst1034_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1044
	}
	goto unreachable

	goto unreachable
	goto inst1035
inst1035: // alt -> 1030, 1044
	{
		idx := i*406 + 379
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1035, 0})
	goto inst1030
inst1035_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1044
	}
	goto unreachable

	goto unreachable
	goto inst1024
inst1024: // rune "09AFaf" -> 1045
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1045
			}
			goto inst1024_fail
		}
	}
	goto inst1024_fail
	goto unreachable
	goto inst1024_fail
inst1024_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1025:
			goto inst1025_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1036
inst1036: // string ":" -> 1037
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1037
		}
	}
	goto inst1036_fail
	goto unreachable
	goto inst1036_fail
inst1036_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1044:
			goto inst1044_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1038
inst1038: // rune "09AFaf" -> 1042
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1042
			}
			goto inst1038_fail
		}
	}
	goto inst1038_fail
	goto unreachable
	goto inst1038_fail
inst1038_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1043:
			goto inst1043_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1037
inst1037: // rune "09AFaf" -> 1043
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1043
			}
			goto inst1037_fail
		}
	}
	goto inst1037_fail
	goto unreachable
	goto inst1037_fail
inst1037_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1044:
			goto inst1044_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1040
inst1040: // rune "09AFaf" -> 1049
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1049
			}
			goto inst1040_fail
		}
	}
	goto inst1040_fail
	goto unreachable
	goto inst1040_fail
inst1040_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1041:
			goto inst1041_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1041
inst1041: // alt -> 1040, 1049
	{
		idx := i*406 + 380
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1041, 0})
	goto inst1040
inst1041_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1049
	}
	goto unreachable

	goto unreachable
	goto inst1042
inst1042: // alt -> 1039, 1049
	{
		idx := i*406 + 381
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1042, 0})
	goto inst1039
inst1042_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1049
	}
	goto unreachable

	goto unreachable
	goto inst1043
inst1043: // alt -> 1038, 1049
	{
		idx := i*406 + 382
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1043, 0})
	goto inst1038
inst1043_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1049
	}
	goto unreachable

	goto unreachable
	goto inst1044
inst1044: // alt -> 1036, 1049
	{
		idx := i*406 + 383
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1044, 0})
	goto inst1036
inst1044_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1049
	}
	goto unreachable

	goto unreachable
	goto inst942
inst942: // string ":" -> 943
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst943
		}
	}
	goto inst942_fail
	goto unreachable
	goto inst942_fail
inst942_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1109:
			goto inst1109_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1049
inst1049: // string ":" -> 1063
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1063
		}
	}
	goto inst1049_fail
	goto unreachable
	goto inst1049_fail
inst1049_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1009:
			goto inst1009_alt
		case 1010:
			goto inst1010_alt
		case 1011:
			goto inst1011_alt
		case 1017:
			goto inst1017_alt
		case 1018:
			goto inst1018_alt
		case 1019:
			goto inst1019_alt
		case 1025:
			goto inst1025_alt
		case 1026:
			goto inst1026_alt
		case 1027:
			goto inst1027_alt
		case 1033:
			goto inst1033_alt
		case 1034:
			goto inst1034_alt
		case 1035:
			goto inst1035_alt
		case 1041:
			goto inst1041_alt
		case 1042:
			goto inst1042_alt
		case 1043:
			goto inst1043_alt
		case 1044:
			goto inst1044_alt
		case 1045:
			goto inst1045_alt
		case 1046:
			goto inst1046_alt
		case 1047:
			goto inst1047_alt
		case 1048:
			goto inst1048_alt
		case 1111:
			goto inst1111_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1047
inst1047: // alt -> 1012, 1049
	{
		idx := i*406 + 384
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1047, 0})
	goto inst1012
inst1047_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1049
	}
	goto unreachable

	goto unreachable
	goto inst1048
inst1048: // alt -> 1004, 1049
	{
		idx := i*406 + 385
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1048, 0})
	goto inst1004
inst1048_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1049
	}
	goto unreachable

	goto unreachable
	goto inst1055
inst1055: // alt -> 1051, 1053
	{
		idx := i*406 + 386
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1055, 0})
	goto inst1051
inst1055_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1053
	}
	goto unreachable

	goto unreachable
	goto inst1050
inst1050: // string "2" -> 1055
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst1055
		}
	}
	goto inst1050_fail
	goto unreachable
	goto inst1050_fail
inst1050_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1059:
			goto inst1059_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1051
inst1051: // string "5" -> 1052
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst1052
		}
	}
	goto inst1051_fail
	goto unreachable
	goto inst1051_fail
inst1051_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1055:
			goto inst1055_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1052
inst1052: // rune "05" -> 1064
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1064
		}
	}
	goto inst1052_fail
	goto unreachable
	goto inst1052_fail
inst1052_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1055:
			goto inst1055_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1053
inst1053: // rune "04" -> 1054
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst1054
		}
	}
	goto inst1053_fail
	goto unreachable
	goto inst1053_fail
inst1053_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1059:
			goto inst1059_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1054
inst1054: // rune "09" -> 1064
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1064
		}
	}
	goto inst1054_fail
	goto unreachable
	goto inst1054_fail
inst1054_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1059:
			goto inst1059_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1059
inst1059: // alt -> 1050, 1056
	{
		idx := i*406 + 387
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1059, 0})
	goto inst1050
inst1059_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1056
	}
	goto unreachable

	goto unreachable
	goto inst1056
inst1056: // string "1" -> 1057
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst1057
		}
	}
	goto inst1056_fail
	goto unreachable
	goto inst1056_fail
inst1056_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1063:
			goto inst1063_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1057
inst1057: // rune "09" -> 1058
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1058
		}
	}
	goto inst1057_fail
	goto unreachable
	goto inst1057_fail
inst1057_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1063:
			goto inst1063_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1058
inst1058: // rune "09" -> 1064
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1064
		}
	}
	goto inst1058_fail
	goto unreachable
	goto inst1058_fail
inst1058_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1063:
			goto inst1063_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1063
inst1063: // alt -> 1059, 1061
	{
		idx := i*406 + 388
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1063, 0})
	goto inst1059
inst1063_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1061
	}
	goto unreachable

	goto unreachable
	goto inst1060
inst1060: // rune "19" -> 1062
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst1062
		}
	}
	goto inst1060_fail
	goto unreachable
	goto inst1060_fail
inst1060_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1061:
			goto inst1061_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1061
inst1061: // alt -> 1060, 1062
	{
		idx := i*406 + 389
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1061, 0})
	goto inst1060
inst1061_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1062
	}
	goto unreachable

	goto unreachable
	goto inst1062
inst1062: // rune "09" -> 1064
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1064
		}
	}
	goto inst1062_fail
	goto unreachable
	goto inst1062_fail
inst1062_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1009:
			goto inst1009_alt
		case 1010:
			goto inst1010_alt
		case 1011:
			goto inst1011_alt
		case 1017:
			goto inst1017_alt
		case 1018:
			goto inst1018_alt
		case 1019:
			goto inst1019_alt
		case 1025:
			goto inst1025_alt
		case 1026:
			goto inst1026_alt
		case 1027:
			goto inst1027_alt
		case 1033:
			goto inst1033_alt
		case 1034:
			goto inst1034_alt
		case 1035:
			goto inst1035_alt
		case 1041:
			goto inst1041_alt
		case 1042:
			goto inst1042_alt
		case 1043:
			goto inst1043_alt
		case 1044:
			goto inst1044_alt
		case 1045:
			goto inst1045_alt
		case 1046:
			goto inst1046_alt
		case 1047:
			goto inst1047_alt
		case 1048:
			goto inst1048_alt
		case 1061:
			goto inst1061_alt
		case 1111:
			goto inst1111_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1064
inst1064: // string "." -> 1078
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst1078
		}
	}
	goto inst1064_fail
	goto unreachable
	goto inst1064_fail
inst1064_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1009:
			goto inst1009_alt
		case 1010:
			goto inst1010_alt
		case 1011:
			goto inst1011_alt
		case 1017:
			goto inst1017_alt
		case 1018:
			goto inst1018_alt
		case 1019:
			goto inst1019_alt
		case 1025:
			goto inst1025_alt
		case 1026:
			goto inst1026_alt
		case 1027:
			goto inst1027_alt
		case 1033:
			goto inst1033_alt
		case 1034:
			goto inst1034_alt
		case 1035:
			goto inst1035_alt
		case 1041:
			goto inst1041_alt
		case 1042:
			goto inst1042_alt
		case 1043:
			goto inst1043_alt
		case 1044:
			goto inst1044_alt
		case 1045:
			goto inst1045_alt
		case 1046:
			goto inst1046_alt
		case 1047:
			goto inst1047_alt
		case 1048:
			goto inst1048_alt
		case 1055:
			goto inst1055_alt
		case 1059:
			goto inst1059_alt
		case 1061:
			goto inst1061_alt
		case 1063:
			goto inst1063_alt
		case 1111:
			goto inst1111_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1070
inst1070: // alt -> 1066, 1068
	{
		idx := i*406 + 390
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1070, 0})
	goto inst1066
inst1070_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1068
	}
	goto unreachable

	goto unreachable
	goto inst1005
inst1005: // rune "09AFaf" -> 1011
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1011
			}
			goto inst1005_fail
		}
	}
	goto inst1005_fail
	goto unreachable
	goto inst1005_fail
inst1005_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1048:
			goto inst1048_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1004
inst1004: // string ":" -> 1005
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1005
		}
	}
	goto inst1004_fail
	goto unreachable
	goto inst1004_fail
inst1004_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1048:
			goto inst1048_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1067
inst1067: // rune "05" -> 1079
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1079
		}
	}
	goto inst1067_fail
	goto unreachable
	goto inst1067_fail
inst1067_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1070:
			goto inst1070_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1068
inst1068: // rune "04" -> 1069
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst1069
		}
	}
	goto inst1068_fail
	goto unreachable
	goto inst1068_fail
inst1068_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1074:
			goto inst1074_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1069
inst1069: // rune "09" -> 1079
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1079
		}
	}
	goto inst1069_fail
	goto unreachable
	goto inst1069_fail
inst1069_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1074:
			goto inst1074_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1074
inst1074: // alt -> 1065, 1071
	{
		idx := i*406 + 391
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1074, 0})
	goto inst1065
inst1074_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1071
	}
	goto unreachable

	goto unreachable
	goto inst1071
inst1071: // string "1" -> 1072
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst1072
		}
	}
	goto inst1071_fail
	goto unreachable
	goto inst1071_fail
inst1071_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1078:
			goto inst1078_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1072
inst1072: // rune "09" -> 1073
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1073
		}
	}
	goto inst1072_fail
	goto unreachable
	goto inst1072_fail
inst1072_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1078:
			goto inst1078_alt
		}
	}
	goto fail

	goto unreachable
	goto inst941
inst941: // string ":" -> 1111
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1111
		}
	}
	goto inst941_fail
	goto unreachable
	goto inst941_fail
inst941_fail:
	goto fail

	goto unreachable
	goto inst1078
inst1078: // alt -> 1074, 1076
	{
		idx := i*406 + 392
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1078, 0})
	goto inst1074
inst1078_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1076
	}
	goto unreachable

	goto unreachable
	goto inst1075
inst1075: // rune "19" -> 1077
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst1077
		}
	}
	goto inst1075_fail
	goto unreachable
	goto inst1075_fail
inst1075_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1076:
			goto inst1076_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1076
inst1076: // alt -> 1075, 1077
	{
		idx := i*406 + 393
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1076, 0})
	goto inst1075
inst1076_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1077
	}
	goto unreachable

	goto unreachable
	goto inst1073
inst1073: // rune "09" -> 1079
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1079
		}
	}
	goto inst1073_fail
	goto unreachable
	goto inst1073_fail
inst1073_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1078:
			goto inst1078_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1079
inst1079: // string "." -> 1093
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst1093
		}
	}
	goto inst1079_fail
	goto unreachable
	goto inst1079_fail
inst1079_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1009:
			goto inst1009_alt
		case 1010:
			goto inst1010_alt
		case 1011:
			goto inst1011_alt
		case 1017:
			goto inst1017_alt
		case 1018:
			goto inst1018_alt
		case 1019:
			goto inst1019_alt
		case 1025:
			goto inst1025_alt
		case 1026:
			goto inst1026_alt
		case 1027:
			goto inst1027_alt
		case 1033:
			goto inst1033_alt
		case 1034:
			goto inst1034_alt
		case 1035:
			goto inst1035_alt
		case 1041:
			goto inst1041_alt
		case 1042:
			goto inst1042_alt
		case 1043:
			goto inst1043_alt
		case 1044:
			goto inst1044_alt
		case 1045:
			goto inst1045_alt
		case 1046:
			goto inst1046_alt
		case 1047:
			goto inst1047_alt
		case 1048:
			goto inst1048_alt
		case 1055:
			goto inst1055_alt
		case 1059:
			goto inst1059_alt
		case 1061:
			goto inst1061_alt
		case 1063:
			goto inst1063_alt
		case 1070:
			goto inst1070_alt
		case 1074:
			goto inst1074_alt
		case 1076:
			goto inst1076_alt
		case 1078:
			goto inst1078_alt
		case 1111:
			goto inst1111_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1085
inst1085: // alt -> 1081, 1083
	{
		idx := i*406 + 394
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1085, 0})
	goto inst1081
inst1085_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1083
	}
	goto unreachable

	goto unreachable
	goto inst1080
inst1080: // string "2" -> 1085
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst1085
		}
	}
	goto inst1080_fail
	goto unreachable
	goto inst1080_fail
inst1080_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1089:
			goto inst1089_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1081
inst1081: // string "5" -> 1082
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst1082
		}
	}
	goto inst1081_fail
	goto unreachable
	goto inst1081_fail
inst1081_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1085:
			goto inst1085_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1082
inst1082: // rune "05" -> 1094
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1094
		}
	}
	goto inst1082_fail
	goto unreachable
	goto inst1082_fail
inst1082_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1085:
			goto inst1085_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1083
inst1083: // rune "04" -> 1084
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst1084
		}
	}
	goto inst1083_fail
	goto unreachable
	goto inst1083_fail
inst1083_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1089:
			goto inst1089_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1084
inst1084: // rune "09" -> 1094
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1094
		}
	}
	goto inst1084_fail
	goto unreachable
	goto inst1084_fail
inst1084_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1089:
			goto inst1089_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1089
inst1089: // alt -> 1080, 1086
	{
		idx := i*406 + 395
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1089, 0})
	goto inst1080
inst1089_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1086
	}
	goto unreachable

	goto unreachable
	goto inst1086
inst1086: // string "1" -> 1087
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst1087
		}
	}
	goto inst1086_fail
	goto unreachable
	goto inst1086_fail
inst1086_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1093:
			goto inst1093_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1087
inst1087: // rune "09" -> 1088
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1088
		}
	}
	goto inst1087_fail
	goto unreachable
	goto inst1087_fail
inst1087_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1093:
			goto inst1093_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1088
inst1088: // rune "09" -> 1094
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1094
		}
	}
	goto inst1088_fail
	goto unreachable
	goto inst1088_fail
inst1088_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1093:
			goto inst1093_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1093
inst1093: // alt -> 1089, 1091
	{
		idx := i*406 + 396
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1093, 0})
	goto inst1089
inst1093_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1091
	}
	goto unreachable

	goto unreachable
	goto inst1077
inst1077: // rune "09" -> 1079
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1079
		}
	}
	goto inst1077_fail
	goto unreachable
	goto inst1077_fail
inst1077_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1009:
			goto inst1009_alt
		case 1010:
			goto inst1010_alt
		case 1011:
			goto inst1011_alt
		case 1017:
			goto inst1017_alt
		case 1018:
			goto inst1018_alt
		case 1019:
			goto inst1019_alt
		case 1025:
			goto inst1025_alt
		case 1026:
			goto inst1026_alt
		case 1027:
			goto inst1027_alt
		case 1033:
			goto inst1033_alt
		case 1034:
			goto inst1034_alt
		case 1035:
			goto inst1035_alt
		case 1041:
			goto inst1041_alt
		case 1042:
			goto inst1042_alt
		case 1043:
			goto inst1043_alt
		case 1044:
			goto inst1044_alt
		case 1045:
			goto inst1045_alt
		case 1046:
			goto inst1046_alt
		case 1047:
			goto inst1047_alt
		case 1048:
			goto inst1048_alt
		case 1055:
			goto inst1055_alt
		case 1059:
			goto inst1059_alt
		case 1061:
			goto inst1061_alt
		case 1063:
			goto inst1063_alt
		case 1076:
			goto inst1076_alt
		case 1111:
			goto inst1111_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1091
inst1091: // alt -> 1090, 1092
	{
		idx := i*406 + 397
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1091, 0})
	goto inst1090
inst1091_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1092
	}
	goto unreachable

	goto unreachable
	goto inst1066
inst1066: // string "5" -> 1067
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst1067
		}
	}
	goto inst1066_fail
	goto unreachable
	goto inst1066_fail
inst1066_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1070:
			goto inst1070_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1094
inst1094: // string "." -> 1108
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst1108
		}
	}
	goto inst1094_fail
	goto unreachable
	goto inst1094_fail
inst1094_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1009:
			goto inst1009_alt
		case 1010:
			goto inst1010_alt
		case 1011:
			goto inst1011_alt
		case 1017:
			goto inst1017_alt
		case 1018:
			goto inst1018_alt
		case 1019:
			goto inst1019_alt
		case 1025:
			goto inst1025_alt
		case 1026:
			goto inst1026_alt
		case 1027:
			goto inst1027_alt
		case 1033:
			goto inst1033_alt
		case 1034:
			goto inst1034_alt
		case 1035:
			goto inst1035_alt
		case 1041:
			goto inst1041_alt
		case 1042:
			goto inst1042_alt
		case 1043:
			goto inst1043_alt
		case 1044:
			goto inst1044_alt
		case 1045:
			goto inst1045_alt
		case 1046:
			goto inst1046_alt
		case 1047:
			goto inst1047_alt
		case 1048:
			goto inst1048_alt
		case 1055:
			goto inst1055_alt
		case 1059:
			goto inst1059_alt
		case 1061:
			goto inst1061_alt
		case 1063:
			goto inst1063_alt
		case 1070:
			goto inst1070_alt
		case 1074:
			goto inst1074_alt
		case 1076:
			goto inst1076_alt
		case 1078:
			goto inst1078_alt
		case 1085:
			goto inst1085_alt
		case 1089:
			goto inst1089_alt
		case 1091:
			goto inst1091_alt
		case 1093:
			goto inst1093_alt
		case 1111:
			goto inst1111_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1100
inst1100: // alt -> 1096, 1098
	{
		idx := i*406 + 398
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1100, 0})
	goto inst1096
inst1100_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1098
	}
	goto unreachable

	goto unreachable
	goto inst1097
inst1097: // rune "05" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 53 {
			i += sz
			goto inst1116
		}
	}
	goto inst1097_fail
	goto unreachable
	goto inst1097_fail
inst1097_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1100:
			goto inst1100_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1096
inst1096: // string "5" -> 1097
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "5" {
			i += 1
			goto inst1097
		}
	}
	goto inst1096_fail
	goto unreachable
	goto inst1096_fail
inst1096_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1100:
			goto inst1100_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1012
inst1012: // string ":" -> 1013
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1013
		}
	}
	goto inst1012_fail
	goto unreachable
	goto inst1012_fail
inst1012_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1047:
			goto inst1047_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1098
inst1098: // rune "04" -> 1099
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 52 {
			i += sz
			goto inst1099
		}
	}
	goto inst1098_fail
	goto unreachable
	goto inst1098_fail
inst1098_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1104:
			goto inst1104_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1099
inst1099: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst1099_fail
	goto unreachable
	goto inst1099_fail
inst1099_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1104:
			goto inst1104_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1104
inst1104: // alt -> 1095, 1101
	{
		idx := i*406 + 399
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1104, 0})
	goto inst1095
inst1104_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1101
	}
	goto unreachable

	goto unreachable
	goto inst1101
inst1101: // string "1" -> 1102
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst1102
		}
	}
	goto inst1101_fail
	goto unreachable
	goto inst1101_fail
inst1101_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1108:
			goto inst1108_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1102
inst1102: // rune "09" -> 1103
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1103
		}
	}
	goto inst1102_fail
	goto unreachable
	goto inst1102_fail
inst1102_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1108:
			goto inst1108_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1103
inst1103: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst1103_fail
	goto unreachable
	goto inst1103_fail
inst1103_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1108:
			goto inst1108_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1108
inst1108: // alt -> 1104, 1106
	{
		idx := i*406 + 400
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1108, 0})
	goto inst1104
inst1108_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1106
	}
	goto unreachable

	goto unreachable
	goto inst1065
inst1065: // string "2" -> 1070
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst1070
		}
	}
	goto inst1065_fail
	goto unreachable
	goto inst1065_fail
inst1065_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1074:
			goto inst1074_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1106
inst1106: // alt -> 1105, 1107
	{
		idx := i*406 + 401
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1106, 0})
	goto inst1105
inst1106_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1107
	}
	goto unreachable

	goto unreachable
	goto inst1107
inst1107: // rune "09" -> 1116
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1116
		}
	}
	goto inst1107_fail
	goto unreachable
	goto inst1107_fail
inst1107_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1009:
			goto inst1009_alt
		case 1010:
			goto inst1010_alt
		case 1011:
			goto inst1011_alt
		case 1017:
			goto inst1017_alt
		case 1018:
			goto inst1018_alt
		case 1019:
			goto inst1019_alt
		case 1025:
			goto inst1025_alt
		case 1026:
			goto inst1026_alt
		case 1027:
			goto inst1027_alt
		case 1033:
			goto inst1033_alt
		case 1034:
			goto inst1034_alt
		case 1035:
			goto inst1035_alt
		case 1041:
			goto inst1041_alt
		case 1042:
			goto inst1042_alt
		case 1043:
			goto inst1043_alt
		case 1044:
			goto inst1044_alt
		case 1045:
			goto inst1045_alt
		case 1046:
			goto inst1046_alt
		case 1047:
			goto inst1047_alt
		case 1048:
			goto inst1048_alt
		case 1055:
			goto inst1055_alt
		case 1059:
			goto inst1059_alt
		case 1061:
			goto inst1061_alt
		case 1063:
			goto inst1063_alt
		case 1070:
			goto inst1070_alt
		case 1074:
			goto inst1074_alt
		case 1076:
			goto inst1076_alt
		case 1078:
			goto inst1078_alt
		case 1085:
			goto inst1085_alt
		case 1089:
			goto inst1089_alt
		case 1091:
			goto inst1091_alt
		case 1093:
			goto inst1093_alt
		case 1106:
			goto inst1106_alt
		case 1111:
			goto inst1111_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1109
inst1109: // alt -> 942, 1048
	{
		idx := i*406 + 402
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1109, 0})
	goto inst942
inst1109_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1048
	}
	goto unreachable

	goto unreachable
	goto inst1111
inst1111: // alt -> 1109, 1110
	{
		idx := i*406 + 403
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, stateIP{c, i, 1111, 0})
	goto inst1109
inst1111_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst1110
	}
	goto unreachable

	goto unreachable
	goto inst1110
inst1110: // string ":" -> 1116
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ":" {
			i += 1
			goto inst1116
		}
	}
	goto inst1110_fail
	goto unreachable
	goto inst1110_fail
inst1110_fail:
	goto fail

	goto unreachable
	goto inst1105
inst1105: // rune "19" -> 1107
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst1107
		}
	}
	goto inst1105_fail
	goto unreachable
	goto inst1105_fail
inst1105_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1106:
			goto inst1106_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1090
inst1090: // rune "19" -> 1092
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 49 && cr <= 57 {
			i += sz
			goto inst1092
		}
	}
	goto inst1090_fail
	goto unreachable
	goto inst1090_fail
inst1090_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1091:
			goto inst1091_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1113
inst1113: // string "%" -> 1114
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "%" {
			i += 1
			goto inst1114
		}
	}
	goto inst1113_fail
	goto unreachable
	goto inst1113_fail
inst1113_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1116:
			goto inst1116_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1114
inst1114: // anynotnl -> 1115
	if i < 0 || i >= len(r) {
		goto inst1114_fail
	}
	{
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cr == rune('\n') {
			goto inst1114_fail
		}
		i += sz
		goto inst1115
	}
	goto unreachable
	goto inst1114_fail
inst1114_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1116:
			goto inst1116_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1115
inst1115: // alt -> 1114, 1118
	{
		idx := i*406 + 404
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 1115 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst1114
		}
	}
	bt = append(bt, stateIP{c, i, 1115, 0})
	goto inst1114
inst1115_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst1118
	}
	goto unreachable

	goto unreachable
	goto inst1118
inst1118: // alt -> 1117, 1120
	{
		idx := i*406 + 405
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 1118 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst1117
		}
	}
	bt = append(bt, stateIP{c, i, 1118, 0})
	goto inst1117
inst1118_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst1120
	}
	goto unreachable

	goto unreachable
	goto inst1117
inst1117: // rune "\t\n\f\r  " -> 1118
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1118
			}
			goto inst1117_fail
		}
	}
	goto inst1117_fail
	goto unreachable
	goto inst1117_fail
inst1117_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1118:
			goto inst1118_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1030
inst1030: // rune "09AFaf" -> 1034
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\xff\x03~\x00\x00\x00~\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst1034
			}
			goto inst1030_fail
		}
	}
	goto inst1030_fail
	goto unreachable
	goto inst1030_fail
inst1030_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1035:
			goto inst1035_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1095
inst1095: // string "2" -> 1100
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "2" {
			i += 1
			goto inst1100
		}
	}
	goto inst1095_fail
	goto unreachable
	goto inst1095_fail
inst1095_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1104:
			goto inst1104_alt
		}
	}
	goto fail

	goto unreachable
	goto inst1092
inst1092: // rune "09" -> 1094
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst1094
		}
	}
	goto inst1092_fail
	goto unreachable
	goto inst1092_fail
inst1092_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 1009:
			goto inst1009_alt
		case 1010:
			goto inst1010_alt
		case 1011:
			goto inst1011_alt
		case 1017:
			goto inst1017_alt
		case 1018:
			goto inst1018_alt
		case 1019:
			goto inst1019_alt
		case 1025:
			goto inst1025_alt
		case 1026:
			goto inst1026_alt
		case 1027:
			goto inst1027_alt
		case 1033:
			goto inst1033_alt
		case 1034:
			goto inst1034_alt
		case 1035:
			goto inst1035_alt
		case 1041:
			goto inst1041_alt
		case 1042:
			goto inst1042_alt
		case 1043:
			goto inst1043_alt
		case 1044:
			goto inst1044_alt
		case 1045:
			goto inst1045_alt
		case 1046:
			goto inst1046_alt
		case 1047:
			goto inst1047_alt
		case 1048:
			goto inst1048_alt
		case 1055:
			goto inst1055_alt
		case 1059:
			goto inst1059_alt
		case 1061:
			goto inst1061_alt
		case 1063:
			goto inst1063_alt
		case 1070:
			goto inst1070_alt
		case 1074:
			goto inst1074_alt
		case 1076:
			goto inst1076_alt
		case 1078:
			goto inst1078_alt
		case 1091:
			goto inst1091_alt
		case 1111:
			goto inst1111_alt
		}
	}
	goto fail

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 6:
				goto inst6_alt
			case 11:
				goto inst11_alt
			case 8:
				goto inst8_alt
			case 12:
				goto inst12_alt
			case 25:
				goto inst25_alt
			case 19:
				goto inst19_alt
			case 21:
				goto inst21_alt
			case 24:
				goto inst24_alt
			case 38:
				goto inst38_alt
			case 32:
				goto inst32_alt
			case 34:
				goto inst34_alt
			case 37:
				goto inst37_alt
			case 51:
				goto inst51_alt
			case 47:
				goto inst47_alt
			case 45:
				goto inst45_alt
			case 50:
				goto inst50_alt
			case 1119:
				goto inst1119_alt
			case 56:
				goto inst56_alt
			case 57:
				goto inst57_alt
			case 58:
				goto inst58_alt
			case 66:
				goto inst66_alt
			case 65:
				goto inst65_alt
			case 64:
				goto inst64_alt
			case 74:
				goto inst74_alt
			case 73:
				goto inst73_alt
			case 72:
				goto inst72_alt
			case 82:
				goto inst82_alt
			case 81:
				goto inst81_alt
			case 80:
				goto inst80_alt
			case 90:
				goto inst90_alt
			case 89:
				goto inst89_alt
			case 88:
				goto inst88_alt
			case 96:
				goto inst96_alt
			case 97:
				goto inst97_alt
			case 98:
				goto inst98_alt
			case 106:
				goto inst106_alt
			case 105:
				goto inst105_alt
			case 104:
				goto inst104_alt
			case 122:
				goto inst122_alt
			case 121:
				goto inst121_alt
			case 123:
				goto inst123_alt
			case 131:
				goto inst131_alt
			case 130:
				goto inst130_alt
			case 129:
				goto inst129_alt
			case 139:
				goto inst139_alt
			case 138:
				goto inst138_alt
			case 137:
				goto inst137_alt
			case 147:
				goto inst147_alt
			case 146:
				goto inst146_alt
			case 145:
				goto inst145_alt
			case 155:
				goto inst155_alt
			case 154:
				goto inst154_alt
			case 153:
				goto inst153_alt
			case 235:
				goto inst235_alt
			case 163:
				goto inst163_alt
			case 162:
				goto inst162_alt
			case 161:
				goto inst161_alt
			case 234:
				goto inst234_alt
			case 232:
				goto inst232_alt
			case 186:
				goto inst186_alt
			case 116:
				goto inst116_alt
			case 182:
				goto inst182_alt
			case 178:
				goto inst178_alt
			case 184:
				goto inst184_alt
			case 193:
				goto inst193_alt
			case 201:
				goto inst201_alt
			case 197:
				goto inst197_alt
			case 199:
				goto inst199_alt
			case 208:
				goto inst208_alt
			case 216:
				goto inst216_alt
			case 212:
				goto inst212_alt
			case 214:
				goto inst214_alt
			case 223:
				goto inst223_alt
			case 172:
				goto inst172_alt
			case 227:
				goto inst227_alt
			case 231:
				goto inst231_alt
			case 229:
				goto inst229_alt
			case 356:
				goto inst356_alt
			case 242:
				goto inst242_alt
			case 171:
				goto inst171_alt
			case 241:
				goto inst241_alt
			case 240:
				goto inst240_alt
			case 250:
				goto inst250_alt
			case 248:
				goto inst248_alt
			case 249:
				goto inst249_alt
			case 258:
				goto inst258_alt
			case 257:
				goto inst257_alt
			case 256:
				goto inst256_alt
			case 266:
				goto inst266_alt
			case 265:
				goto inst265_alt
			case 264:
				goto inst264_alt
			case 274:
				goto inst274_alt
			case 273:
				goto inst273_alt
			case 272:
				goto inst272_alt
			case 355:
				goto inst355_alt
			case 283:
				goto inst283_alt
			case 282:
				goto inst282_alt
			case 281:
				goto inst281_alt
			case 292:
				goto inst292_alt
			case 299:
				goto inst299_alt
			case 303:
				goto inst303_alt
			case 291:
				goto inst291_alt
			case 354:
				goto inst354_alt
			case 307:
				goto inst307_alt
			case 305:
				goto inst305_alt
			case 322:
				goto inst322_alt
			case 318:
				goto inst318_alt
			case 314:
				goto inst314_alt
			case 320:
				goto inst320_alt
			case 329:
				goto inst329_alt
			case 335:
				goto inst335_alt
			case 337:
				goto inst337_alt
			case 333:
				goto inst333_alt
			case 290:
				goto inst290_alt
			case 344:
				goto inst344_alt
			case 352:
				goto inst352_alt
			case 348:
				goto inst348_alt
			case 487:
				goto inst487_alt
			case 363:
				goto inst363_alt
			case 350:
				goto inst350_alt
			case 114:
				goto inst114_alt
			case 362:
				goto inst362_alt
			case 361:
				goto inst361_alt
			case 371:
				goto inst371_alt
			case 370:
				goto inst370_alt
			case 369:
				goto inst369_alt
			case 377:
				goto inst377_alt
			case 378:
				goto inst378_alt
			case 379:
				goto inst379_alt
			case 387:
				goto inst387_alt
			case 386:
				goto inst386_alt
			case 385:
				goto inst385_alt
			case 394:
				goto inst394_alt
			case 395:
				goto inst395_alt
			case 414:
				goto inst414_alt
			case 396:
				goto inst396_alt
			case 404:
				goto inst404_alt
			case 403:
				goto inst403_alt
			case 402:
				goto inst402_alt
			case 413:
				goto inst413_alt
			case 113:
				goto inst113_alt
			case 422:
				goto inst422_alt
			case 412:
				goto inst412_alt
			case 421:
				goto inst421_alt
			case 420:
				goto inst420_alt
			case 423:
				goto inst423_alt
			case 484:
				goto inst484_alt
			case 486:
				goto inst486_alt
			case 438:
				goto inst438_alt
			case 434:
				goto inst434_alt
			case 436:
				goto inst436_alt
			case 430:
				goto inst430_alt
			case 449:
				goto inst449_alt
			case 453:
				goto inst453_alt
			case 445:
				goto inst445_alt
			case 451:
				goto inst451_alt
			case 289:
				goto inst289_alt
			case 468:
				goto inst468_alt
			case 464:
				goto inst464_alt
			case 460:
				goto inst460_alt
			case 466:
				goto inst466_alt
			case 483:
				goto inst483_alt
			case 481:
				goto inst481_alt
			case 479:
				goto inst479_alt
			case 475:
				goto inst475_alt
			case 628:
				goto inst628_alt
			case 494:
				goto inst494_alt
			case 492:
				goto inst492_alt
			case 493:
				goto inst493_alt
			case 502:
				goto inst502_alt
			case 501:
				goto inst501_alt
			case 500:
				goto inst500_alt
			case 508:
				goto inst508_alt
			case 779:
				goto inst779_alt
			case 510:
				goto inst510_alt
			case 509:
				goto inst509_alt
			case 519:
				goto inst519_alt
			case 518:
				goto inst518_alt
			case 517:
				goto inst517_alt
			case 546:
				goto inst546_alt
			case 527:
				goto inst527_alt
			case 535:
				goto inst535_alt
			case 534:
				goto inst534_alt
			case 533:
				goto inst533_alt
			case 544:
				goto inst544_alt
			case 526:
				goto inst526_alt
			case 545:
				goto inst545_alt
			case 625:
				goto inst625_alt
			case 525:
				goto inst525_alt
			case 543:
				goto inst543_alt
			case 542:
				goto inst542_alt
			case 554:
				goto inst554_alt
			case 627:
				goto inst627_alt
			case 564:
				goto inst564_alt
			case 553:
				goto inst553_alt
			case 552:
				goto inst552_alt
			case 563:
				goto inst563_alt
			case 562:
				goto inst562_alt
			case 561:
				goto inst561_alt
			case 560:
				goto inst560_alt
			case 571:
				goto inst571_alt
			case 575:
				goto inst575_alt
			case 541:
				goto inst541_alt
			case 579:
				goto inst579_alt
			case 577:
				goto inst577_alt
			case 586:
				goto inst586_alt
			case 590:
				goto inst590_alt
			case 592:
				goto inst592_alt
			case 594:
				goto inst594_alt
			case 601:
				goto inst601_alt
			case 605:
				goto inst605_alt
			case 607:
				goto inst607_alt
			case 609:
				goto inst609_alt
			case 616:
				goto inst616_alt
			case 620:
				goto inst620_alt
			case 622:
				goto inst622_alt
			case 624:
				goto inst624_alt
			case 633:
				goto inst633_alt
			case 634:
				goto inst634_alt
			case 635:
				goto inst635_alt
			case 641:
				goto inst641_alt
			case 642:
				goto inst642_alt
			case 643:
				goto inst643_alt
			case 652:
				goto inst652_alt
			case 650:
				goto inst650_alt
			case 651:
				goto inst651_alt
			case 688:
				goto inst688_alt
			case 660:
				goto inst660_alt
			case 659:
				goto inst659_alt
			case 112:
				goto inst112_alt
			case 170:
				goto inst170_alt
			case 667:
				goto inst667_alt
			case 411:
				goto inst411_alt
			case 668:
				goto inst668_alt
			case 410:
				goto inst410_alt
			case 1116:
				goto inst1116_alt
			case 686:
				goto inst686_alt
			case 674:
				goto inst674_alt
			case 675:
				goto inst675_alt
			case 684:
				goto inst684_alt
			case 685:
				goto inst685_alt
			case 687:
				goto inst687_alt
			case 940:
				goto inst940_alt
			case 658:
				goto inst658_alt
			case 666:
				goto inst666_alt
			case 1112:
				goto inst1112_alt
			case 676:
				goto inst676_alt
			case 695:
				goto inst695_alt
			case 694:
				goto inst694_alt
			case 702:
				goto inst702_alt
			case 696:
				goto inst696_alt
			case 710:
				goto inst710_alt
			case 712:
				goto inst712_alt
			case 715:
				goto inst715_alt
			case 714:
				goto inst714_alt
			case 711:
				goto inst711_alt
			case 713:
				goto inst713_alt
			case 776:
				goto inst776_alt
			case 778:
				goto inst778_alt
			case 722:
				goto inst722_alt
			case 726:
				goto inst726_alt
			case 730:
				goto inst730_alt
			case 728:
				goto inst728_alt
			case 737:
				goto inst737_alt
			case 743:
				goto inst743_alt
			case 741:
				goto inst741_alt
			case 745:
				goto inst745_alt
			case 752:
				goto inst752_alt
			case 756:
				goto inst756_alt
			case 767:
				goto inst767_alt
			case 771:
				goto inst771_alt
			case 760:
				goto inst760_alt
			case 773:
				goto inst773_alt
			case 775:
				goto inst775_alt
			case 703:
				goto inst703_alt
			case 758:
				goto inst758_alt
			case 683:
				goto inst683_alt
			case 840:
				goto inst840_alt
			case 786:
				goto inst786_alt
			case 784:
				goto inst784_alt
			case 785:
				goto inst785_alt
			case 839:
				goto inst839_alt
			case 793:
				goto inst793_alt
			case 794:
				goto inst794_alt
			case 795:
				goto inst795_alt
			case 801:
				goto inst801_alt
			case 802:
				goto inst802_alt
			case 803:
				goto inst803_alt
			case 809:
				goto inst809_alt
			case 810:
				goto inst810_alt
			case 811:
				goto inst811_alt
			case 837:
				goto inst837_alt
			case 838:
				goto inst838_alt
			case 818:
				goto inst818_alt
			case 819:
				goto inst819_alt
			case 825:
				goto inst825_alt
			case 826:
				goto inst826_alt
			case 827:
				goto inst827_alt
			case 833:
				goto inst833_alt
			case 817:
				goto inst817_alt
			case 835:
				goto inst835_alt
			case 836:
				goto inst836_alt
			case 834:
				goto inst834_alt
			case 847:
				goto inst847_alt
			case 875:
				goto inst875_alt
			case 846:
				goto inst846_alt
			case 848:
				goto inst848_alt
			case 874:
				goto inst874_alt
			case 854:
				goto inst854_alt
			case 855:
				goto inst855_alt
			case 856:
				goto inst856_alt
			case 862:
				goto inst862_alt
			case 863:
				goto inst863_alt
			case 864:
				goto inst864_alt
			case 870:
				goto inst870_alt
			case 871:
				goto inst871_alt
			case 872:
				goto inst872_alt
			case 873:
				goto inst873_alt
			case 937:
				goto inst937_alt
			case 876:
				goto inst876_alt
			case 883:
				goto inst883_alt
			case 887:
				goto inst887_alt
			case 891:
				goto inst891_alt
			case 889:
				goto inst889_alt
			case 898:
				goto inst898_alt
			case 902:
				goto inst902_alt
			case 906:
				goto inst906_alt
			case 904:
				goto inst904_alt
			case 913:
				goto inst913_alt
			case 917:
				goto inst917_alt
			case 921:
				goto inst921_alt
			case 919:
				goto inst919_alt
			case 928:
				goto inst928_alt
			case 936:
				goto inst936_alt
			case 934:
				goto inst934_alt
			case 939:
				goto inst939_alt
			case 1003:
				goto inst1003_alt
			case 932:
				goto inst932_alt
			case 704:
				goto inst704_alt
			case 947:
				goto inst947_alt
			case 948:
				goto inst948_alt
			case 949:
				goto inst949_alt
			case 955:
				goto inst955_alt
			case 956:
				goto inst956_alt
			case 957:
				goto inst957_alt
			case 965:
				goto inst965_alt
			case 963:
				goto inst963_alt
			case 964:
				goto inst964_alt
			case 682:
				goto inst682_alt
			case 971:
				goto inst971_alt
			case 972:
				goto inst972_alt
			case 973:
				goto inst973_alt
			case 999:
				goto inst999_alt
			case 1002:
				goto inst1002_alt
			case 1001:
				goto inst1001_alt
			case 980:
				goto inst980_alt
			case 981:
				goto inst981_alt
			case 989:
				goto inst989_alt
			case 987:
				goto inst987_alt
			case 988:
				goto inst988_alt
			case 1000:
				goto inst1000_alt
			case 995:
				goto inst995_alt
			case 996:
				goto inst996_alt
			case 998:
				goto inst998_alt
			case 979:
				goto inst979_alt
			case 1019:
				goto inst1019_alt
			case 1046:
				goto inst1046_alt
			case 1018:
				goto inst1018_alt
			case 997:
				goto inst997_alt
			case 1009:
				goto inst1009_alt
			case 1010:
				goto inst1010_alt
			case 1027:
				goto inst1027_alt
			case 1017:
				goto inst1017_alt
			case 1025:
				goto inst1025_alt
			case 1026:
				goto inst1026_alt
			case 1011:
				goto inst1011_alt
			case 1033:
				goto inst1033_alt
			case 1045:
				goto inst1045_alt
			case 1034:
				goto inst1034_alt
			case 1035:
				goto inst1035_alt
			case 1041:
				goto inst1041_alt
			case 1042:
				goto inst1042_alt
			case 1043:
				goto inst1043_alt
			case 1044:
				goto inst1044_alt
			case 1047:
				goto inst1047_alt
			case 1048:
				goto inst1048_alt
			case 1055:
				goto inst1055_alt
			case 1059:
				goto inst1059_alt
			case 1063:
				goto inst1063_alt
			case 1061:
				goto inst1061_alt
			case 1070:
				goto inst1070_alt
			case 1074:
				goto inst1074_alt
			case 1078:
				goto inst1078_alt
			case 1076:
				goto inst1076_alt
			case 1085:
				goto inst1085_alt
			case 1089:
				goto inst1089_alt
			case 1093:
				goto inst1093_alt
			case 1091:
				goto inst1091_alt
			case 1100:
				goto inst1100_alt
			case 1104:
				goto inst1104_alt
			case 1108:
				goto inst1108_alt
			case 1106:
				goto inst1106_alt
			case 1109:
				goto inst1109_alt
			case 1111:
				goto inst1111_alt
			case 1115:
				goto inst1115_alt
			case 1118:
				goto inst1118_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchIP || m == modeFirstIP {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
