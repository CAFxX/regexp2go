// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags=212 -pkg="commonregex" -fn="PhonesWithExts" -pool=true "(?i)(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*(?:[2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|(?:[2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?(?:[2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?(?:[0-9]{4})(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(?:\\d+)?)"

package commonregex

import "regexp/syntax"
import "unicode/utf8"
import "strings"
import "reflect"
import "unsafe"
import "runtime"
import "github.com/CAFxX/bytespool"

const PhonesWithExtsRegexp = "(?i)(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*(?:[2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|(?:[2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?(?:[2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?(?:[0-9]{4})(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(?:\\d+)?)"

var (
	_ = syntax.IsWordChar
	_ = strings.Index
)

type modeTypePhonesWithExts uint8

const (
	modeMatchPhonesWithExts modeTypePhonesWithExts = iota
	modeFirstPhonesWithExts
	modeLongestPhonesWithExts
)

// PhonesWithExts implements the regular expression
// (?i)(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*(?:[2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|(?:[2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?(?:[2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?(?:[0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(?:\d+)?)
// with flags 212.
type PhonesWithExts struct{}
type statePhonesWithExts struct {
	c   [2]int
	i   int
	pc  int
	cnt int
}

// FindString returns the first leftmost match.
func (e PhonesWithExts) FindString(r string) (matches [1]string, pos int, ok bool) {
	var bt [28]statePhonesWithExts // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeFirstPhonesWithExts, bt[:0])
	return
}

// FindLongestString returns the leftmost-longest match.
func (e PhonesWithExts) FindLongestString(r string) (matches [1]string, pos int, ok bool) {
	var bt [28]statePhonesWithExts // static storage for backtracking state
	matches, pos, ok = e.doString(r, modeLongestPhonesWithExts, bt[:0])
	return
}

// Find returns the first leftmost match.
func (e PhonesWithExts) Find(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [28]statePhonesWithExts // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeFirstPhonesWithExts, bt[:0])
	return
}

// FindLongest returns the leftmost-longest match.
func (e PhonesWithExts) FindLongest(s []byte) (matches [1][]byte, pos int, ok bool) {
	var bt [28]statePhonesWithExts // static storage for backtracking state
	matches, pos, ok = e.doByteSlice(s, modeLongestPhonesWithExts, bt[:0])
	return
}

func (e PhonesWithExts) doByteSlice(s []byte, m modeTypePhonesWithExts, bt []statePhonesWithExts) (matches [1][]byte, pos int, ok bool) {
	var r string
	rhdr := (*reflect.StringHeader)(unsafe.Pointer(&r))
	rhdr.Data = uintptr(unsafe.Pointer(&s[0]))
	rhdr.Len = len(s)

	var pmatches [1 * 2]int
	pmatches, ok = e.do(r, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]:pmatches[i*2+1]]
	}

	runtime.KeepAlive(s)
	return
}

func (e PhonesWithExts) doString(s string, m modeTypePhonesWithExts, bt []statePhonesWithExts) (matches [1]string, pos int, ok bool) {
	var pmatches [1 * 2]int
	pmatches, ok = e.do(s, m, bt)
	pos = pmatches[0]

	for i := range matches {
		if pmatches[i*2] < 0 {
			continue
		}
		matches[i] = s[pmatches[i*2]:pmatches[i*2+1]]
	}

	return
}

func (e PhonesWithExts) do(r string, m modeTypePhonesWithExts, bt []statePhonesWithExts) ([2]int, bool) {
	si := 0 // starting byte index

	ppi := bytespool.GetBytesSlicePtr(((len(r)+1)*28 + 7) / 8)
	defer func() {
		pi := *ppi
		for i := range pi {
			pi[i] = 0
		}
		bytespool.PutBytesSlicePtr(ppi)
	}()
	pi := *ppi
	_ = pi

restart:
	bt = bt[:0]         // fast reset dynamic backtracking state
	c := [2]int{-1, -1} // captures
	var bc [2]int       // captures for the longest match so far
	matched := false    // succesful match flag
	i := si             // current byte index
	c[0] = i            // start of match
	goto inst36         // initial instruction

	goto unreachable
	goto inst1
inst1: // string "+1" -> 5
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 2 && rs[:2] == "+1" {
			i += 2
			goto inst5
		}
	}
	goto inst1_fail
	goto unreachable
	goto inst1_fail
inst1_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		}
	}
	goto fail

	goto unreachable
	goto inst2
inst2: // alt -> 1, 3
	{
		idx := i*28 + 0
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 2, 0})
	goto inst1
inst2_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst3
	}
	goto unreachable

	goto unreachable
	goto inst3
inst3: // string "1" -> 5
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst5
		}
	}
	goto inst3_fail
	goto unreachable
	goto inst3_fail
inst3_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 10:
			goto inst10_alt
		}
	}
	goto fail

	goto unreachable
	goto inst5
inst5: // alt -> 4, 9
	{
		idx := i*28 + 1
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 5 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst4
		}
	}
	bt = append(bt, statePhonesWithExts{c, i, 5, 0})
	goto inst4
inst5_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst9
	}
	goto unreachable

	goto unreachable
	goto inst4
inst4: // rune "\t\n\f\r  " -> 5
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst5
			}
			goto inst4_fail
		}
	}
	goto inst4_fail
	goto unreachable
	goto inst4_fail
inst4_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 5:
			goto inst5_alt
		}
	}
	goto fail

	goto unreachable
	goto inst9
inst9: // alt -> 6, 29
	{
		idx := i*28 + 2
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 9, 0})
	goto inst6
inst9_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst29
	}
	goto unreachable

	goto unreachable
	goto inst6
inst6: // rune "-." -> 8
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 45 || cr == 46 {
			i += sz
			goto inst8
		}
	}
	goto inst6_fail
	goto unreachable
	goto inst6_fail
inst6_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 9:
			goto inst9_alt
		}
	}
	goto fail

	goto unreachable
	goto inst7
inst7: // rune "\t\n\f\r  " -> 8
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst8
			}
			goto inst7_fail
		}
	}
	goto inst7_fail
	goto unreachable
	goto inst7_fail
inst7_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 8:
			goto inst8_alt
		}
	}
	goto fail

	goto unreachable
	goto inst8
inst8: // alt -> 7, 29
	{
		idx := i*28 + 3
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 8 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst7
		}
	}
	bt = append(bt, statePhonesWithExts{c, i, 8, 0})
	goto inst7
inst8_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst29
	}
	goto unreachable

	goto unreachable
	goto inst29
inst29: // alt -> 11, 23
	{
		idx := i*28 + 4
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 29, 0})
	goto inst11
inst29_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst23
	}
	goto unreachable

	goto unreachable
	goto inst10
inst10: // alt -> 2, 29
	{
		idx := i*28 + 5
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 10, 0})
	goto inst2
inst10_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst29
	}
	goto unreachable

	goto unreachable
	goto inst11
inst11: // string "(" -> 13
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "(" {
			i += 1
			goto inst13
		}
	}
	goto inst11_fail
	goto unreachable
	goto inst11_fail
inst11_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 29:
			goto inst29_alt
		}
	}
	goto fail

	goto unreachable
	goto inst12
inst12: // rune "\t\n\f\r  " -> 13
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst13
			}
			goto inst12_fail
		}
	}
	goto inst12_fail
	goto unreachable
	goto inst12_fail
inst12_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 13:
			goto inst13_alt
		}
	}
	goto fail

	goto unreachable
	goto inst13
inst13: // alt -> 12, 14
	{
		idx := i*28 + 6
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 13 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst12
		}
	}
	bt = append(bt, statePhonesWithExts{c, i, 13, 0})
	goto inst12
inst13_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst14
	}
	goto unreachable

	goto unreachable
	goto inst14
inst14: // rune "29" -> 19
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 50 && cr <= 57 {
			i += sz
			goto inst19
		}
	}
	goto inst14_fail
	goto unreachable
	goto inst14_fail
inst14_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 29:
			goto inst29_alt
		}
	}
	goto fail

	goto unreachable
	goto inst19
inst19: // alt -> 15, 17
	{
		idx := i*28 + 7
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 19, 0})
	goto inst15
inst19_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst17
	}
	goto unreachable

	goto unreachable
	goto inst17
inst17: // rune "0028" -> 18
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || (cr >= 50 && cr <= 56) {
			i += sz
			goto inst18
		}
	}
	goto inst17_fail
	goto unreachable
	goto inst17_fail
inst17_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 29:
			goto inst29_alt
		}
	}
	goto fail

	goto unreachable
	goto inst15
inst15: // string "1" -> 16
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst16
		}
	}
	goto inst15_fail
	goto unreachable
	goto inst15_fail
inst15_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 19:
			goto inst19_alt
		}
	}
	goto fail

	goto unreachable
	goto inst18
inst18: // rune "09" -> 21
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst21
		}
	}
	goto inst18_fail
	goto unreachable
	goto inst18_fail
inst18_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 29:
			goto inst29_alt
		}
	}
	goto fail

	goto unreachable
	goto inst16
inst16: // rune "0029" -> 21
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || (cr >= 50 && cr <= 57) {
			i += sz
			goto inst21
		}
	}
	goto inst16_fail
	goto unreachable
	goto inst16_fail
inst16_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 19:
			goto inst19_alt
		}
	}
	goto fail

	goto unreachable
	goto inst21
inst21: // alt -> 20, 22
	{
		idx := i*28 + 8
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 21 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst20
		}
	}
	bt = append(bt, statePhonesWithExts{c, i, 21, 0})
	goto inst20
inst21_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst22
	}
	goto unreachable

	goto unreachable
	goto inst20
inst20: // rune "\t\n\f\r  " -> 21
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst21
			}
			goto inst20_fail
		}
	}
	goto inst20_fail
	goto unreachable
	goto inst20_fail
inst20_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 21:
			goto inst21_alt
		}
	}
	goto fail

	goto unreachable
	goto inst23
inst23: // rune "29" -> 28
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 50 && cr <= 57 {
			i += sz
			goto inst28
		}
	}
	goto inst23_fail
	goto unreachable
	goto inst23_fail
inst23_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 36:
			goto inst36_alt
		}
	}
	goto fail

	goto unreachable
	goto inst28
inst28: // alt -> 24, 26
	{
		idx := i*28 + 9
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 28, 0})
	goto inst24
inst28_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst26
	}
	goto unreachable

	goto unreachable
	goto inst24
inst24: // string "1" -> 25
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst25
		}
	}
	goto inst24_fail
	goto unreachable
	goto inst24_fail
inst24_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 28:
			goto inst28_alt
		}
	}
	goto fail

	goto unreachable
	goto inst25
inst25: // rune "0029" -> 31
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || (cr >= 50 && cr <= 57) {
			i += sz
			goto inst31
		}
	}
	goto inst25_fail
	goto unreachable
	goto inst25_fail
inst25_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 28:
			goto inst28_alt
		}
	}
	goto fail

	goto unreachable
	goto inst26
inst26: // rune "0028" -> 27
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || (cr >= 50 && cr <= 56) {
			i += sz
			goto inst27
		}
	}
	goto inst26_fail
	goto unreachable
	goto inst26_fail
inst26_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 36:
			goto inst36_alt
		}
	}
	goto fail

	goto unreachable
	goto inst27
inst27: // rune "09" -> 31
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst31
		}
	}
	goto inst27_fail
	goto unreachable
	goto inst27_fail
inst27_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 36:
			goto inst36_alt
		}
	}
	goto fail

	goto unreachable
	goto inst22
inst22: // string ")" -> 31
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == ")" {
			i += 1
			goto inst31
		}
	}
	goto inst22_fail
	goto unreachable
	goto inst22_fail
inst22_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 19:
			goto inst19_alt
		case 29:
			goto inst29_alt
		}
	}
	goto fail

	goto unreachable
	goto inst31
inst31: // alt -> 30, 35
	{
		idx := i*28 + 10
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 31 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst30
		}
	}
	bt = append(bt, statePhonesWithExts{c, i, 31, 0})
	goto inst30
inst31_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst35
	}
	goto unreachable

	goto unreachable
	goto inst30
inst30: // rune "\t\n\f\r  " -> 31
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst31
			}
			goto inst30_fail
		}
	}
	goto inst30_fail
	goto unreachable
	goto inst30_fail
inst30_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 31:
			goto inst31_alt
		}
	}
	goto fail

	goto unreachable
	goto inst35
inst35: // alt -> 32, 37
	{
		idx := i*28 + 11
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 35, 0})
	goto inst32
inst35_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst37
	}
	goto unreachable

	goto unreachable
	goto inst32
inst32: // rune "-." -> 34
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 45 || cr == 46 {
			i += sz
			goto inst34
		}
	}
	goto inst32_fail
	goto unreachable
	goto inst32_fail
inst32_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 35:
			goto inst35_alt
		}
	}
	goto fail

	goto unreachable
	goto inst33
inst33: // rune "\t\n\f\r  " -> 34
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst34
			}
			goto inst33_fail
		}
	}
	goto inst33_fail
	goto unreachable
	goto inst33_fail
inst33_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 34:
			goto inst34_alt
		}
	}
	goto fail

	goto unreachable
	goto inst34
inst34: // alt -> 33, 37
	{
		idx := i*28 + 12
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 34 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst33
		}
	}
	bt = append(bt, statePhonesWithExts{c, i, 34, 0})
	goto inst33
inst34_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst37
	}
	goto unreachable

	goto unreachable
	goto inst37
inst37: // rune "29" -> 45
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 50 && cr <= 57 {
			i += sz
			goto inst45
		}
	}
	goto inst37_fail
	goto unreachable
	goto inst37_fail
inst37_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		}
	}
	goto fail

	goto unreachable
	goto inst36
inst36: // alt -> 10, 37
	{
		idx := i*28 + 13
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 36, 0})
	goto inst10
inst36_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst37
	}
	goto unreachable

	goto unreachable
	goto inst45
inst45: // alt -> 42, 43
	{
		idx := i*28 + 14
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 45, 0})
	goto inst42
inst45_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst43
	}
	goto unreachable

	goto unreachable
	goto inst42
inst42: // alt -> 38, 40
	{
		idx := i*28 + 15
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 42, 0})
	goto inst38
inst42_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst40
	}
	goto unreachable

	goto unreachable
	goto inst40
inst40: // rune "0029" -> 41
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || (cr >= 50 && cr <= 57) {
			i += sz
			goto inst41
		}
	}
	goto inst40_fail
	goto unreachable
	goto inst40_fail
inst40_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 45:
			goto inst45_alt
		}
	}
	goto fail

	goto unreachable
	goto inst38
inst38: // string "1" -> 39
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst39
		}
	}
	goto inst38_fail
	goto unreachable
	goto inst38_fail
inst38_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 42:
			goto inst42_alt
		}
	}
	goto fail

	goto unreachable
	goto inst39
inst39: // rune "0029" -> 47
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || (cr >= 50 && cr <= 57) {
			i += sz
			goto inst47
		}
	}
	goto inst39_fail
	goto unreachable
	goto inst39_fail
inst39_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 42:
			goto inst42_alt
		}
	}
	goto fail

	goto unreachable
	goto inst41
inst41: // string "1" -> 47
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "1" {
			i += 1
			goto inst47
		}
	}
	goto inst41_fail
	goto unreachable
	goto inst41_fail
inst41_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 45:
			goto inst45_alt
		}
	}
	goto fail

	goto unreachable
	goto inst43
inst43: // rune "0029" -> 44
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || (cr >= 50 && cr <= 57) {
			i += sz
			goto inst44
		}
	}
	goto inst43_fail
	goto unreachable
	goto inst43_fail
inst43_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		}
	}
	goto fail

	goto unreachable
	goto inst44
inst44: // rune "0029" -> 47
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 48 || (cr >= 50 && cr <= 57) {
			i += sz
			goto inst47
		}
	}
	goto inst44_fail
	goto unreachable
	goto inst44_fail
inst44_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		}
	}
	goto fail

	goto unreachable
	goto inst47
inst47: // alt -> 46, 51
	{
		idx := i*28 + 16
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 47 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst46
		}
	}
	bt = append(bt, statePhonesWithExts{c, i, 47, 0})
	goto inst46
inst47_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst51
	}
	goto unreachable

	goto unreachable
	goto inst46
inst46: // rune "\t\n\f\r  " -> 47
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst47
			}
			goto inst46_fail
		}
	}
	goto inst46_fail
	goto unreachable
	goto inst46_fail
inst46_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 47:
			goto inst47_alt
		}
	}
	goto fail

	goto unreachable
	goto inst51
inst51: // alt -> 48, 52
	{
		idx := i*28 + 17
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 51, 0})
	goto inst48
inst51_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst52
	}
	goto unreachable

	goto unreachable
	goto inst48
inst48: // rune "-." -> 50
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 45 || cr == 46 {
			i += sz
			goto inst50
		}
	}
	goto inst48_fail
	goto unreachable
	goto inst48_fail
inst48_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst49
inst49: // rune "\t\n\f\r  " -> 50
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst50
			}
			goto inst49_fail
		}
	}
	goto inst49_fail
	goto unreachable
	goto inst49_fail
inst49_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 50:
			goto inst50_alt
		}
	}
	goto fail

	goto unreachable
	goto inst50
inst50: // alt -> 49, 52
	{
		idx := i*28 + 18
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 50 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst49
		}
	}
	bt = append(bt, statePhonesWithExts{c, i, 50, 0})
	goto inst49
inst50_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst52
	}
	goto unreachable

	goto unreachable
	goto inst52
inst52: // rune "09" -> 53
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst53
		}
	}
	goto inst52_fail
	goto unreachable
	goto inst52_fail
inst52_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		case 42:
			goto inst42_alt
		case 45:
			goto inst45_alt
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst75
inst75: // alt -> 62, 63
	{
		idx := i*28 + 19
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 75, 0})
	goto inst62
inst75_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst63
	}
	goto unreachable

	goto unreachable
	goto inst53
inst53: // rune "09" -> 54
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst54
		}
	}
	goto inst53_fail
	goto unreachable
	goto inst53_fail
inst53_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		case 42:
			goto inst42_alt
		case 45:
			goto inst45_alt
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst54
inst54: // rune "09" -> 55
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst55
		}
	}
	goto inst54_fail
	goto unreachable
	goto inst54_fail
inst54_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		case 42:
			goto inst42_alt
		case 45:
			goto inst45_alt
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst55
inst55: // rune "09" -> 57
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst57
		}
	}
	goto inst55_fail
	goto unreachable
	goto inst55_fail
inst55_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		case 42:
			goto inst42_alt
		case 45:
			goto inst45_alt
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst56
inst56: // rune "\t\n\f\r  " -> 57
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst57
			}
			goto inst56_fail
		}
	}
	goto inst56_fail
	goto unreachable
	goto inst56_fail
inst56_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 57:
			goto inst57_alt
		}
	}
	goto fail

	goto unreachable
	goto inst57
inst57: // alt -> 56, 75
	{
		idx := i*28 + 20
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 57 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst56
		}
	}
	bt = append(bt, statePhonesWithExts{c, i, 57, 0})
	goto inst56
inst57_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst75
	}
	goto unreachable

	goto unreachable
	goto inst65
inst65: // rune "T"/i -> 74
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 84 || cr == 116 {
			i += sz
			goto inst74
		}
	}
	goto inst65_fail
	goto unreachable
	goto inst65_fail
inst65_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		case 42:
			goto inst42_alt
		case 45:
			goto inst45_alt
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst59
inst59: // rune "X"/i -> 61
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 88 || cr == 120 {
			i += sz
			goto inst61
		}
	}
	goto inst59_fail
	goto unreachable
	goto inst59_fail
inst59_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 75:
			goto inst75_alt
		}
	}
	goto fail

	goto unreachable
	goto inst60
inst60: // string "." -> 77
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst77
		}
	}
	goto inst60_fail
	goto unreachable
	goto inst60_fail
inst60_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 61:
			goto inst61_alt
		}
	}
	goto fail

	goto unreachable
	goto inst61
inst61: // alt -> 60, 77
	{
		idx := i*28 + 21
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 61, 0})
	goto inst60
inst61_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst77
	}
	goto unreachable

	goto unreachable
	goto inst62
inst62: // alt -> 58, 59
	{
		idx := i*28 + 22
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 62, 0})
	goto inst58
inst62_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst59
	}
	goto unreachable

	goto unreachable
	goto inst63
inst63: // rune "E"/i -> 64
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst64
		}
	}
	goto inst63_fail
	goto unreachable
	goto inst63_fail
inst63_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		case 42:
			goto inst42_alt
		case 45:
			goto inst45_alt
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst64
inst64: // rune "X"/i -> 65
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 88 || cr == 120 {
			i += sz
			goto inst65
		}
	}
	goto inst64_fail
	goto unreachable
	goto inst64_fail
inst64_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		case 42:
			goto inst42_alt
		case 45:
			goto inst45_alt
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst74
inst74: // alt -> 67, 68
	{
		idx := i*28 + 23
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 74, 0})
	goto inst67
inst74_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst68
	}
	goto unreachable

	goto unreachable
	goto inst66
inst66: // string "." -> 77
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "." {
			i += 1
			goto inst77
		}
	}
	goto inst66_fail
	goto unreachable
	goto inst66_fail
inst66_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 67:
			goto inst67_alt
		}
	}
	goto fail

	goto unreachable
	goto inst67
inst67: // alt -> 66, 77
	{
		idx := i*28 + 24
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 67, 0})
	goto inst66
inst67_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst77
	}
	goto unreachable

	goto unreachable
	goto inst68
inst68: // rune "E"/i -> 69
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 69 || cr == 101 {
			i += sz
			goto inst69
		}
	}
	goto inst68_fail
	goto unreachable
	goto inst68_fail
inst68_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		case 42:
			goto inst42_alt
		case 45:
			goto inst45_alt
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst69
inst69: // rune "N"/i -> 70
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 78 || cr == 110 {
			i += sz
			goto inst70
		}
	}
	goto inst69_fail
	goto unreachable
	goto inst69_fail
inst69_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		case 42:
			goto inst42_alt
		case 45:
			goto inst45_alt
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst70
inst70: // rune "S"/i -> 71
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cru := uint(cr); cru < 128 {
			const runeMask = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\b\x00\x00\x00\b\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst71
			}
			goto inst70_fail
		}
		if cr == 383 {
			i += sz
			goto inst71
		}
	}
	goto inst70_fail
	goto unreachable
	goto inst70_fail
inst70_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		case 42:
			goto inst42_alt
		case 45:
			goto inst45_alt
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst71
inst71: // rune "I"/i -> 72
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 73 || cr == 105 {
			i += sz
			goto inst72
		}
	}
	goto inst71_fail
	goto unreachable
	goto inst71_fail
inst71_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		case 42:
			goto inst42_alt
		case 45:
			goto inst45_alt
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst72
inst72: // rune "O"/i -> 73
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 79 || cr == 111 {
			i += sz
			goto inst73
		}
	}
	goto inst72_fail
	goto unreachable
	goto inst72_fail
inst72_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		case 42:
			goto inst42_alt
		case 45:
			goto inst45_alt
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst73
inst73: // rune "N"/i -> 77
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr == 78 || cr == 110 {
			i += sz
			goto inst77
		}
	}
	goto inst73_fail
	goto unreachable
	goto inst73_fail
inst73_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 2:
			goto inst2_alt
		case 9:
			goto inst9_alt
		case 10:
			goto inst10_alt
		case 19:
			goto inst19_alt
		case 28:
			goto inst28_alt
		case 29:
			goto inst29_alt
		case 35:
			goto inst35_alt
		case 36:
			goto inst36_alt
		case 42:
			goto inst42_alt
		case 45:
			goto inst45_alt
		case 51:
			goto inst51_alt
		}
	}
	goto fail

	goto unreachable
	goto inst58
inst58: // string "#" -> 77
	if i >= 0 && len(r) >= i {
		if rs := r[i:]; len(rs) >= 1 && rs[:1] == "#" {
			i += 1
			goto inst77
		}
	}
	goto inst58_fail
	goto unreachable
	goto inst58_fail
inst58_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 62:
			goto inst62_alt
		}
	}
	goto fail

	goto unreachable
	goto inst77
inst77: // alt -> 76, 80
	{
		idx := i*28 + 25
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 77 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst76
		}
	}
	bt = append(bt, statePhonesWithExts{c, i, 77, 0})
	goto inst76
inst77_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst80
	}
	goto unreachable

	goto unreachable
	goto inst76
inst76: // rune "\t\n\f\r  " -> 77
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cru := uint(cr); cru < 128 {
			const runeMask = "\x006\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
			if runeMask[cru/8]&(1<<(cru%8)) != 0 {
				i += sz
				goto inst77
			}
			goto inst76_fail
		}
	}
	goto inst76_fail
	goto unreachable
	goto inst76_fail
inst76_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 77:
			goto inst77_alt
		}
	}
	goto fail

	goto unreachable
	goto inst80
inst80: // alt -> 78, 81
	{
		idx := i*28 + 26
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	bt = append(bt, statePhonesWithExts{c, i, 80, 0})
	goto inst78
inst80_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		c, i = bt[n].c, bt[n].i
		bt = bt[:n]
		goto inst81
	}
	goto unreachable

	goto unreachable
	goto inst78
inst78: // rune "09" -> 79
	if i >= 0 && i < len(r) {
		cr, sz := rune(r[i]), 1
		if cr >= 48 && cr <= 57 {
			i += sz
			goto inst79
		}
	}
	goto inst78_fail
	goto unreachable
	goto inst78_fail
inst78_fail:
	if i <= len(r) && len(bt) > 0 {
		switch bt[len(bt)-1].pc {
		default:
			goto unreachable
		case 80:
			goto inst80_alt
		}
	}
	goto fail

	goto unreachable
	goto inst79
inst79: // alt -> 78, 81
	{
		idx := i*28 + 27
		if pi[idx/8]&(byte(1)<<(idx%8)) != 0 {
			goto fail
		}
		pi[idx/8] |= byte(1) << (idx % 8)
	}
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 79 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst78
		}
	}
	bt = append(bt, statePhonesWithExts{c, i, 79, 0})
	goto inst78
inst79_alt:
	if len(bt) > 0 {
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst81
	}
	goto unreachable

	// inst0 unreacheable

	goto unreachable
	goto inst81
inst81: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			switch bt[len(bt)-1].pc {
			default:
				panic(bt[len(bt)-1].pc)
			case 2:
				goto inst2_alt
			case 5:
				goto inst5_alt
			case 9:
				goto inst9_alt
			case 8:
				goto inst8_alt
			case 29:
				goto inst29_alt
			case 10:
				goto inst10_alt
			case 13:
				goto inst13_alt
			case 19:
				goto inst19_alt
			case 21:
				goto inst21_alt
			case 28:
				goto inst28_alt
			case 31:
				goto inst31_alt
			case 35:
				goto inst35_alt
			case 34:
				goto inst34_alt
			case 36:
				goto inst36_alt
			case 45:
				goto inst45_alt
			case 42:
				goto inst42_alt
			case 47:
				goto inst47_alt
			case 51:
				goto inst51_alt
			case 50:
				goto inst50_alt
			case 75:
				goto inst75_alt
			case 57:
				goto inst57_alt
			case 61:
				goto inst61_alt
			case 62:
				goto inst62_alt
			case 74:
				goto inst74_alt
			case 67:
				goto inst67_alt
			case 77:
				goto inst77_alt
			case 80:
				goto inst80_alt
			case 79:
				goto inst79_alt
			}
		}
		if matched {
			return bc, true
		}
		if len(r) > si {
			i = si
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		return bc, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		if m == modeMatchPhonesWithExts || m == modeFirstPhonesWithExts {
			return c, true
		}
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
