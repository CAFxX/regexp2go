// File generated by regexp2go. DO NOT EDIT.
// regexp2go -flags 212 -pkg "log_parse" -fn "Match" "(?m)^INFO res=([0-9]+) msg=(.*)$"

package log_parse

import "regexp/syntax"
import "unicode/utf8"
import "strings"

const MatchRegexp = "(?m)^INFO res=([0-9]+) msg=(.*)$"

var _ = syntax.IsWordChar
var _ = strings.Index

type state struct {
	c   [6]int
	i   int
	pc  int
	cnt int
}

// Match implements the regular expression
// (?m)^INFO res=([0-9]+) msg=(.*)$
// with flags 212
func Match(r string) ([3]string, bool) {
	si := 0 // starting byte index
restart:
	var _bt [2]state // static storage for backtracking state
	bt := _bt[:0]    // backtracking state
	var c [6]int     // captures
	var bc [6]int    // captures for the longest match so far
	matched := false
	i := si    // current byte index
	c[0] = i   // start of match
	goto inst1 // initial instruction

	goto unreachable
	goto inst0
inst0: // fail
	goto fail

	goto unreachable
	goto inst1
inst1: // empty 1 -> 2
	{
		before := rune(-1)
		if i := i - 1; i >= 0 && i < len(r) {
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}
			before, _ = cr, sz
		}
		if before == '\n' || before == -1 {
			goto inst2
		}
		goto fail
	}

	goto unreachable
	goto inst2
inst2: // rune1 "I" -> 3
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || cr == 73 {
			i += sz
			goto inst3
		}
	}
	goto fail

	goto unreachable
	goto inst3
inst3: // rune1 "N" -> 4
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || cr == 78 {
			i += sz
			goto inst4
		}
	}
	goto fail

	goto unreachable
	goto inst4
inst4: // rune1 "F" -> 5
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || cr == 70 {
			i += sz
			goto inst5
		}
	}
	goto fail

	goto unreachable
	goto inst5
inst5: // rune1 "O" -> 6
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || cr == 79 {
			i += sz
			goto inst6
		}
	}
	goto fail

	goto unreachable
	goto inst6
inst6: // rune1 " " -> 7
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || cr == 32 {
			i += sz
			goto inst7
		}
	}
	goto fail

	goto unreachable
	goto inst7
inst7: // rune1 "r" -> 8
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || cr == 114 {
			i += sz
			goto inst8
		}
	}
	goto fail

	goto unreachable
	goto inst8
inst8: // rune1 "e" -> 9
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || cr == 101 {
			i += sz
			goto inst9
		}
	}
	goto fail

	goto unreachable
	goto inst9
inst9: // rune1 "s" -> 10
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || cr == 115 {
			i += sz
			goto inst10
		}
	}
	goto fail

	goto unreachable
	goto inst10
inst10: // rune1 "=" -> 11
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || cr == 61 {
			i += sz
			goto inst11
		}
	}
	goto fail

	goto unreachable
	goto inst11
inst11: // cap 2 -> 12
	c[2] = i
	goto inst12

	goto unreachable
	goto inst12
inst12: // rune "09" -> 13
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || (cr >= 48 && cr <= 57) {
			i += sz
			goto inst13
		}
	}
	goto fail

	goto unreachable
	goto inst13
inst13: // alt -> 12, 14
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 13 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst12
		}
	}
	bt = append(bt, state{c, i, 13, 0})
	goto inst12
inst13_alt:
	{
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst14
	}

	goto unreachable
	goto inst14
inst14: // cap 3 -> 15
	c[3] = i
	goto inst15

	goto unreachable
	goto inst15
inst15: // rune1 " " -> 16
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || cr == 32 {
			i += sz
			goto inst16
		}
	}
	goto fail

	goto unreachable
	goto inst16
inst16: // rune1 "m" -> 17
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || cr == 109 {
			i += sz
			goto inst17
		}
	}
	goto fail

	goto unreachable
	goto inst17
inst17: // rune1 "s" -> 18
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || cr == 115 {
			i += sz
			goto inst18
		}
	}
	goto fail

	goto unreachable
	goto inst18
inst18: // rune1 "g" -> 19
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || cr == 103 {
			i += sz
			goto inst19
		}
	}
	goto fail

	goto unreachable
	goto inst19
inst19: // rune1 "=" -> 20
	if i >= 0 && i < len(r) {

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if false || cr == 61 {
			i += sz
			goto inst20
		}
	}
	goto fail

	goto unreachable
	goto inst20
inst20: // cap 4 -> 22
	c[4] = i
	goto inst22

	goto unreachable
	goto inst21
inst21: // anynotnl -> 22
	if i < 0 || i >= len(r) {
		goto fail
	}
	{

		cr, sz := rune(r[i]), 1
		if cr >= utf8.RuneSelf {
			cr, sz = utf8.DecodeRuneInString(r[i:])
		}

		if cr == rune('\n') {
			goto fail
		}
		i += sz
		goto inst22
	}

	goto unreachable
	goto inst22
inst22: // alt -> 21, 23
	if len(bt) > 0 {
		ps := &bt[len(bt)-1]
		if ps.pc == 22 && i-ps.i == 1 {
			// simple loop
			ps.i = i
			ps.cnt++
			goto inst21
		}
	}
	bt = append(bt, state{c, i, 22, 0})
	goto inst21
inst22_alt:
	{
		n := len(bt) - 1
		ps := &bt[n]
		c, i = ps.c, ps.i
		if ps.cnt > 0 {
			// simple loop
			ps.i -= 1
			ps.cnt--
		} else {
			bt = bt[:n]
		}
		goto inst23
	}

	goto unreachable
	goto inst23
inst23: // cap 5 -> 24
	c[5] = i
	goto inst24

	goto unreachable
	goto inst24
inst24: // empty 2 -> 25
	{
		after := rune(-1)
		if i := i; i >= 0 && i < len(r) {
			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}
			after, _ = cr, sz
		}
		if after == '\n' || after == -1 {
			goto inst25
		}
		goto fail
	}

	goto unreachable
	goto inst25
inst25: // match
	c[1] = i // end of match
	goto match

	goto unreachable
	goto backtrack
backtrack:
	switch bt[len(bt)-1].pc {
	default:
		panic(bt[len(bt)-1].pc)
	case 13:
		goto inst13_alt
	case 22:
		goto inst22_alt
	}

	goto unreachable
	goto fail
fail:
	{
		if i <= len(r) && len(bt) > 0 {
			goto backtrack
		}
		if matched {
			var m [3]string
			m[0] = r[bc[0]:bc[1]]
			m[1] = r[bc[2]:bc[3]]
			m[2] = r[bc[4]:bc[5]]
			return m, true
		}
		if len(r[si:]) != 0 {
			i = si

			cr, sz := rune(r[i]), 1
			if cr >= utf8.RuneSelf {
				cr, sz = utf8.DecodeRuneInString(r[i:])
			}

			si += sz
			_ = cr
			goto restart
		}
		var m [3]string
		return m, false
	}

	goto unreachable
	goto match
match:
	if !matched || c[1]-c[0] > bc[1]-bc[0] {
		bc = c
		matched = true
	}
	goto fail

	goto unreachable
unreachable:
	panic("unreachable")
}
